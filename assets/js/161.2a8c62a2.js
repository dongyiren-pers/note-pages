(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{1098:function(t,a,v){"use strict";v.r(a);var e=v(14),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"rocketmq-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-简介"}},[t._v("#")]),t._v(" RocketMQ 简介")]),t._v(" "),v("p",[t._v("RocketMQ 作为一款纯 Java、分布式、队列模型的开源消息中间件，支持事务消息、顺序消息、批量消息、定时消息、消息回溯等。")]),t._v(" "),v("h2",{attrs:{id:"rocketmq-特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-特点"}},[t._v("#")]),t._v(" RocketMQ 特点")]),t._v(" "),v("ul",[v("li",[t._v("支持发布/订阅（Pub/Sub）和点对点（P2P）消息模型")]),t._v(" "),v("li",[t._v("在一个队列中可靠的先进先出（FIFO）和 "),v("strong",[t._v("严格的")]),t._v(" 顺序传递 （RocketMQ 可以保证严格的消息顺序，而 ActiveMQ 无法保证）")]),t._v(" "),v("li",[t._v("支持拉（pull）和推（push）两种消息模式")]),t._v(" "),v("li",[t._v("单一队列百万消息的堆积能力 （RocketMQ 提供亿级消息的堆积能力，这不是重点，重点是堆积了亿级的消息后，依然保持写入低延迟）")]),t._v(" "),v("li",[t._v("支持多种消息协议，如 JMS、MQTT 等")]),t._v(" "),v("li",[t._v("分布式高可用的部署架构，满足至少一次消息传递语义（RocketMQ 原生就是支持分布式的，而 ActiveMQ 原生存在单点性）")]),t._v(" "),v("li",[t._v("提供 docker 镜像用于隔离测试和云集群部署")]),t._v(" "),v("li",[t._v("提供配置、指标和监控等功能丰富的 Dashboard")])]),t._v(" "),v("h2",{attrs:{id:"rocketmq-优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-优势"}},[t._v("#")]),t._v(" RocketMQ 优势")]),t._v(" "),v("p",[t._v("目前主流的 MQ 主要是 RocketMQ、kafka、RabbitMQ，其主要优势有：")]),t._v(" "),v("ul",[v("li",[t._v("支持事务型消息（消息发送和 DB 操作保持两方的最终一致性，RabbitMQ 和 Kafka 不支持）")]),t._v(" "),v("li",[t._v("支持结合 RocketMQ 的多个系统之间数据最终一致性（多方事务，二方事务是前提）")]),t._v(" "),v("li",[t._v("支持 18 个级别的延迟消息（Kafka 不支持）")]),t._v(" "),v("li",[t._v("支持指定次数和时间间隔的失败消息重发（Kafka 不支持，RabbitMQ 需要手动确认）")]),t._v(" "),v("li",[t._v("支持 Consumer 端 Tag 过滤，减少不必要的网络传输（即过滤由 MQ 完成，而不是由消费者完成。RabbitMQ 和 Kafka 不支持）")]),t._v(" "),v("li",[t._v("支持重复消费（RabbitMQ 不支持，Kafka 支持）")])])])}),[],!1,null,null,null);a.default=_.exports}}]);