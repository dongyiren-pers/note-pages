(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{1115:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"服务发现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务发现"}},[t._v("#")]),t._v(" 服务发现")]),t._v(" "),n("h2",{attrs:{id:"深入思考微服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入思考微服务"}},[t._v("#")]),t._v(" 深入思考微服务")]),t._v(" "),n("p",[t._v("单体应用程序构建到一个可部署的 JAR 或 WAR 文件中。开发成单体应用是很正常，几十年来大多数应用程序都是这样构建的。即使将应用程序分解为多模块构建，最终也仍然会得到一个 JAR 或 WAR 文件，然后再将其推送到生产环境中。")]),t._v(" "),n("p",[t._v("这无疑是构建小型、简单应用程序的最适宜的方法。但有趣的是，小型应用程序往往会增长。当需要一个新的特性时，很容易在项目中添加更多的代码。在你意识到大事不妙之前，你的应用就已经变成复杂的单体的应用了。")]),t._v(" "),n("p",[n("strong",[t._v("单体应用程序看似简单，但存在以下这些问题：")])]),t._v(" "),n("ul",[n("li",[t._v("复杂度高—— 代码越多，就越难理顺每个组件在整个应用程序中的作用。")]),t._v(" "),n("li",[t._v("测试更困难 —— 随着应用程序的增长，测试变得更加困难，整体验收测试变得更加复杂。")]),t._v(" "),n("li",[t._v("更容易发生库冲突 —— 一个功能可能需要某个依赖，但这与另一个所需的依赖又无法兼容。")]),t._v(" "),n("li",[t._v("不易扩展—— 如果需要将应用程序部署到更多节点，以扩展性能，会发现效率很低。因为即使只是应用程序的一小部分需要扩展，也必须将整个应用程序全部部署。")]),t._v(" "),n("li",[t._v("技术选型会影响整体—— 当需要为应用做技术选型时，如：为应用程序选择语言、运行时平台、框架或库，是为整个应用程序在选择它。")]),t._v(" "),n("li",[t._v("部署上线工作更复杂 —— 虽然看起来当一个应用程序只有一个部署单元时，很容易就可以部署到生产环境。然而，由于单体应用的规模和复杂性很大，应用程序通常需要一个更严格的开发过程和更长的测试周期。以确保所部署代码的质量，以及不会因此引起其他问题。")])]),t._v(" "),n("p",[t._v("在过去的几年中，微服务架构已经兴起以应对这些挑战。简单来说，"),n("strong",[t._v("微服务架构")]),t._v(" 是将应用程序分解成小规模应用的办法，这些小应用独立开发和部署。这些小应用（微服务）相互协调，以提供更完整和强大的应用程序。与单体应用程序架构相比，"),n("strong",[t._v("微服务体系架构有以下特点：")])]),t._v(" "),n("ul",[n("li",[t._v("很容易理解 —— 在一个大的应用程序中，每个微服务与其他微服务之间的联系是有限的。因此，微服务的目标更加明确，作为一个完整单元更容易理解。")]),t._v(" "),n("li",[t._v("更容易测试 —— 越小的东西越容易测试。这一点是显而易见的，比如单元测试和集成测试、验收测试相比。当然这个原则也适用于测试微服务和测试单体应用的情况。")]),t._v(" "),n("li",[t._v("不太可能出现不兼容 —— 因为每个微服务都有自己的一组构建依赖项，这些依赖项不与其他服务共享。在微服务中，发生冲突的可能性较小。")]),t._v(" "),n("li",[t._v("更易扩展 —— 如果任何给定的微服务需要更多资源，微服务可以独立扩展。可以独立计算内存分配和实例数，而不影响其他微服务的内存或实例。")]),t._v(" "),n("li",[t._v("技术选型更方便 —— 对于每个完全不同的微服务，技术选择可以不同。可以就语言、平台、框架，以及每个微服务的依赖库进行选择。事实上，一个用 Java 编写的微服务，与另一个用 C# 编写的微服务进行通讯，是完全合理的。")]),t._v(" "),n("li",[t._v("可以更频繁的部署 —— 一个应用程序由许多微服务组成，每个微服务都可以独立部署，而不要求任何其他微服务必须部署。因为它们更小，更专注，更容易测试，所以将微服务投入生产环境中的步骤就更少。从有一个想法，到在生产中看到它，使用微服务架构可能在几分钟内或几个小时就可以做到。而不是像单体应用架构那样，一般要几个星期或几个月。")])]),t._v(" "),n("p",[t._v("微服务架构面临的另一个常见挑战是，一个服务如何了解与之协调工作的其他服务。这正是本文的主题。接下来让我们看看，如何使用 Spring Cloud 建立服务注册中心。")]),t._v(" "),n("h2",{attrs:{id:"配置服务注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置服务注册"}},[t._v("#")]),t._v(" 配置服务注册")]),t._v(" "),n("p",[t._v("Spring Cloud 是一个相当大的 “一揽子” 项目。它由几个独立的子项目组成，每一个都以某种方式支持微服务的开发。其中之一是 Spring Cloud Netflix 子项目，它提供了源自 Netflix 的几个组件。其中包括 Eureka，源自 Netflix 的服务注册中心。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("Eureka 背后的故事")])]),n("p",[t._v("Eureka 这个词表达的含义，是当一个人找到或发现某事时的一种喜悦的感叹。这个含义，使其成为服务注册中心的最合适的命名。微服务正是通过 Eureka 服务发现彼此。")]),t._v(" "),n("p",[n("strong",[t._v("Eureka 充当微服务应用程序中，所有服务的中心注册表")]),t._v("。Eureka 本身可以被认为是一个微型的服务，其目的是在更大的范围内帮助其他服务发现彼此。")]),t._v(" "),n("p",[t._v("当一个服务实例启动时，它将用自己名称向 Eureka 注册。在下图中，服务名称代表某个服务。某个服务可能有多个等效实例，他们都以相同的名字在 Eureka 中注册。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(930),alt:"image-20221215191213209"}})]),t._v(" "),n("p",[t._v("在某个时候，另一个服务（other-service）需要使用到某些服务（some-service）时，不是用硬编码的方式，调用以某个特定主机和端口代表的服务，而是在 Eureka 中通过名称查找服务。Eureka 回复它所知道的相关服务的所有实例信息。")]),t._v(" "),n("p",[t._v("现在 othere-service 需要做出决定。它将使用哪个服务实例？如果服务都是等价的，那没什么关系。但是为了避免每次都选择同一实例，最好应用一些客户端负载均衡算法以分散请求。这是另一个 Netflix 项目 Ribbon 专门解决的问题。")]),t._v(" "),n("p",[t._v("尽管 other-service 可能只负责查找和选择 some-service 的实例，但它也要依赖于 Ribbon。Ribbon 是客户端负载均衡器，用于对 some-service 进行选择。一旦 Ribbon 做出选择后，剩下的就是实际发送请求了。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("客户端负载均衡器")])]),n("p",[t._v("通常，负载均衡器被认为是一个单一的、集中式服务，处理所有请求并将请求分发到目标的多个实例中。相反，Ribbon 是一个客户端负载均衡器，请求都是本地的客户端发出的。")]),t._v(" "),n("p",[t._v("作为客户端负载均衡器，Ribbon 比集中式负载均衡器有几个优点。因为每个客户端都有一个本地负载均衡器，所以扩展时，负载均衡器与客户端数量成比例。此外，每个负载均衡器可以使用最适合自己的负载均衡算法，而不是对所有服务应用相同的配置。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("启用 Eureka 服务注册中心")])]),n("p",[t._v("要开始使用 Spring Cloud 和 Eureka，需要创建一个全新的 Eureka 服务项目。最简单的方法是使用 Spring Initializr，我们把这个项目命名为 service-registry。当需要选择 starter 依赖项时，只有一个工作：勾选名称为 Eureka Server 的复选框。创建新项目之后，Initializr 会为我们提供一个 pom.xml 文件，文件中包含以下依赖关系：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-server"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("在 pom.xml 中，还将看到一个名为 "),n("code",[t._v("spring-cloud.version")]),t._v(" 的属性，以及在 "),n("code",[t._v("<dependencyManagement>")]),t._v(" 部分指定的 Spring Cloud 的版本。")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ...\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Finchley.SR1"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n...\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-dependencies"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${spring-cloud.version}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("pom"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("import"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("现在，构建中有了 Eureka starter 依赖项。然后，在应用程序的主引导类上，添加 "),n("code",[t._v("@EnableEurekaServer")]),t._v(" 注解就可以启用 Eureka 服务：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableEurekaServer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceRegistryApplication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceRegistryApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样就可以了！现在启动应用程序，将会运行 Eureka 注册服务，并监听 8080 端口。使用浏览器访问 http://localhost:8080，我们将看到如下图所示的界面。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(931),alt:"image-20221215192339613"}})]),t._v(" "),n("p",[t._v("Eureka 仪表盘信息很丰富，可以告诉我们有哪些服务实例在 Eureka 上注册了。")]),t._v(" "),n("p",[t._v("Eureka 还提供了一个 REST API，通过 API 服务可以自行注册，并发现其他服务。你可能不会直接使用 REST API，但会发现 "),n("code",[t._v("/eureka/apps")]),t._v(" 接口很有用。它详细列出了所有注册的服务实例。此时，由于还没有注册过任何服务实例，所以会得到以下的返回信息。当实际注册过服务以后，我们将在本章稍后的部分，重新查看这个接口的返回。")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("applications")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("versions__delta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("versions__delta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("apps__hashcode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("apps__hashcode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("applications")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("你可能已经注意到，Eureka 每隔 30 秒左右在其日志中记录了几个异常。别担心！这些异常只是表示，我们尚未完全配置好服务注册中心。让我们加上一些配置属性使这些异常消失吧。")]),t._v(" "),n("h3",{attrs:{id:"配置-eureka"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置-eureka"}},[t._v("#")]),t._v(" 配置 Eureka")]),t._v(" "),n("p",[t._v("Eureka 不喜欢独立工作。Eureka 相信多副本更安全的概念，并希望成为 Eureka 服务集群的一部分。如果有不止一个 Eureka 服务，那么只要其中一个正常运行，就能消除单点故障。因此，Eureka 的默认行为就是试图与其他 Eureka 服务建立关联。它将尝试从其他 Eureka 服务获取注册信息，甚至在其他 Eureka 服务上注册自己。")]),t._v(" "),n("p",[t._v("在生产环境中，我们需要高可用性的 Eureka。但在开发环境，启动多个 Eureka 服务不方便，也没有必要。单个独立工作的 Eureka 服务足以满足开发环境的需求。但除非你正确配置了 Eureka 服务，否则它会不间断地尝试与其他 Eureka 服务建立联系。每隔30秒，会尝试与其他 Eureka 服务交换注册信息并相互注册，若出现问题则在日志文件中打印出异常。")]),t._v(" "),n("p",[t._v("需要做的是，让 Eureka 知道自己是独立部署的。要做到这一点，需要设置 "),n("code",[t._v("application.yml")]),t._v(" 中的一些属性，如下所示:")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("instance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostname")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fetch-registry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("register-with-eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("eureka.instance.hostname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("server.port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/eureka\n")])])]),n("p",[t._v("首先，设置 "),n("code",[t._v("eureka.instance.hostname")]),t._v(" 属性为 localhost。这告诉 Eureka，它在什么主机上运行。这是可选属性，如果你不设置，那么 Eureka 会尝试从环境变量中确定宿主主机地址。显式设置此属性能够让你更确定的知道它的实际值。")]),t._v(" "),n("p",[t._v("接下来的两个属性 "),n("code",[t._v("eureka.client.fetch-registry")]),t._v(" 和 "),n("code",[t._v("eureka.client.register-with-eureka")]),t._v("，是可以在其他微服务上设置的属性，这会告诉它们应该如何与 Eureka 互动。Eureka 也是一个微服务，所以这些属性也可以设置在 Eureka 服务上。这告诉 Eureka 应如何与其他 Eureka 服务进行交互。")]),t._v(" "),n("p",[t._v("这两个属性的默认值都为 true ，表示 Eureka 应该从其他 Eureka 实例获取注册信息，并将自己注册为其他 Eureka 服务的服务。现在，开发环境中，因为没有其他 Eureka 服务，我们将它们设置为 false，这样 Eureka 就不会试图访问其他 Eureka 服务了。")]),t._v(" "),n("p",[t._v("最后，设置了 "),n("code",[t._v("eureka.client.service-url")]),t._v(" 属性。此属性包含一组区域名称到 URL 的映射。每个区域可以设置多个 URL。"),n("code",[t._v("defaultZone")]),t._v(" 键是一个特殊的区域名称，如果客户机（在本例中是 Eureka 本身）没有指定所需的区域，那么就使用此区域的值。因为只有一个 Eureka 实例，映射到默认区域的 URL 是用于 Eureka 服务本身的。这里的 URL 使用了可以被其他属性填充的占位符变量。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("指定 EUREKA 的服务端口")])]),n("p",[t._v("尽管 Eureka 服务端口是选配的，但你可能希望覆盖默认设置。因为 Eureka 默认在端口 8080 上进行监听。如果你同时在本地计算机上运行几个应用程序（微服务），那这些应用程序就不能再监听 8080 端口了。因此，在开发环境中通常需要设置 Eureka 服务端口：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8761")]),t._v("\n")])])]),n("p",[t._v("这里将端口设置为 8761，这是我们在后续章节中开发的 Eureka 客户端的默认监听端口。")]),t._v(" "),n("h3",{attrs:{id:"扩展-eureka"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展-eureka"}},[t._v("#")]),t._v(" 扩展 Eureka")]),t._v(" "),n("p",[t._v("在生产环境中部署微服务时，需要考虑很多问题。虽然 Eureka 服务的高可用性和安全性，在开发环境不那么重要，但在生产环境中是至关重要的。")]),t._v(" "),n("p",[t._v("配置两个（或更多）Eureka 实例的最简单、最直接的方法，就是在 application.yml 中使用 profiles 配置。然后多次启动 Eureka 服务，每次使用一个不同的 profile。例如，下面清单中的配置显示了，如何配置两个相互充当对等点的 Eureka 服务器。")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("other.eureka.host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("other.eureka.port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/eureka\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8761")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("instance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostname")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka1.tacocloud.com\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("other")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka2.tacocloud.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8762")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8762")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("instance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostname")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka2.tacocloud.com\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("other")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka1.tacocloud.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8761")]),t._v("\n")])])]),n("p",[t._v("在默认 profile 之后，配置了两个 profile，一个命名为 "),n("code",[t._v("eureka-1")]),t._v("，另一个命名为 "),n("code",[t._v("eureka-2")]),t._v("。每个 profile 都为自己的配置指定自己的端口和实例名。在每个 profile 中设置了 "),n("code",[t._v("other.eureka.host")]),t._v(" 和 "),n("code",[t._v("other.eureka.port")]),t._v(" 两个属性，以引用另一个 Eureka 实例。这些属性是默认 profile 中的占位符所引用的属性，其他就没有什么特别之处了。")]),t._v(" "),n("p",[t._v("请注意，没有设置 "),n("code",[t._v("eureka.client.fetch-registry")]),t._v(" 或 "),n("code",[t._v("eureka.client.register-with-ereake")]),t._v("。默认值确保 Eureka 服务相互注册，并从另一个 Eureka 服务获取注册信息。")]),t._v(" "),n("h2",{attrs:{id:"注册并发现服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册并发现服务"}},[t._v("#")]),t._v(" 注册并发现服务")]),t._v(" "),n("p",[t._v("如果你的服务将被其他服务发现和使用，那么你需要使它们成为 Eureka 注册服务的客户端。要使应用程序（任何应用程序，假设是微服务）成为 Eureka 注册服务的客户端，必须做的是，将 Eureka 客户端依赖项添加到应用程序构建配置中：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-client"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("与 Eureka starter 服务依赖项一样，还需要在依赖管理中设置 Spring Cloud 版本属性：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n   ...\n   "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Finchley.SR1"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n...\n\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-dependencies"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${spring-cloud.version}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("pom"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("import"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("你可以手动将这些条目添加到应用程序的 "),n("code",[t._v("pom.xml")]),t._v(" 文件中，但更简单的方法是使用 Spring Initializr 的选择框，通过勾选 "),n("code",[t._v("Eureka Discovery")]),t._v(" 以添加这些依赖项。")]),t._v(" "),n("p",[t._v("Eureka starter 依赖项，会帮你添加使用 Eureka 发现服务所需的一切，包括 Eureka 的客户端库以及 Ribbon 负载均衡器。其他就什么也不用做了，这就使你的应用程序成为了 Eureka 服务的客户端。当应用程序启动时，它会尝试联系本地运行的 Eureka 服务并侦听端口 8761，并以 "),n("code",[t._v("UNKNOWN")]),t._v(" 名称注册自己。")]),t._v(" "),n("h3",{attrs:{id:"配置-eureka-客户端属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置-eureka-客户端属性"}},[t._v("#")]),t._v(" 配置 Eureka 客户端属性")]),t._v(" "),n("p",[t._v("虽然本地开发时，在微服务中使用 Eureka 服务的默认位置 localhost 很适合，但一旦要把服务部署在本地主机之外，就需要覆盖它的配置。更重要的是，那个默认服务名称 "),n("code",[t._v("UNKNOWN")]),t._v("，实在是一个可怕的选择。")]),t._v(" "),n("p",[t._v("更改微服务在 Eureka 中的注册名称，只需简单设置 "),n("code",[t._v("spring.application.name")]),t._v(" 属性。例如，如果你要注册的服务，可以处理所有涉及 Taco Ingredient 的操作，那么你可以把它注册为 "),n("code",[t._v("ingredient-service")]),t._v("。在应用程序中的配置中，它应该是这样的：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ingredient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n")])])]),n("p",[t._v("设置此属性后，就可以通过名称 "),n("code",[t._v("ingredient-service")]),t._v(" 来查找该服务了。此外，如果你要启动多个 "),n("code",[t._v("ingredient-service")]),t._v(" 的实例，它们都会出现在相同的名称下。这会有效地对服务进行水平扩展，以使消费服务可以选择多个等效的实例。在查看 Eureka 仪表盘时，服务将如下图所示。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(932),alt:"image-20221220210239923"}})]),t._v(" "),n("p",[t._v("使用 Spring Cloud 一段时间之后，你会发现 "),n("code",[t._v("spring.application.name")]),t._v(" 属性是你需要设置的最重要的属性之一。它指定了在 Eureka 中的注册名称。在下一章中，你将看到配置服务使用这个名称来识别不同应用程序，进而管理不同应用程序的特定配置。其他 Spring Cloud 项目，如 Spring Cloud Task（定时任务服务）和 Spring Cloud Sleuth（分布式链路跟踪）也依赖于 "),n("code",[t._v("spring.application.name")]),t._v(" 属性识别微服务。")]),t._v(" "),n("p",[t._v("正如你从第一章中了解到的那样， 在默认情况下，所有 Spring MVC 和 Spring WebFlux 应用程序都侦听端口 8080。因为你只会通过 Eureka 查找服务，所以这些应用程序在侦听哪个端口并不重要，因为 Eureka 知道他们在用哪个端口。因此，为了避免在本地运行时出现潜在的端口冲突，你可以将端口设置为 0：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("注意：将端口设置为 0 会导致在启动应用程序时，随机选择可用端口。")])]),t._v(" "),n("p",[t._v("现在，看看 Eureka 服务的位置配置。默认情况下，Eureka 客户端假定 Eureka 正在监听本地主机（端口 8761）。这在开发环境很适合，但在生产环境中不适用。因此，你需要指定 Eureka 服务的位置。这与你配置 Eureka 服务本身时一样，通过设置 "),n("code",[t._v("eureka.client.service-url")]),t._v(" 属性：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka1.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8761/eureka/\n")])])]),n("p",[t._v("这就配置了客户端要在 Eureka 服务上注册，并侦听主机 "),n("code",[t._v("eureka1.tacocloud.com")]),t._v("（端口8761）。只要这里指定的这个 Eureka 服务正常，这就能工作的很好。但如果这个 Eureka 服务因任何原因下线了，然后服务就无法注册了。为避免注册失败，最好使用两个或多个 Eureka 服务：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka1.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8761/eureka/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka2.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8762/eureka/\n")])])]),n("p",[t._v("当服务启动时，它会尝试向区域中的第一个 Eurreka 服务注册。如果由于一些原因注册失败了，那么它会尝试注册到列表中的下一个服务中。最终，当某个 Eureka 服务重新恢复时，它会从其他对等的点复制注册信息。")]),t._v(" "),n("p",[t._v("在 Eureka 注册一个服务只完成了一半的工作。一旦服务注册到 Eureka 后，其他服务就可以发现它们并开始使用它们。让我们看看如何使用在 Eureka 中注册的服务。")]),t._v(" "),n("h3",{attrs:{id:"消费服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消费服务"}},[t._v("#")]),t._v(" 消费服务")]),t._v(" "),n("p",[t._v("在消费者的代码中，硬编码任何服务实例的 URL 都将是错误的。这不仅将消费者与服务的特定实例相结合，而且如果服务的主机或端口要更改，还会导致消费服务中断。")]),t._v(" "),n("p",[t._v("另一方面，当涉及在 Eureka 中查找服务时，消费应用程序还有一些工作，因为 Eureka 可能回复提供相同服务的多个实例。如果消费者查询 "),n("code",[t._v("ingredient-service")]),t._v(" 服务，并收到六个服务实例，那该如何选择正确的服务实例呢？")]),t._v(" "),n("p",[t._v("好消息是，消费应用程序不需要做出选择，甚至不需要自己明确地查找服务。Spring Cloud 的 Eureka 客户端，以及 Ribbon 负载均衡器，使查找、选择和使用一个服务实例变得很简单。使用从 Eureka 查找到的服务有两种方法，包括：")]),t._v(" "),n("ul",[n("li",[t._v("一个负载均衡的 RestTemplate")]),t._v(" "),n("li",[t._v("Feign 接口生成的客户端")])]),t._v(" "),n("p",[t._v("你可以根据个人喜好来选择。下面将介绍这两种方式，先从负载均衡 RestTemplate开始。然后你自己决定喜欢哪一个。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("使用 RestTemplate 消费服务")])]),n("p",[t._v("重温一下 RestTemplate 是如何工作的。一旦创建或注入了 RestTemplate，你就可以发送 HTTP 调用，并将响应绑定到实体类上。例如，要执行 HTTP GET 请求，按 ID 检索 Ingredient，你可以使用以下 RestTemplate 代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIngredientById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8080/ingredients/{id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这段代码的唯一问题是，传递到 "),n("code",[t._v("getForObject()")]),t._v(" 的 URL 是硬编码到特定的主机和端口的。虽然可以将 URL 提取到一个配置属性中，但如果请求是对 Ingredient 服务的多个实例之一，我们配置的任何 URL 都将只针对特定实例，而不能在多个实例中进行负载均衡。")]),t._v(" "),n("p",[t._v("但是，一旦将应用程序设为 Eureka 客户端，你就可以声明这是一个带有负载均衡的 RestTemplate。你所需要做的，就是为方法添加 "),n("code",[t._v("@Bean")]),t._v(" 和 "),n("code",[t._v("@LoadBalanced")]),t._v(" 注解：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("@LoadBalanced")]),t._v(" 注解有两个目的：首先，它告诉 Spring Cloud，这个 RestTemplate 应该能够通过 Ribbon 查找服务。另外，它可以作为一个注入限定符。因为，如果你有两个或两个以上的 RestTemplate，这指定了要使用带有负载均衡的 RestTemplate。")]),t._v(" "),n("p",[t._v("例如，你希望使用负载均衡的 RestTemplate，像以前的代码那样查找 Ingredient。首先，将负载均衡 RestTemplate 注入到实体：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientServiceClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" rest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientServiceClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" rest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("然后稍微改写一下 "),n("code",[t._v("getIngredientById()")]),t._v(" 方法来获取 Ingredient，以便它使用服务的注册名称，而不是显式的指定主机和端口：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIngredientById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://ingredient-service/ingredients/{id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("注意到两者的区别了吗？为 "),n("code",[t._v("getForObject()")]),t._v(" 指定的 URL，没有使用任何特定的主机名或端口。使用服务名称 "),n("code",[t._v("ingredient-service")]),t._v(" 来代替主机名和端口。内部 RestTemplate 要求 Ribbon 查找服务并选择一个实例。Ribbon 很高兴提供帮助，重写 URL 以包含所选服务实例的主机和端口，然后让 RestTemplate 照常进行后续工作。")]),t._v(" "),n("p",[t._v("正如你所看到的，使用负载均衡的 RestTemplate 与使用标准的 RestTemplate 并没有什么不同。关键不同在于，客户端代码只需要使用服务名称，而不是显式的主机名和端口。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("使用 WebClient 消费服务")])]),n("p",[t._v("首先要做的是声明一个 WebClient，并添加 "),n("code",[t._v("@LoadBalanced")]),t._v(" 注解到 "),n("code",[t._v("WebClient.Builder")]),t._v(" 方法上：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Builder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("webClientBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("builder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("有了 "),n("code",[t._v("WebClient.Builder")]),t._v(" bean，现在就可以注入到任何需要使用它的地方了。例如，你可以将其注入到 IngredientServiceClient 的构造函数中：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientServiceClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Builder")]),t._v(" wcBuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientServiceClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Builder")]),t._v(" wcBuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wcBuilder "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wcBuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("最后，当你准备好使用它时，你可以使用 "),n("code",[t._v("WebClient.Builder")]),t._v(" 以构建一个 WebClient，然后使用各服务在 Eureka 中注册的服务名称发出实际请求：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIngredientById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wcBuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://ingredient-service/ingredients/{id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ingredientId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("retrieve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bodyToMono")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("与负载均衡的 RestTemplate 一样，在发出请求时无需明确指定主机或端口。服务名称将从给定的 URL 中提取，并用来从 Eureka 查找服务。然后，Ribbon 将选择一个服务实例，并且在发出请求之前，使用所选实例的主机和端口重写 URL。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("定义 Feign 接口客户端")])]),n("p",[t._v("Feign 是一个 REST 客户端库，它用一种独特的、接口驱动的方式来定义 REST 客户端。")]),t._v(" "),n("p",[t._v("Feign 最初是 Netflix 公司的一个项目，但后来作为了一个独立开源项目，名为 OpenFeign (https://github.com/OpenFeign)。"),n("code",[t._v("Feign")]),t._v(" 这个词的意思是 “假装”，你很快就会看到，使用这个词，对于假装的 REST 的客户端确实是非常合适。")]),t._v(" "),n("p",[t._v("使用 Feign 的第一步是将依赖项添加到项目中。在 pom.xml 中，以下 "),n("code",[t._v("<dependency>")]),t._v(" 做到了这一点：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-openfeign"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("使用 Spring Initializr 时，可以通过选中 "),n("code",[t._v("Feign")]),t._v(" 复选框，自动添加启动依赖项。不幸的是，基于这个依赖的自动配置无法自动启用 Feign。因此，需要将 "),n("code",[t._v("@EnableFeignClient")]),t._v(" 注解添加到其中一个配置类：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableFeignClients")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestClientConfiguration")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("现在，有趣的部分来了。假设你想写一个客户端，从 Eureka 注册表中获取 "),n("code",[t._v("ingredient-service")]),t._v(" 服务，并进而获取 Ingredient。你应该像下面这样使用：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("tacos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ingredientclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("feign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("openfeign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FeignClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PathVariable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("tacos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ingredientclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ingredient-service"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ingredients/{id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ingredient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIngredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这是一个简单的接口，没有实现。但在运行时，当 Feign 接管以后，这些都不重要。Feign 会自动创建一个实现，并将其公开为 Spring 应用程序上下文的一个 bean。")]),t._v(" "),n("p",[t._v("接口级的 "),n("code",[t._v("@FeignClient")]),t._v(" 注解，指明了在此接口中声明的任何方法，将对名称为 "),n("code",[t._v("ingredient-service")]),t._v(" 的服务发出请求。在内部，将通过 Ribbon 查找，就像使用 RestTemplate 时那样。")]),t._v(" "),n("p",[t._v("然后是 "),n("code",[t._v("getIngredient()")]),t._v(" 方法，你一定认出了来自于 Spring MVC 的 "),n("code",[t._v("@GetMapping")]),t._v(" 注解。事实上，确实是同样的注解！只是这次是用在客户端上，而不是在 Controller 上。也就是说，任何对 "),n("code",[t._v("getIngredient()")]),t._v(" 的调用，都将导致 Ribbon 选择相应主机和端口，并把 GET 请求转到 "),n("code",[t._v("/ingredients/{id}")]),t._v(" 上。"),n("code",[t._v("@PathVariable")]),t._v(" 注解同样来自 Spring MVC，会将参数映射到给定路径中的占位符中。")]),t._v(" "),n("p",[t._v("剩下的就是在需要时注入 Feign 实现的接口，并开始使用它。例如，要在 Controller 中使用它，你可以执行这样的操作：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Controller")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ingredients"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientController")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientClient")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientController")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IngredientClient")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/{id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ingredientDetailPage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                       "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Model")]),t._v(" model"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        model"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAttribute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ingredient"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIngredient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ingredientDetail"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("另外，Feign 有自己的一组注解。"),n("code",[t._v("@RequestLine")]),t._v(" 和 "),n("code",[t._v("@Param")]),t._v(" 大致类似于 Spring MVC 的 "),n("code",[t._v("@RequestMapping")]),t._v(" 和 "),n("code",[t._v("@PathVariable")]),t._v("，只是使用方式有点差异。不过，能够在客户端上使用已经熟悉的 Spring MVC 注解，这一点是相当好的。")])])}),[],!1,null,null,null);a.default=e.exports},930:function(t,a,s){t.exports=s.p+"assets/img/image-20221215191213209.55661826.png"},931:function(t,a,s){t.exports=s.p+"assets/img/image-20221215192339613.208e1d9f.png"},932:function(t,a,s){t.exports=s.p+"assets/img/image-20221220210239923.d993ee2d.png"}}]);