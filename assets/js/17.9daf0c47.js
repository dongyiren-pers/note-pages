(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1113:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"配置管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置管理"}},[t._v("#")]),t._v(" 配置管理")]),t._v(" "),n("p",[t._v("许多应用程序都有某种形式的配置。通常，你设置的属性对于应用程序可能是唯一的，并且很容易在 "),n("code",[t._v("application.properties")]),t._v(" 或 "),n("code",[t._v("application.yml")]),t._v(" 中指定。")]),t._v(" "),n("p",[t._v("然而，当应用程序采用微服务架构时，配置的属性通常在多个服务中是通用的。就像以前那样单调乏味的、重复手工填写表单很容易出错一样，重复配置多个相同服务可能会产生一些错误。")]),t._v(" "),n("p",[t._v("在本章中，我们将介绍 Spring Cloud Config Server，它是为给定应用中的所有服务，提供集中配置服务的。通过 Config Server，你可以在一个地方管理应用程序的所有配置，而不需要手工复制配置。")]),t._v(" "),n("p",[t._v("在开始之前，让我们简单地考虑一下，独立配置微服务的不足，以及集中式配置的优点。")]),t._v(" "),n("h2",{attrs:{id:"独立配置和集中式配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#独立配置和集中式配置"}},[t._v("#")]),t._v(" 独立配置和集中式配置")]),t._v(" "),n("p",[t._v("你可以在几个不同的属性配置来源中，通过设置具体属性字段来配置 Spring 应用程序。如果配置的属性需要更改，或在不同运行时环境有不同值，使用 Java 系统属性或操作系统的环境变量，是比较合适的。对于不太可能改变的属性，或特定于应用程序的值，将这些属性放置在 "),n("code",[t._v("application.properties")]),t._v(" 或 "),n("code",[t._v("application.yml")]),t._v(" 中，然后与应用程序一起打包部署，也是个不错的选择。")]),t._v(" "),n("p",[t._v("对于简单的应用程序，这些选择是可以的。但是当设置系统环境变量或 Java 系统属性时，你必须接受：要更改这些属性将需要重新启动应用程序。如果你选择将属性配置打包到 JAR 或 WAR 文件中，一旦这些属性需要更改，则必须重新打包部署应用程序。如果你需要回滚对配置的更改，也会受到上述约束。")]),t._v(" "),n("p",[t._v("这些限制在某些应用中是可以接受的。在其他情况下，仅仅为了更改一个简单的属性而重启应用程序，是不方便的，也是有缺陷的。此外，在微服务架构的应用程序中，属性管理分布在多个代码库和部署实例中，使得要在多个服务的每个实例中，重复进行相同的更改是不合理的。")]),t._v(" "),n("p",[t._v("某些属性还可能是敏感信息，例如：数据库密码和其他类型的机密值。尽管这些值在写入单个应用程序属性时可以加密，但应用程序在能够被调用前必须包含解密能力。即使这样，有些属性可能需要对应用程序开发人员保密，因此在环境变量中设置它们，或者使用与其他程序相同的版本控制系统来管理它们，都是非常不可取的。")]),t._v(" "),n("p",[t._v("相反，在集中式配置管理时，请考虑这些场景是如何运行的：")]),t._v(" "),n("ul",[n("li",[t._v("配置不再与应用程序代码一起打包和部署，使更改或回滚配置成为可能，而无需重建或重新部署应用程序。配置可以随时更改，而无需重新启动应用程序。")]),t._v(" "),n("li",[t._v("共享公共配置的微服务不需要管理自己的配置副本，可以共享相同的属性。如果需要更改属性，可以在单个位置修改，修改会适用于所有微服务。")]),t._v(" "),n("li",[t._v("敏感配置信息可以加密，并与应用程序代码解耦。未加密的值可以按需提供给应用程序，而不是要求应用程序携带解密代码。")])]),t._v(" "),n("p",[t._v("Spring Cloud Config Server 提供了一个集中式配置服务，让微服务可以依赖于它们。因为它是集中式、一站式配置，在所有服务中都能用，而且也能够提供特定于服务的单独配置。")]),t._v(" "),n("h2",{attrs:{id:"运行配置服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行配置服务器"}},[t._v("#")]),t._v(" 运行配置服务器")]),t._v(" "),n("p",[t._v("Spring Cloud Config Server 为配置数据提供了一个集中存储的地方。像 Eureka 那样，Config Server 可以被认为只是一个微服务，它在更大的应用程序中扮演的角色是，为其他服务提供配置数据服务。")]),t._v(" "),n("p",[t._v("Config Server 公开了一个 REST API，客户端（也就是其他微服务）可以通过 API 使用配置服务。Config Server 提供的配置信息存储在服务外部，通常位于版本控制系统中，如 Git。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(920),alt:"image-20221227161224624"}})]),t._v(" "),n("p",[t._v("通过将配置存储在代码版本控制系统（如 Git）中，配置可以进行版本控制、分支、标记、还原和追责，就像管理应用程序源代码一样。通过把配置与使用它的服务分离，配置就可以独立于应用程序进行修改和版本控制。")]),t._v(" "),n("p",[t._v("你可能还注意到上图中包含 HashiCorp Vault。保险库（Vault）非常有用，特别是在你希望提供的配置属性完全保密，直到需要时才放开的情况。")]),t._v(" "),n("h3",{attrs:{id:"启动配置服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动配置服务器"}},[t._v("#")]),t._v(" 启动配置服务器")]),t._v(" "),n("p",[t._v("作为一个更大的应用系统中的一个微服务，Config Server 被部署为一个独立的应用。因此，需要为 Config Server 新建一个工程。最简单的方法是，使用 Spring Initializr 或其他客户端（例如 Spring Tool Suite 中的 New Spring Starter Project 向导）。")]),t._v(" "),n("p",[t._v("将新项目命名为“config-server”。最重要的事情是，通过选中 Config Server 复选框来指定 Config Server 依赖关系。这将导致以下内容被添加到生成项目的 pom.xm 文件中：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-config-server"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("Config Server 的版本最终由 Spring Cloud 发布系列版本决定。这个值是必须在 pom.xml 文件中配置的。")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  ...\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Finchley.SR1"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("spring-cloud.version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n...\n\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-dependencies"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${spring-cloud.version}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("pom"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("import"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencyManagement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("尽管 Config Server 依赖项将 Spring Cloud 添加到了项目的类路径中，但这不会通过自动配置来启用它。你需要对配置类添加 "),n("code",[t._v("@EnableConfigServer")]),t._v(" 注解。顾名思义，此注解用来启用 Config Server。我通常只在主类上添加 "),n("code",[t._v("@EnableConfigServer")]),t._v("，如下所示：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableConfigServer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigServerApplication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigServerApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在启动应用程序之前，只需再做一件事：你必须告诉它，那些它要提供服务的配置属性在哪里可以找到。首先，要使用 Git 存储库提供的配置，需要在 "),n("code",[t._v("spring.cloud.config.server.git.uri")]),t._v(" 属性中，设置配置存储库的 URL ：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//github.com/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n")])])]),n("p",[t._v("你将在下一节中看到如何用属性填充 Git 存储库。")]),t._v(" "),n("p",[t._v("不过，你可能还需要为本地开发环境设置另一个属性。在本地测试你的服务时，最终将在本地主机的不同端口上运行多个服务。作为一个典型的 Spring Boot 应用程序，在默认情况下，Config Server 将侦听端口 8080。为了避免端口冲突，你可以设置 "),n("code",[t._v("server.port")]),t._v(" 属性:")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\n")])])]),n("p",[t._v("这里把服务端口设为 8888，因为这是配置客户端尝试检索配置的默认端口。你可以将其设置为任何其他值，但你需要确保，配置客户端使用相同的端口来获取配置。")]),t._v(" "),n("p",[t._v("重要的是要认识到，到目前为止你在本节中编写的配置，是 Config Server 本身的配置。这些配置属性不是 Config Server 提供给其他服务的。Config Server 将提供的是它从 Git 或 Vault 拉取的配置。")]),t._v(" "),n("p",[t._v("此时，如果启动应用程序，Config Server 会侦听 8888 端口的请求，但它不会提供任何配置属性。虽然你还没有任何配置服务客户端，但可以使用 curl 命令行（或你选择的等效 HTTP 工具）发送请求：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/application/default\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"profiles"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"label"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ca791b15df07ce41d30c24937eece4ec4b208f4d"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propertySources"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这里是使用 HTTP GET 请求，对 Config Server 上的 "),n("code",[t._v("/application/default")]),t._v(" 路径发送请求。此路径由两个或三个部分组成，如图所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(921),alt:"image-20221227165908445"}})]),t._v(" "),n("p",[t._v("路径的第一部分 "),n("code",[t._v("application")]),t._v(" 表示，发送请求的应用程序的名称。")]),t._v(" "),n("p",[t._v("路径的第二部分表示，发送请求的应用程序当前正在使用的 "),n("code",[t._v("profile")]),t._v(" 名称。")]),t._v(" "),n("p",[t._v("路径的第三部分（可选）表示，从后端 Git 存储库获取配置的标签或分支名称。如果未指定，则默认为 "),n("code",[t._v("master")]),t._v(" 分支。")]),t._v(" "),n("p",[t._v("这个请求的响应值会给我们一些关于 Conffig Server 服务的基本信息，包括它后面配置的 Git 提交的版本和标签。当然，现在明显缺少任何实际的配置属性。正常情况下，你可以在 "),n("code",[t._v("propertySources")]),t._v(" 属性中看到它们，但是现在这个属性是空的。这是因为还没有用实际属性填充 Git 存储库。")]),t._v(" "),n("h3",{attrs:{id:"填写配置库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#填写配置库"}},[t._v("#")]),t._v(" 填写配置库")]),t._v(" "),n("p",[t._v("Config Server 提供服务的属性资源，有几种方法可以进行设置。最基本、简单的选择是，提交 "),n("code",[t._v("application.properties")]),t._v(" 或 "),n("code",[t._v("application.yml")]),t._v("到 Git 存储库的根路径。")]),t._v(" "),n("p",[t._v("假设推送了一个名为 "),n("code",[t._v("application.yml")]),t._v(" 的文件到 Git 存储库中。这个配置文件与上一节中的配置不同，它是将由 Config Server 来提供配置服务的。假设在 "),n("code",[t._v("application.yml")]),t._v(" 中配置了以下属性：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8761/eureka/\n")])])]),n("p",[t._v("虽然 "),n("code",[t._v("application.yml")]),t._v(" 中的属性不多，但它所做的配置是相当重要的。"),n("code",[t._v("application.yml")]),t._v(" 告诉应用程序中的每个服务两个重要信息：一个是 Eureka 的注册地址，另一个是随机选择可用端口。这意味着，当调整服务以适配使用 Config Server 时，你可以在服务中删除 Eureka 的配置了。")]),t._v(" "),n("p",[t._v("作为 Config Server 的客户机，可以在命令行中使用 curl 查看 Config Server 提供的新配置数据：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/someapp/someconfig\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"someapp"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"profiles"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"someconfig"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"label"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"95df0cbc3bca106199bd804b27a1de7c3ef5c35e"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propertySources"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:10080/habuma/tacocloudconfig/application.yml"')]),t._v(",\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server.port"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eureka.client.service-url.defaultZone"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://eureka1:8761/eureka/"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("属性 "),n("code",[t._v("propertySources")]),t._v(" 数组中，"),n("code",[t._v("name")]),t._v(" 属性指明引用的 Git 存储库，"),n("code",[t._v("source")]),t._v(" 属性包含推入 Git 存储库的那些具体属性。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("在 Git 子路径存储配置")])]),n("p",[t._v("依据你的实际情况，你可以选择将配置存储在 Git 存储库子路径而不是根路径中。例如，假设你要将配置存储在名为 “config” 的子目录中，你需对 "),n("code",[t._v("spring.cloud.config.server.git.search-paths")]),t._v(" 属性进行设置，以告诉 Config Server 从 "),n("code",[t._v("/config")]),t._v(" 而不是从根目录获取配置：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search-paths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config\n")])])]),n("p",[t._v("请注意 "),n("code",[t._v("spring.cloud.config.server.git.search-paths")]),t._v(" 可设置多个值。你可以设置用逗号分隔的多个路径，以便让 Config Server 从多个路径中获取属性配置：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search-paths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("moreConfig\n")])])]),n("p",[t._v("这将设置 Config Server 从 "),n("code",[t._v("/config")]),t._v(" 和 "),n("code",[t._v("/moreConfig")]),t._v(" 中获取配置。")]),t._v(" "),n("p",[t._v("指定搜索路径时，可以使用通配符：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search-paths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("more*\n")])])]),n("p",[t._v("在这里，Config Server 将从 "),n("code",[t._v("/config")]),t._v(" 以及任何名称以 "),n("code",[t._v("more")]),t._v(" 开头的子目录中获取配置。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("从分支或标签获取配置")])]),n("p",[t._v("默认情况下，Config Server 从 Git 的 "),n("code",[t._v("master")]),t._v(" 分支获取配置。从客户机上发送请求时，可以指定特定分支或标签。但你可能会发现，修改 Config Server 的默认行为，改为从某个特定 Git 标签或分支获取配置，可能会很有用。这可以在 "),n("code",[t._v("spring.cloud.config.server.git.default-label")]),t._v(" 属性中指定具体分支或标签，以覆盖默认值。")]),t._v(" "),n("p",[t._v("例如，以下设置将 Config Server 设为从“sidework” 的分支（或标签）中获取配置：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default-label")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sidework\n")])])]),n("p",[t._v("配置将从“sidework” 分支获取，除非客户端在请求中指定了其他分支。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("Git 存储库的授权校验")])]),n("p",[t._v("Config Server 使用的 Git 存储库，很可能需要使用用户名和密码进行权限验证。那样的话，你就需要为 Config Server 指定 Git 存储库的身份凭据信息。")]),t._v(" "),n("p",[t._v("属性 "),n("code",[t._v("spring.cloud.config.server.git.username")]),t._v(" 以及 "),n("code",[t._v("spring.cloud.config.server.git.password")]),t._v(" 可以设置 Git 存储库的用户名和密码。如下配置展示了如何设置这些属性：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tacocloud\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" s3cr3tP455w0rd\n")])])]),n("h2",{attrs:{id:"消费共享的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消费共享的配置"}},[t._v("#")]),t._v(" 消费共享的配置")]),t._v(" "),n("p",[t._v("Spring Cloud Config server 还提供了一个客户端库。只要 Spring Boot 应用程序中包含这个库，就可以作为 Config Server 的客户端。将一个 Spring Boot 应用程序转换为 Config Server 客户端的最简单方法是，将以下依赖项添加到项目的 Maven 依赖中：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-config"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("使用 Spring Initializr 中也可添加此依赖项，只需勾选 "),n("code",[t._v("Config Client")]),t._v(" 复选框。应用程序运行时自动配置将启动，会自动指定属性来源，以便从 Config Server 中获取属性。默认情况下，会假设 Config Server 正在本地主机上运行，并侦听端口 8888。 如果不是这样，可以通过设置 "),n("code",[t._v("spring.cloud.config.uri")]),t._v(" 属性，来配置 Config Server 的位置：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//config.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\n")])])]),n("p",[t._v("需要澄清一点，这个属性必须设置在，要成为 Config Server 客户端的应用程序的本地。比如在 "),n("code",[t._v("application.yml")]),t._v(" 或者 "),n("code",[t._v("application.properties")]),t._v(" 文件中，并与微服务一起打包和部署。")]),t._v(" "),n("p",[t._v("现在你有了一个集中式的 Config Server，几乎所有的配置都将从那里得到。每个微服务不需要携带太多自己的配置。通常，你只需设置 "),n("code",[t._v("spring.cloud.config.uri")]),t._v(" 来指定 Config Server 的位置，以及 "),n("code",[t._v("spring.application.name")]),t._v(" 让 Config Server 进行应用识别。")]),t._v(" "),n("p",[t._v("当应用程序启动时，Config Server 客户端指定属性源，并向 Config Server 发出请求。不管它收到什么属性，都会设置到应用程序环境变量中。更重要的是，这些属性将被缓存；即使 Config Server 关闭了，它们也可用。")]),t._v(" "),n("h2",{attrs:{id:"消费特定的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消费特定的配置"}},[t._v("#")]),t._v(" 消费特定的配置")]),t._v(" "),n("p",[t._v("到目前为止，你让 Config Server 提供的配置还相当简单，这些配置指定给所有微服务。但有时你需要对某个应用程序启用特定配置，或者只有在应用程序使用特定的 profile 时才有效。让我们再来看看 Config Server 更多的使用方式，看看如何提供特定于应用程序或 profile 的配置。")]),t._v(" "),n("h3",{attrs:{id:"特定于应用程序的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特定于应用程序的属性"}},[t._v("#")]),t._v(" 特定于应用程序的属性")]),t._v(" "),n("p",[t._v("正如我们所讨论的，使用 Config Server 的好处之一，是能够跨应用程序，为所有微服务提供共享的公共配置。尽管如此，通常也存在一些服务所特有的属性，是不需要（或不应该）在所有服务中共享的。")]),t._v(" "),n("p",[t._v("除了共享配置之外，Config Server 还能够管理针对特定应用程序的配置。诀窍是将配置文件的名称，与应用程序的 "),n("code",[t._v("spring.application.name")]),t._v(" 属性，配置成一样的值。")]),t._v(" "),n("p",[t._v("在上一章中，你使用 "),n("code",[t._v("spring.application.name")]),t._v(" 属性配置了微服务名称，用于在 Eureka 中注册。同样，这个属性在客户端访问 Config Server 时，也用于标识自己，以便 Config Server 可以提供特定于该应用程序的配置。")]),t._v(" "),n("p",[t._v("例如，在 Taco Cloud 应用程序中，你将应用程序拆分成一些微服务，比如 ingredient-service、order-service、taco-service 和 user-service，你应该在每个服务中通过设置 "),n("code",[t._v("spring.application.name")]),t._v(" 属性，指定这些服务的名称。然后就可以在 Config Server 的后端 Git 存储库上分别创建 YAML 配置文件。如：ingredient-service.yml、order-service.yml、taco-service.yml 和 user-service.yml。下图展示了 Gogs web 应用程序的配置库。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(922),alt:"image-20221228150837845"}})]),t._v(" "),n("p",[t._v("无论应用程序的名称是什么，所有应用程序都将接收来自 application.yml 文件的配置。但每个应用程序的 "),n("code",[t._v("spring.application.name")]),t._v(" 属性设置的名称，将在请求 Config Server 时发送出去（作为请求路径的一部分）。如果有匹配的配置文件，那这些配置也将被返回。如果同样的属性在 "),n("code",[t._v("application.yml")]),t._v(" 中，以及特定于应用程序的配置文件中，被重复定义了，那么特定于应用程序的配置中的属性将优先。")]),t._v(" "),n("h3",{attrs:{id:"特定于-profile-的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特定于-profile-的属性"}},[t._v("#")]),t._v(" 特定于 profile 的属性")]),t._v(" "),n("p",[t._v("我们已经知道如何利用 Spring Profile，使某些属性仅在给定 profile 激活时才能够使用。Spring Cloud Config Server 支持特定于 profile 的属性配置。这与在单个 Spring Boot 应用程序中的使用方式完全相同。这包括：")]),t._v(" "),n("ul",[n("li",[t._v("提供特定于 profile 的 "),n("code",[t._v(".properties")]),t._v(" 或 YAML 文件，比如 application-production.yml。")]),t._v(" "),n("li",[t._v("在单个 YAML 文件中包含多个 profile 配置组，使用 3 个中划线 "),n("code",[t._v("---")]),t._v(" 和 "),n("code",[t._v("spring.profiles")]),t._v(" 进行分隔。")])]),t._v(" "),n("p",[t._v("例如，假设你现在通过 Config Server 为应用程序的所有微服务共享 Eureka 的配置。按目前的情况，它只指定了一个 Eureka 实例，这非常适合开发环境。但是，如果你的服务要在生产环境中运行，你可能希望对其进行配置，以便指定多个 Eureka 节点。")]),t._v(" "),n("p",[t._v("更重要的是，在开发环境中你把 "),n("code",[t._v("server.port")]),t._v(" 属性设定为 0。一旦服务投入生产，它们就会在各自的容器中运行，并将容器内的端口 8080 映射到外部端口上，因此会要求所有应用程序都在端口 8080 上侦听。")]),t._v(" "),n("p",[t._v("使用 profile ，可以声明多个配置。除了把默认的 "),n("code",[t._v("application.yml")]),t._v(" 文件推入 Config Server 的 Git 后端，你可以推送另一个名为 "),n("code",[t._v("application-production.yml")]),t._v(" 的 YAML 文件，看起来是这样的：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8761/eureka/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//eureka2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8761/eureka/\n")])])]),n("p",[t._v("当应用程序从 Config Server 获取配置时，它将标识出当前激活的 profile（在请求路径的第二部分）。如果当前激活的 profile 是 "),n("code",[t._v("production")]),t._v("，两套属性 "),n("code",[t._v("application.yml")]),t._v(" 和 "),n("code",[t._v("application-production.yml")]),t._v(" 将一起返回。"),n("code",[t._v("application-production.yml")]),t._v(" 中的属性优先于 "),n("code",[t._v("application.yml")]),t._v(" 中的属性。下图显示了后端 Git 存储库可能的情况。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(923),alt:"image-20221228154702274"}})]),t._v(" "),n("p",[t._v("还可以指定同时特定于应用程序和 profile 的配置文件，和前面使用相同的命名约定。"),n("strong",[t._v("配置文件分为三部分：应用名、中划线、profile 名称。")])]),t._v(" "),n("p",[t._v("例如，假设你需要为名为 "),n("code",[t._v("ingredient-service")]),t._v(" 的应用程序设置属性，并且仅当激活的 profile 为 "),n("code",[t._v("production")]),t._v(" 时才适用。这种情况下，你的配置文件名应该为 "),n("code",[t._v("ingredient-service-production.yml")]),t._v("。里边可以包含特定于应用程序和特定于 profile 的属性，如图所示。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(924),alt:"image-20221228160840030"}})]),t._v(" "),n("h2",{attrs:{id:"为配置的属性加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为配置的属性加密"}},[t._v("#")]),t._v(" 为配置的属性加密")]),t._v(" "),n("p",[t._v("Config Server 提供的配置大多数是不需要加密的。但一些敏感信息（如密码）最好在后端存储库中以加密的形式存储。")]),t._v(" "),n("p",[t._v("Config Server 提供两种方式处理加密配置：")]),t._v(" "),n("ul",[n("li",[t._v("在 Git 存储的配置文件中，写入加密值")]),t._v(" "),n("li",[t._v("使用 HashiCorp 的保险库作为 Config Server 的后端存储，以代替 Git。")])]),t._v(" "),n("p",[t._v("让我们看看 Config Server 为保持配置属性的机密性，是如何使用这两种方式的。我们先看一下将加密属性写入 Git 后端存储库。")]),t._v(" "),n("h3",{attrs:{id:"在-git-中加密属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-git-中加密属性"}},[t._v("#")]),t._v(" 在 Git 中加密属性")]),t._v(" "),n("p",[t._v("除了使用未加密的值外，Config Server 还支持在 Git 存储的配置文件中使用加密值。在 Git 存储中使用加密值的关键，实际上是一个密钥，一个用于加密的密钥。")]),t._v(" "),n("p",[t._v("要启用对属性加密，需要使用加密密钥。在将值传到客户端之前，使用密钥对加密值进行解密。Config Server 支持对称加密和非对称加密。设置对称加密的密钥，可在 Config Server 自身的配置中设置 "),n("code",[t._v("encrypt.key")]),t._v(" 属性值。这个值可以用作加密和解密：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("encrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" s3cr3t\n")])])]),n("p",[t._v("在启动配置（例如 "),n("code",[t._v("bootstrap.properties")]),t._v(" 或 "),n("code",[t._v("bootstrap.yml")]),t._v(" 中）中设置此属性非常重要。这样使 Config Server 对外提供服务之前，可以通过自动配置加载此属性。")]),t._v(" "),n("p",[t._v("为了提高安全性，你可以选择使用非对称加密密钥，如 RSA 密钥对或对 keystore 的引用。要创建这样的密钥对，可以使用 keytool 命令行工具：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ keytool -genkeypair -alias tacokey -keyalg RSA "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-dname "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN=Web Server,OU=Unit,O=Organization,L=City,S=State,C=US"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-keypass s3cr3t -keystore keystore.jks -storepass l3tm31n\n")])])]),n("p",[t._v("生成的 keystore 将写入名为 "),n("code",[t._v("keystore.jks")]),t._v(" 的文件中，可以选择把 keystore 文件保存在文件系统上，或将其放置在应用程序本身中。无论哪种情况，你都需要在 Config Server 的 "),n("code",[t._v("bootstrap.yml")]),t._v(" 文件中，指定 keystore 文件的位置以及授权信息。")]),t._v(" "),n("p",[t._v("假设你选择将 keystore 打包到应用程序中，并放在类路径的根目录。然后就可以通过配置 Config Server 的以下属性使用 keystore：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("encrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key-store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alias")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tacokey\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("location")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" classpath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/keystore.jks\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l3tm31n\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("secret")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" s3cr3t\n")])])]),n("p",[t._v("有了密钥或 keystore，你现在需要一些加密的数据。Config Server 提供了 "),n("code",[t._v("/encrypt")]),t._v(" 加密接口。所要做的就是通过 POST 请求，把一些要加密的数据发送到 "),n("code",[t._v("/encrypt")]),t._v(" 接口。例如，假设你要加密 MongoDB 数据库的密码。使用 curl 可以这样加密这个密码：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/encrypt -d "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s3cr3tP455w0rd"')]),t._v("\n93912a660a7f3c04e811b5df9a3cf6e1f63850cdcd4aa092cf5a3f7e1662fab7\n")])])]),n("p",[t._v("提交 POST 请求后，你将收到一个加密值作为响应。剩下的就是复制该值，并将其粘贴到在 Git 存储库中保存的配置文件中。")]),t._v(" "),n("p",[t._v("要设置 MongoDB 密码，请在 "),n("code",[t._v("application.yml")]),t._v(" 中添加 "),n("code",[t._v("spring.data.mongodb.password")]),t._v(" 属性：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mongodb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{cipher}93912a660a7f3c04e811b5df9a3cf6e1f63850...'")]),t._v("\n")])])]),n("p",[t._v("请注意，给 "),n("code",[t._v("spring.data.mongodb.password")]),t._v(" 设置的值是用单引号（"),n("code",[t._v("'")]),t._v("）引起来的，前缀为 "),n("code",[t._v("{cipher}")]),t._v("。这会让 Config Server 识别到，这是一个加密值，而不是普通的未加密值。")]),t._v(" "),n("p",[t._v("对 "),n("code",[t._v("application.yml")]),t._v(" 的修改提交并推送到到 Git 存储库后，Config Server 准备好了提供加密属性服务。要查看它的运行情况，可使用 curl 模拟客户端调用：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/application/default "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"profiles"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prof"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"label"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"464adfd43485182e4e0af08c2aaaa64d2f78c4cf"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null,\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propertySources"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:10080/tacocloud/tacocloudconfig/application.yml"')]),t._v(",\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.data.mongodb.password"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s3cr3tP455w0rd"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如你所见，属性 "),n("code",[t._v("spring.data.mongodb.password")]),t._v(" 的值是解密的形式。默认情况下，Config Server 提供的任何加密值，在后端 Git 存储库中都是加密的；它们在被使用之前会被解密。这意味着使用 Config Server 的客户端应用程序，不需要任何特殊的代码或配置来接收在 Git 中加密的属性。")]),t._v(" "),n("p",[t._v("如果你希望 Config Server 提供仍然加密的属性，你可以设置 "),n("code",[t._v("spring.cloud.config.server.encrypt.enabled")]),t._v(" 属性为 false:")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("encrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n")])])]),n("p",[t._v("这将导致 Config Server 提供的所有属性值，包括加密属性值，与 Git 存储库中设置的值完全相同。再次使用 curl 命令模拟客户端调用，以显示禁用解密后的效果：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[t._v("$ curl localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8888/application/default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" jq\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v('"propertySources"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:10080/tacocloud/tacocloudconfig/application.yml"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v('"source"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v('"spring.data.mongodb.password"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{cipher}AQA4JeVhf2cRXW..."')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("当然，如果客户端接收到加密后的属性值，那么客户端现在就负责自行解密了。")]),t._v(" "),n("p",[t._v("尽管可以将加密的属性存储在 Git 中，再由 Config Server 提供服务。但我们已经看到加密并不是 Git 原生的能力，这需要你做一些工作，以便使用任何写入 Git 存储库的数据。而且，除非你的应用程序自行解密，否则使用 Config Server API 能够让任何人获取解密后的信息。让我们看看另一种配置 Config Server 的选择，它只为那些有权看到他们的使用方提供服务。")]),t._v(" "),n("h3",{attrs:{id:"在-vault-中存储密码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-vault-中存储密码"}},[t._v("#")]),t._v(" 在 Vault 中存储密码")]),t._v(" "),n("p",[n("code",[t._v("HashiCorp Vault")]),t._v(" 是一个机密管理工具。与 Git 相比，Vault 的核心功能是以本机方式来处理机密信息的。所以对于配置机密信息来说，使用 Vault 作为 Config Server 的后端存储，是一种更好的选择。")]),t._v(" "),n("p",[t._v("要开始使用 Vault，请参照 Vault 网站上的安装说明 "),n("a",{attrs:{href:"https://www.vaultproject.io/intro/getting-started/install.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://learn.hashicorp.com/tutorials/vault/getting-started-install"),n("OutboundLink")],1),t._v("， 下载并安装 Vault 命令行工具。在本节中，将同时使用 vault 命令用于管理机密配置，以及启动 Vault 服务器。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ vault server -dev -dev-root-token-id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("roottoken\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("VAULT_ADDR")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://127.0.0.1:8200'")]),t._v("\n$ vault status\n")])])]),n("p",[t._v("第一个命令使用根令牌 （ID 是 roottoken）在开发模式下启动 Vault 服务器。开发模式，顾名思义，是一种简单但并不完全安全的模式。它不应该在生产环境中使用，但是在开发时使用非常有用，也更方便。")]),t._v(" "),n("blockquote",[n("p",[t._v("注意，Vault 服务器是一个功能强大，且非常健壮的机密管理服务器。本章没有足够的空间来详细讨论所有功能，只涉及在开发模式下简单使用 Vault 服务器。在将 Vault 投入生产环境之前，我强烈建议你通过阅读 Vault 文档，以了解 Vault 的详细信息 "),n("a",{attrs:{href:"https://www.vaultproject.io/docs/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.vaultproject.io/docs"),n("OutboundLink")],1),t._v("。")])]),t._v(" "),n("p",[t._v("对 Vault 服务器的所有访问都需要向服务器提供令牌。根令牌是一种管理令牌，它允许你创建更多令牌。它也可以用来读写机密信息。在开发模式下启动服务器时，如果没有指定根令牌，将自动生成一个并在启动时写入日志文件中。为了方便使用，建议把根令牌设置为一个易于记忆的值，如 roottoken。")]),t._v(" "),n("p",[t._v("Vault 服务器以开发模式启动以后，它将侦听本地端口 8200。也可以设置 "),n("code",[t._v("VAULT_ADDR")]),t._v(" 环境变量，如前面的代码段中第二个命令所展示的那样，以修改配置。")]),t._v(" "),n("p",[t._v("最后，"),n("code",[t._v("vault status")]),t._v(" 命令验证前两个命令是否按预期工作了。你应该收到一个列表，其中包含大约六个属性，描述 Vault 服务器的配置，以及 Vault 是否被封存。（Valulte 不应在开发模式下被封存。）")]),t._v(" "),n("p",[t._v("如果使用 Vault 0.10.0 或更高版本，你需要执行一些其他操作，以便适配 Vault 与 Config Server 一起工作。因为高版本的 Vault 工作方式有一些更改，会导致与 Config Server 标准机密后端存储不兼容。以下两个命令重新创建名称为 "),n("code",[t._v("secrets")]),t._v(" 的后端存储，这样就和 Config Server 兼容了：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ vault secrets disable secret\n$ vault secrets "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" -path"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("secret kv\n")])])]),n("p",[t._v("如果使用旧版本的 Vault，则以上这些步骤不需要执行。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("保存机密信息到 Vault 中")])]),n("p",[t._v("使用 Vault 命令可以轻松地将机密写入 Vault。例如，假设你想将 MongoDB 的密码使用属性 "),n("code",[t._v("spring.data.MongoDB.password")]),t._v("，保存到 Vault 而不是 Git 中。使用 vault 命令，可以像下面这样操作：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(925),alt:"image-20221228173657721"}})]),t._v(" "),n("p",[t._v("目前重要的是要注意这三个部分的信息：机密信息的路径、键和值。路径非常类似于文件系统路径，允许你对相关的秘密使用相同路径进行分组。路径的前缀 "),n("code",[t._v("secret/")]),t._v(" 标识 Vault 后端（在本例中是名为“secret”的后端）")]),t._v(" "),n("p",[t._v("机密信息的键和值，是你正在向 Vault 写入的实际机密信息。当设置由 Config Server 提供服务的机密信息时，重要的是要使机密信息的键与配置属性的键完全一样。")]),t._v(" "),n("p",[t._v("你可以使用读取命令，验证写入的机密：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ vault "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" secret/application\nKey                             Value\n---                             -----\nrefresh_interval                768h\nspring.data.mongodb.password    s3cr3t\n")])])]),n("p",[t._v("在向给定路径写入机密时，请注意，对给定路径的每次写入都将覆盖以前写入该路径的所有机密。例如，假设你又希望将 MongoDB 用户名写入到与前面的例子相同的 Vault 路径中。你不能简单地写入 "),n("code",[t._v("spring.data.mongodb.username")]),t._v("，这样做会导致原来的 "),n("code",[t._v("spring.data.mongodb.password")]),t._v(" 信息丢失。你必须将它们同时写入：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("% vault "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" secret/application "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        spring.data.mongodb.password"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s3cr3t "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        spring.data.mongodb.username"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tacocloud\n")])])]),n("p",[t._v("现在你已经在 Vault 中存储了一些机密信息，让我们看看如何将 Vault 配置为 Config Server 的后端存储。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("在 Config Server 中配置 Vault 后端存储")])]),n("p",[t._v("要将 Vault 添加为 Config Server 的后端存储，你需要做的是添加 vault 到当前激活的 profile 中。在 Config Server 的 "),n("code",[t._v("application.yml")]),t._v(" 文件中，可以这样做：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" vault\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git\n")])])]),n("p",[t._v("如上所示，vault 和 git 都处于活动状态，这允许 Config Server 可以从 Vault 和 Git 获取属性配置。通常，你只需要将机密信息写入 Valult，对不需要保密的信息可以继续使用 Git。但如果你希望将所有配置写入 Vault，而不再使用 Git，你可以在 "),n("code",[t._v("spring.profiles.active")]),t._v(" 中去除 Git，只设置为 vault。")]),t._v(" "),n("p",[t._v("默认情况下，Config Server 将假定 Vault 在本地主机上运行，并侦听 8200 端口。你可以在 Config Server 的配置中做更改：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10080/tacocloud/tacocloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vault")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vault.tacocloud.com\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8200")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scheme")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),n("p",[n("code",[t._v("spring.cloud.config.server.vault.*")]),t._v(" 属性允许你覆盖 Config Server 使用 Vault 的默认值。在这里告诉 Config Server, Vault 的 API 地址为 "),n("a",{attrs:{href:"https://vault.tacocloud.com/:8200%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://vault.tacocloud.com:8200。"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("注意，上述配置中仍然保存了 Git，这假设 Vault 和 Git 分担了提供配置的责任。order 属性指定了 Vault 提供的机密信息将优先于Git 提供的属性。Config Server 配置为使用 Vault 后端后，你可以通过 curl 命令模拟客户端调用：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("habuma:habuma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("% "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/application/default "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timestamp"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2018-04-29T23:33:22.275+0000"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"status"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bad Request"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Missing required header: X-Config-Token"')]),t._v(",\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/application/default"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("不好！看起来像是出了什么问题！事实上，此错误表明 Config Server 正在从 Vault 中提供机密信息，但请求未包含 Vault 令牌。")]),t._v(" "),n("p",[t._v("所有 Vault 请求都应包含 "),n("code",[t._v("X-Vault-Token")]),t._v(" 请求头。这不是在 Config Server 中配置该令牌，而是 Config Server 的客户端，在向 Config Server 发送请求时，要在请求头中包含 "),n("code",[t._v("X-Config-token")]),t._v("。然后 Config Server 会使用这个令牌，对 Vault 发出请求，同样将令牌放在请求头 "),n("code",[t._v("X-Config-Token")]),t._v(" 中。")]),t._v(" "),n("p",[t._v("如你所见，由于请求中缺少令牌，Config Server 将拒绝提供配置服务，即使是来自 Git 的属性也不行。这是一个有趣的副作用，同时使用Vault 与 Git时，除非提供有效的令牌，否则 Git 属性都会被 Config Server 间接隐藏起来。")]),t._v(" "),n("p",[t._v("再次尝试一下，这次在请求头中添加 "),n("code",[t._v("X-Config-Token")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8888/application/default\n      -H"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X-Config-Token: roottoken"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq\n")])])]),n("p",[t._v("请求中的 "),n("code",[t._v("X-Config-Token")]),t._v(" 应该会得到很好的结果，包括 Vault 中的机密令牌。此处给出的令牌是你在开发模式下启动 Vault 服务器时指定的根令牌。它可以是任何在 Vault 服务器中创建的，未过期且已授予该权限访问 Vault 机密的令牌。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("在 Config Server 客户端中设置 Vault 令牌")])]),n("p",[t._v("显然，你无法在每个微服务中使用 curl 来指定从 Config Server 中请求配置时所使用的令牌。你需要添加对每个应用程序的本地配置进行一点配置：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("token")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" roottoken\n")])])]),n("p",[n("code",[t._v("spring.cloud.config.token")]),t._v(" 属性告诉 Config Server 客户端，它向 Config Server 发出请求时所使用的令牌值。此属性必须在应用程序的本地配置中设置（不存储在 Config Server 的 Git 或 Vault 后端），以便 Config Server 可以将其值传递到 Vault。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("写入特定于应用程序和 profile 的机密")])]),n("p",[t._v("当 Config Server 提供服务时，写入 "),n("code",[t._v("application")]),t._v(" 路径的机密会服务于所有应用程序，无论其名称如何。如果只需要对某些应用程序使用机密令牌，可将路径的 "),n("code",[t._v("application")]),t._v(" 部分替换为具体的应用程序名称。例如，以下 Vault 写入命令将写入只特定服务于 "),n("code",[t._v("ingredient-service")]),t._v(" 应用程序的机密。（名称由 "),n("code",[t._v("spring.application.name")]),t._v(" 指定）：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ vault "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" secret/ingredient-service "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              spring.data.mongodb.password"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s3cr3t\n")])])]),n("p",[t._v("同样，如果你没有指定 profile，写入 Vault 的机密将服务于默认 profile。也就是说，客户将接收这些秘密，而不管当前激活的 profile 是什么。你可以向特定的 profile 写入机密，像下面这样：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("% vault "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" secret/application,production "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              spring.data.mongodb.password"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s3cr3t "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              spring.data.mongodb.username"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tacocloud\n")])])]),n("p",[t._v("这样写入的机密信息，将只提供给当前激活的 profile 是 "),n("code",[t._v("production")]),t._v(" 的应用程序。")]),t._v(" "),n("h2",{attrs:{id:"远程刷新配置属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#远程刷新配置属性"}},[t._v("#")]),t._v(" 远程刷新配置属性")]),t._v(" "),n("p",[t._v("传统上，应用程序维护（包括配置更改）需要重新部署或至少重新启动应用程序。但这对云原生应用来说是不可接受的。我们希望能够动态更改配置属性，甚至应用程序都不需要下线停机。")]),t._v(" "),n("p",[t._v("幸运的是，Spring Cloud Config Server 支持零停机刷新应用程序属性配置的能力。一旦配置修改被推送到后端 Git 存储库或 Vault 加密存储库，每个微服务应用程序都可以立即使用下面的两种方式刷新配置：")]),t._v(" "),n("ul",[n("li",[t._v("手动 —— Config Server 客户端暴露接口 "),n("code",[t._v("/actuator/refresh")]),t._v("。通过对些接口发送 HTTP POST 请求，强制客户端从 Config Server 后端检索最新的配置。")]),t._v(" "),n("li",[t._v("自动 —— 通过 Git 存储库中的提交钩子触发 Config Server 的所有客户端进行刷新。这涉及到另一个 Spring Cloud Bus 的项目，用于在 Config Server 以及它的客户端之间进行通信。")])]),t._v(" "),n("p",[t._v("每种选择都有其利弊。手动刷新可以更精确地控制哪些服务更新为新的配置，但它需要单独的向每个微服务的每个实例发出 HTTP 请求。自动刷新将更新的配置立即应用到所有微服务，这是由配置存储库的提交触发的（可能对某些项目来说这有点不适合）。")]),t._v(" "),n("h3",{attrs:{id:"手动刷新配置属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手动刷新配置属性"}},[t._v("#")]),t._v(" 手动刷新配置属性")]),t._v(" "),n("p",[t._v("在之后的章节中，我们将介绍 Spring Boot Actuator，它是一个 Spring Boot 基础组件，它支持观察和有限操作应用程序的运行时信息，例如修改日志记录级别。但现在，我们将看一个具体的 Actuator 特征，仅在配置为 Spring Cloud Config Server 客户端时才启用。")]),t._v(" "),n("p",[t._v("每当你配置一个应用程序使用 Config Server 的配置服务，自动配置还可以配置一个 Actuator 接口以用于刷新配置。要使用此接口，你需要添加 Actuator 依赖项：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-actuator"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("你可能已经猜到的，这个依赖项也可以从 Spring Initializr 中获得，通过勾选 "),n("code",[t._v("Actuator")]),t._v(" 复选框。")]),t._v(" "),n("p",[t._v("有了 Actuator，你就可以任何时候对 "),n("code",[t._v("/actuator/refresh")]),t._v(" 接口发送 HTTP POST 请求，强制从后端存储中获取最新配置。")]),t._v(" "),n("p",[t._v("要看到是如何实际操作的，先假设你有一个类 "),n("code",[t._v("GreetingProps")]),t._v("，并添加了 @ConfigurationProperties 注解：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConfigurationProperties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"greeting"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GreetingProps")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("此外，你还有一个 Controller 类，它注入了 GreetingProps，对 GET 请求简单返回消息属性的值：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GreetingController")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GreetingProps")]),t._v(" props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GreetingController")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GreetingProps")]),t._v(" props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("同时，在 Git 配置存储库中，有一个 "),n("code",[t._v("application.yml")]),t._v(" 文件，其中有以下属性：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("greeting")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Hello World"),n("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("\n")])])]),n("p",[t._v("有了 Config Server 和这个简单的配置客户端，对接口 "),n("code",[t._v("/hello")]),t._v(" 的 HTTP GET 请求将产生以下响应：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("$ curl localhost"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("hello\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("World")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),n("p",[t._v("现在，在不重启 Config Server 和应用程序的情况下，更改 "),n("code",[t._v("application.yml")]),t._v(" 文件中的 "),n("code",[t._v("greeting.message")]),t._v(" 属性值，并将其推入后端 Git 存储库：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("greeting")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Hiya folks"),n("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("\n")])])]),n("p",[t._v("如果你对应用程序发出同样的 GET 请求，你仍然会得到同样的“ Hello World!” 响应，即使 Git 中的配置已更改。但是，你可以通过发送 POST 请求来强制刷新：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:53419/actuator/refresh -X POST\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"config.client.version"')]),t._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"greeting.message"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("请注意，响应是一个 JSON 数组，其中含了已经更改的属性的名称 。该数组中包含 "),n("code",[t._v("greeting.message")]),t._v(" 属性。还包括 "),n("code",[t._v("config.client.version")]),t._v(" 属性，这个属性保存的是 Git 提交的哈希值。因为现在的配置是基于一个新的 Git 提交，每当文件中有任何更改时，这个属性都会更改。")]),t._v(" "),n("p",[t._v("POST 请求的响应告诉你 "),n("code",[t._v("greeting.message")]),t._v(" 已更改。再次向 "),n("code",[t._v("/hello")]),t._v(" 路径发出 GET 请求来验证一下：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8080/hello\nHiya folks"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),n("h3",{attrs:{id:"自动刷新配置属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动刷新配置属性"}},[t._v("#")]),t._v(" 自动刷新配置属性")]),t._v(" "),n("p",[t._v("除了手动刷新应用程序配置以外，通过另一个名为 Spring Cloud Bus 的 Spring Cloud 项目，Config Server 可以自动通知所有客户端进行配置更改。下图展示了自动刷新配置的工作原理。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(926),alt:"image-20221228183030439"}})]),t._v(" "),n("p",[t._v("图示属性刷新过程可以概括如下：")]),t._v(" "),n("ul",[n("li",[t._v("在配置 Git 存储库上创建一个 webhook，用来通知 Config Server 任何 Git 存储库的更改（如：push）。Webhooks 支持很多 Git 实现，包括 GitHub、GitLab、Bitbucket、Gogs。")]),t._v(" "),n("li",[t._v("Config Server 通过广播消息来响应 webhook POST 请求，通过消息代理（如 RabbitMQ 或 Kafka）广播更改。")]),t._v(" "),n("li",[t._v("订阅通知的各个 Config Server 客户端应用程序，响应通知消息，使用来自 Config Server 的属性值刷新应用配置。")])]),t._v(" "),n("p",[t._v("其效果是，所有使用 Config Server 的客户端应用程序都将始终具有最新配置，配置更改被推送到后端 Git 存储库后，各应用程序紧跟着进行刷新。")]),t._v(" "),n("p",[t._v("使用自动属性刷新时，需要几个部分同步工作。让我们整体看一下你将要进行的更改，以有一个更直观的理解：")]),t._v(" "),n("ul",[n("li",[t._v("你将需要一个消息代理来处理 Config Server 及其客户端之间的消息传递。比如选择 RabbitMQ 或 Kafka。")]),t._v(" "),n("li",[t._v("需要在后端 Git 存储库中创建一个 webhook 来通知 Config Server 相关修改。")]),t._v(" "),n("li",[t._v("需要使用 Config Server 监视器依赖项（它提供了接口，以处理来自 Git 存储库的调用请求），启用 Config Server 和 RabbitMQ 或 Kafka Spring Cloud Stream 依赖关系（用于向消息代理发布属性更改消息）。")]),t._v(" "),n("li",[t._v("除非消息代理以默认设置在本地运行，否则需要在 Config Server 及其客户端中，配置连接消息代理的详细信息。")]),t._v(" "),n("li",[t._v("每个 Config Server 客户端应用程序都需要 Spring Cloud Bus 依赖。")])]),t._v(" "),n("p",[t._v("我将假设必备的消息代理（RabbitMQ 或 Kafka 等等）已经运行，并准备传递属性更改消息了。你要开始对配置进行修改，以触发 webhook 更新请求。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("创建 WEBHOOK")])]),n("p",[t._v("许多 Git 服务器实现都支持创建 webhook。一旦对 Git 存储库进行更改（包括推送），就可以使用 webhook 来通知应用程序。 设置 webhook 的细节，会因为 Git 服务器实现不同而不同。下面通过在 Gogs 上配置 webhook 以让你了解整个过程。")]),t._v(" "),n("p",[t._v("首先，在 web 浏览器中访问配置存储库，并单击设置链接，如图所示。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(927),alt:"image-20221228184234213"}})]),t._v(" "),n("p",[t._v("这将带你进入存储库的设置页面，左侧是分类设置菜单。从菜单中选择 Webhooks 将显示类似于下图的页面。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(928),alt:"image-20221228184323604"}})]),t._v(" "),n("p",[t._v("在 webhooks 设置页面中，单击 add webhook 按钮。在 Gogs，这将打开一个下拉列表，用于新建不同类型的 webhook。选择 Gogs 选项。然后，你将看到一个表单用来来创建一个新的webhook，如图所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(929),alt:"image-20221228184425465"}})]),t._v(" "),n("p",[t._v("新建 webhook 表单有几个字段，最重要的两个字段是 "),n("code",[t._v("Payload URL")]),t._v(" 和 "),n("code",[t._v("Content Type")]),t._v(" 。因此，"),n("code",[t._v("Payload URL")]),t._v(" 字段应设置为指向 Config Server 的 "),n("code",[t._v("/monitor")]),t._v(" 接口的 URL。")]),t._v(" "),n("p",[t._v("我们还将 "),n("code",[t._v("Content Type")]),t._v(" 字段设置为 "),n("code",[t._v("application/json")]),t._v("。这很重要，因为 Config Server 的 "),n("code",[t._v("/monitor")]),t._v(" 接口不支持 "),n("code",[t._v("application/x-www-formurlencoded")]),t._v(" 等其他选项。")]),t._v(" "),n("p",[t._v("如果设置了 "),n("code",[t._v("Secret")]),t._v(" 字段，将在 webhook POST 请求中包含一个名为 "),n("code",[t._v("X-Gogs-Signature")]),t._v("（如果是 GitHub，则为 "),n("code",[t._v("X-Hub-Signature")]),t._v("）的请求头，值为 "),n("code",[t._v("HMAC-SHA256")]),t._v(" 数字摘要（如果是 GitHub，则为 "),n("code",[t._v("HMAC-SHA1")]),t._v(" 摘要）。现在，Config Server 的 "),n("code",[t._v("/monitor")]),t._v(" 接口还无法识别这个签名头信息，因此你可以将此字段留空。")]),t._v(" "),n("p",[t._v("最后，你只关心将配置推送到配置存储库，并且希望 webhook 处于激活状态，所以你要确保事件单选按钮 "),n("code",[t._v("Just the Push Event")]),t._v(" 和 "),n("code",[t._v("Active")]),t._v(" 复选框被选中。单击 "),n("code",[t._v("Add Webhook")]),t._v(" 按钮，webhook 将被创建。每当向存储库推送进行配置推送时，webhook 就会向 Config Server 发送 POST 请求。")]),t._v(" "),n("p",[t._v("现在你必须在 Config Server 中启用 "),n("code",[t._v("/monitor")]),t._v(" 接口来处理这些请求。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("在 Config Server 中处理 WEBHOOK 更新")])]),n("p",[t._v("在 Config Server 中启用 "),n("code",[t._v("/monitor")]),t._v(" 接口，只需在工程中添加 "),n("code",[t._v("spring-cloud-config-monitor")]),t._v(" 依赖。在 pom.xml 文件中添加以下内容：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-config-monitor"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("有了这个依赖，自动配置将启动 "),n("code",[t._v("/monitor")]),t._v(" 接口。但是这还不够，除非 Config Sever 也有一种广播更改的能力。你还需要为 Spring 添加另一个依赖 "),n("code",[t._v("Spring Cloud Stream")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("Spring Cloud Stream")]),t._v(" 是 Spring Cloud 的又一个组件：它使各服务通过某种底层机制（比如：RabbitMQ 或 Kafka）进行通信。 这些服务编写的时候，并不知道他们是如何被使用的。他们从流中接收数据，然后进行处理。处理结束将处理结果返回到流，以供下游服务处理。或将接收的数据和处理结果都返回到流中。")]),t._v(" "),n("p",[n("code",[t._v("/monitor")]),t._v(" 接口使用 "),n("code",[t._v("Spring Cloud Stream")]),t._v(" 发送通知消息到相关的 Config Server 客户端。为了避免硬编码任何特定的消息实现，monitor 充当 "),n("code",[t._v("Spring Cloud Stream")]),t._v(" 发布消息入口，并让底层实现来具体处理发送消息的细节。")]),t._v(" "),n("p",[t._v("如果你使用的是 RabbitMQ，则需要在 Config Server 中包含 "),n("code",[t._v("Spring Cloud Stream RabbitMQ")]),t._v(" 依赖：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-stream-rabbit"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("如果你更喜欢 Kafka，就需要 Spring Cloud Stream Kafka 依赖项：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-stream-kafka"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("有了这些依赖项，Config Server 就差不多可以参与自动刷新配置属性了。事实上，如果 RabbitMQ 或 Kafka 的代理，使用默认配置运行在本地， Config Server 现在就可以很好的运行。但是如果代理运行在其他主机上，并且使用了某个非默认端口，或者你已经更改了访问代理的凭据，则需要在 Config Server 中设置一些配置属性。")]),t._v(" "),n("p",[t._v("使用 RabbitMQ 时，可以在 application.yml 中设置以下属性替代默认值：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kafka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bootstrap-servers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" kafka.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9092")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" kafka.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9093")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" kafka.tacocloud.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9094")]),t._v("\n")])])]),n("div",{staticClass:"subtitle"},[n("p",[t._v("创建 GOGS 通知提取程序")])]),n("p",[t._v("每个 Git 实现在处理 webhook POST 请求时，都有自己的特性。所以 "),n("code",[t._v("/monitor")]),t._v(" 接口要能够理解 webhook POST 请求时的不同数据格式。在 "),n("code",[t._v("/monitor")]),t._v(" 接口底层是一组组件，它检查 POST 请求，尝试确定请求来自哪种 Git 服务器，并将请求数据映射到一种公共的数据类型中，以发送给每个客户端。")]),t._v(" "),n("p",[t._v("Config Server 提供了对几种流行 Git 实现的支持，比如 GitHub、GitLab 和 Bitbucket。如果你用的是这些 Git 实现，就不需要任何特殊处理。当我写这篇文章时，Gogs 还没有正式发布。因此，如果你使用 Gogs 作为 Git 实现，你需要一个特定于 Gogs 的通知提取程序。")]),t._v(" "),n("p",[t._v("这个清单显示了为 Taco Cloud 实现的 Gogs 通知提取器。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("tacos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gogs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("monitor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyPathNotification")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloud"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("monitor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyPathNotificationExtractor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordered")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stereotype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MultiValueMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordered")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LOWEST_PRECEDENCE "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GogsPropertyPathNotificationExtractor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyPathNotificationExtractor")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyPathNotification")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("extract")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MultiValueMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" headers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"push"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X-Gogs-Event"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commits"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" paths "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commits "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commits"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" commits"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllPaths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"added"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllPaths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"removed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllPaths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modified"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyPathNotification")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                        paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllPaths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" files "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" commit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("files "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("GogsPropertyPathNotificationExtractor")]),t._v(" 的实现细节和我们要讨论的内容不是太相关。一旦 Spring Cloud Config Server 内置支持了 Gogs 时，就更不需要关注了。")]),t._v(" "),n("div",{staticClass:"subtitle"},[n("p",[t._v("在 Config Server 客户端中启用自动刷新")])]),n("p",[t._v("在 Config Server 客户端中启用自动属性刷新非常简单，只需要一个依赖项：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-bus-amqp"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("这会将 AMQP（例如，RabbitMQ） "),n("code",[t._v("Spring Cloud Bus")]),t._v(" 添加到项目中。如果你使用的是 Kafka，则应改用以下依赖项：")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-bus-kafka"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("项目中有了 "),n("code",[t._v("Spring Cloud Bus")]),t._v(" 以后，应用程序在启动时自动配置将会触发，会自动绑定到本地运行的 RabbitMQ 或 Kafka 群集的 Broker 上。如果你的 RabbitMQ 或 Kafka 在其他地方运行，那么你将需要在 Config Server 的客户端进行适当的配置，就像在 Config Server 上配置时那样。")]),t._v(" "),n("p",[t._v("现在，Config Server 及其客户端都配置为自动刷新了。启动所有工程，通过修改 "),n("code",[t._v("application.yml")]),t._v(" （任何修改）让它运转起来。当你把修改推到 Git 存储库时，你将立即在客户端应用程序中发现修改生效。")])])}),[],!1,null,null,null);a.default=e.exports},920:function(t,a,s){t.exports=s.p+"assets/img/image-20221227161224624.ecb9c5d7.png"},921:function(t,a,s){t.exports=s.p+"assets/img/image-20221227165908445.b42e9ce5.png"},922:function(t,a,s){t.exports=s.p+"assets/img/image-20221228150837845.3ee54f4a.png"},923:function(t,a,s){t.exports=s.p+"assets/img/image-20221228154702274.7c1cb6e5.png"},924:function(t,a,s){t.exports=s.p+"assets/img/image-20221228160840030.a9eb14d5.png"},925:function(t,a,s){t.exports=s.p+"assets/img/image-20221228173657721.b6ea4ab4.png"},926:function(t,a,s){t.exports=s.p+"assets/img/image-20221228183030439.b020bd40.png"},927:function(t,a,s){t.exports=s.p+"assets/img/image-20221228184234213.fbca999d.png"},928:function(t,a,s){t.exports=s.p+"assets/img/image-20221228184323604.75b33e33.png"},929:function(t,a,s){t.exports=s.p+"assets/img/image-20221228184425465.d7cd17bf.png"}}]);