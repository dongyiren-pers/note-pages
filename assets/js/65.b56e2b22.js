(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{1018:function(t,e,a){"use strict";a.r(e);var s=a(14),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http-缓存技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存技术"}},[t._v("#")]),t._v(" HTTP 缓存技术")]),t._v(" "),s("h2",{attrs:{id:"强制缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),s("p",[t._v("强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。")]),t._v(" "),s("p",[t._v("如下图中，返回的是 200 状态码，但在 size 项中标识的是 from disk cache，就是使用了强制缓存。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(637),alt:"image-20230225214627077"}})]),t._v(" "),s("p",[t._v("强缓存是利用下面这两个 HTTP 响应头部字段实现的，它们都用来表示资源在客户端缓存的有效期：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Cache-Control")]),t._v("： 是一个相对时间；")]),t._v(" "),s("li",[s("code",[t._v("Expires")]),t._v("：是一个绝对时间。")])]),t._v(" "),s("p",[t._v("如果 HTTP 响应头部同时有 Cache-Control 和 Expires 字段的话，"),s("strong",[t._v("Cache-Control 的优先级高于 Expires")]),t._v(" 。")]),t._v(" "),s("p",[t._v("具体的实现流程如下：")]),t._v(" "),s("ul",[s("li",[t._v("当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 Cache-Control，Cache-Control 中设置了过期时间大小；")]),t._v(" "),s("li",[t._v("浏览器再次请求访问服务器中的该资源时，会先 "),s("strong",[t._v("通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期")]),t._v("，如果没有，则使用该缓存，否则重新请求服务器；")]),t._v(" "),s("li",[t._v("服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control。")])]),t._v(" "),s("h2",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[t._v("协商缓存就是与服务端协商之后，通过协商结果来判断是否使用本地缓存。")]),t._v(" "),s("div",{staticClass:"subtitle"},[s("p",[t._v("If-Modified-Since & Last-Modified")])]),s("p",[t._v("基于请求头部中的 If-Modified-Since 字段与响应头部中的 Last-Modified 字段实现。")]),t._v(" "),s("p",[t._v("响应头部中的 Last-Modified：标示这个响应资源的最后修改时间。")]),t._v(" "),s("p",[t._v("请求头部中的 If-Modified-Since：当资源过期了，发现响应头中具有 Last-Modified 声明，则再次发起请求的时候带上 Last-Modified 的时间，服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行对比（Last-Modified），如果最后修改时间较新，说明资源又被改过，则返回最新资源，HTTP 200 OK；如果最后修改时间较旧，说明资源无新修改，响应 HTTP 304 走缓存。")]),t._v(" "),s("div",{staticClass:"subtitle"},[s("p",[t._v("If-None-Match & ETag")])]),s("p",[t._v("基于请求头部中的 If-None-Match 字段与响应头部中的  ETag 字段实现。")]),t._v(" "),s("p",[t._v("响应头部中 Etag：唯一标识响应资源。")]),t._v(" "),s("p",[t._v("请求头部中的 If-None-Match：当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器发起请求时，会将请求头 If-None-Match 值设置为 Etag 的值。服务器收到请求后进行比对，如果资源没有变化返回 304，如果资源变化了返回 200。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")]),t._v("：协商缓存的两个字段都需要配合强制缓存中 Cache-Control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求。")])]),t._v(" "),s("div",{staticClass:"subtitle"},[s("p",[t._v("强制缓存和协商缓存的工作流程")])]),s("p",[s("img",{attrs:{src:a(638),alt:"image-20230225215920920"}})])])}),[],!1,null,null,null);e.default=i.exports},637:function(t,e,a){t.exports=a.p+"assets/img/image-20230225214627077.2c489b03.png"},638:function(t,e,a){t.exports=a.p+"assets/img/image-20230225215920920.b3de3f02.png"}}]);