(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{566:function(t,s,a){t.exports=a.p+"assets/img/image-20220611153054574.acfe1136.png"},567:function(t,s,a){t.exports=a.p+"assets/img/image-20220611153451781.45b9df5b.png"},568:function(t,s,a){t.exports=a.p+"assets/img/image-20220611153902460.ee5f4da8.png"},569:function(t,s,a){t.exports=a.p+"assets/img/image-20220611154020516.f43e67f9.png"},570:function(t,s,a){t.exports=a.p+"assets/img/image-20220611154528778.3306ae02.png"},571:function(t,s,a){t.exports=a.p+"assets/img/image-20220611155725589.ff1535e1.png"},572:function(t,s,a){t.exports=a.p+"assets/img/image-20220614142139742.5c9fb4e8.png"},984:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第8章-异常控制流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第8章-异常控制流"}},[t._v("#")]),t._v(" 第8章 异常控制流")]),t._v(" "),n("p",[t._v("从给处理器加电开始，直到断电为止，程序计数器假设一个值的序列：a0, a1, a2, …, an。其中每个 a(k) 都是某个相应的指令 I(k) 的地址。")]),t._v(" "),n("p",[t._v("每次从 a(k) 到 a(k+1) 的过渡称为控制转移。这样的控制转移序列叫做处理器的控制流（control flow）。")]),t._v(" "),n("p",[t._v("最简单的控制流是一个平滑的序列，其中每个 I(k) 和 I(k+1) 都是相邻的。")]),t._v(" "),n("ul",[n("li",[t._v("平滑流的突变：是由诸如跳转、调用、返回等程序指令造成的，这些指令都是必要的机制，使得程序能够对由程序变量表示的内部程序状态中的变化做出反应。是由程序内部变量带来的。")]),t._v(" "),n("li",[t._v("异常控制流（Exceptional Control Flow, ECF）：硬件定时器中断、程序向磁盘请求的数据已到位等，需要对系统状态的变化做出反应。这些由程序外部原因带来的突变就叫做异常控制流。")])]),t._v(" "),n("p",[n("strong",[t._v("异常控制流 ECF 发生在计算机系统的各个层次")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("硬件层，硬件中断")]),t._v(" "),n("li",[t._v("操作系统层，内核通过上下文切换将控制从一个进程转移到另一个进程")]),t._v(" "),n("li",[t._v("应用层，一个进程给另一个进程发送信号，信号接收者将控制转移到信号处理程序")])]),t._v(" "),n("p",[n("strong",[t._v("ECF 的应用")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("操作系统内部。ECF 是操作系统用来实现 I/O、进程和虚拟内存的基本机制。")]),t._v(" "),n("li",[t._v("与操作系统交互。应用程序通过使用系统调用（system call）的 ECF 形式，向操作系统请求服务。")]),t._v(" "),n("li",[t._v("编写应用程序。操作系统为应用程序提供 ECF 机制，用来创建新进程、等待进程终止、通知其他进程系统中的异常事件、检测和响应这些事件。")]),t._v(" "),n("li",[t._v("并发。ECF 是计算机系统中实现并发的基本机制。并发的例子：异常处理程序或信号处理程序中断应用程序的执行，时间上重叠执行的进程和线程。")]),t._v(" "),n("li",[t._v("软件异常处理。C++ 和 Java 通过 try、catch、throw 等语句来提供异常处理功能。异常处理允许程序进行非本地跳转（即违反通常的调用/返回栈规则的跳转）来响应错误情况。非本地跳转是一种应用层 ECF，在 C 中由 setjmp和 longjmp 函数提供。")])]),t._v(" "),n("h2",{attrs:{id:"_8-1-异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-异常"}},[t._v("#")]),t._v(" 8.1 异常")]),t._v(" "),n("p",[t._v("异常（exception）是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现。异常位于硬件和操作系统交界的部分。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注意")]),t._v("：这里的异常和 C++ 或 Java 中的应用级异常是不同的。")])]),t._v(" "),n("p",[t._v("异常就是控制流中的突变，用来响应处理器状态中的某些变化。在处理器中，状态被编码为不同的位和信号，状态变化称为事件（event）。")]),t._v(" "),n("p",[t._v("事件的例子：发生虚拟内存缺页、算术溢出、一条指令试图除以 0、一个系统定时器产生的信号等。")]),t._v(" "),n("p",[t._v("任何情况下，当处理器检测到有事件发生时，就会通过一张叫做异常表的跳转表，进行一个间接过程调用（异常），到操作系统中一个专门用来处理这类事件的子程序（异常处理程序）。")]),t._v(" "),n("p",[t._v("当异常处理程序完成处理后，根据引起异常的事件的类型，会发生以下三种情况中的一种：")]),t._v(" "),n("ul",[n("li",[t._v("处理程序将控制返回给当前指令 I（curr），即事件发生时正在执行的指令。")]),t._v(" "),n("li",[t._v("处理程序将控制返回给下一条指令 I（next），即如果没有发生异常将会执行的下一条指令。")]),t._v(" "),n("li",[t._v("处理程序终止被中断的程序。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(566),alt:"image-20220611153054574"}})]),t._v(" "),n("h3",{attrs:{id:"异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),n("p",[t._v("系统为每种可能的异常都分配了一个唯一的非负整数的异常号：")]),t._v(" "),n("ul",[n("li",[t._v("由处理器设计者分配的（对应硬件部分）。比如被零除、缺页、内存访问违例、断点、算术溢出。")]),t._v(" "),n("li",[t._v("由操作系统内核的设计者分配的（对应软件部分）。比如系统调用、来自外部 I/O 设备的信号。")])]),t._v(" "),n("p",[t._v("在系统启动时，操作系统分配和初始化一张异常表，使得表目 k 包含异常 k 的处理程序的地址。")]),t._v(" "),n("p",[t._v("系统在执行某个程序时，处理器检测到发生了一个事件，并确定了对应的异常号 k，就会触发异常。")]),t._v(" "),n("p",[n("strong",[t._v("触发异常")]),t._v("：执行间接过程调用，通过异常表的表目 k，转到相应的处理程序。异常号是到异常表中的索引，异常表的起始地址放在一个特殊 CPU 寄存器 —— 异常表基地址寄存器中。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(567),alt:"image-20220611153451781"}})]),t._v(" "),n("p",[n("strong",[t._v("异常类似过程调用，但有一些不同")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("过程调用时，在跳转到处理程序前，处理器将返回地址压入栈中。而在异常中，返回地址是当前指令（事件发生时正在执行的指令）或下一条指令。")]),t._v(" "),n("li",[t._v("处理器也会把一些额外的处理器状态压入栈中，在处理程序返回时，重新开始执行被中断的程序会需要这些状态。")]),t._v(" "),n("li",[t._v("如果控制从用户程序转移到内核，所有这些项目都被压到内核栈中，而不是用户栈中。")]),t._v(" "),n("li",[t._v("异常处理程序运行在内核模式下，因此它们对所有的系统资源都有完全的访问权限。")])]),t._v(" "),n("p",[t._v("一旦硬件触发了异常，剩下的工作就是由异常处理程序在软件中执行。")]),t._v(" "),n("p",[t._v("异常处理结束后，会执行一条特殊的 “从中断返回” 指令，可选地返回到被中断的程序，该指令将适当的状态弹回到处理器的控制和数据寄存器中，然后将控制返回给终端的程序。")]),t._v(" "),n("h3",{attrs:{id:"异常的类别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常的类别"}},[t._v("#")]),t._v(" 异常的类别")]),t._v(" "),n("p",[t._v("异常可以分为 4 类：中断（interrupt）、陷阱（trap）、故障（fault）和终止（abort）。具体特性：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类别")]),t._v(" "),n("th",[t._v("原因")]),t._v(" "),n("th",[t._v("异步／同步")]),t._v(" "),n("th",[t._v("返回行为")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("中断")]),t._v(" "),n("td",[t._v("来自 I/O 设备的信号")]),t._v(" "),n("td",[t._v("异步")]),t._v(" "),n("td",[t._v("总是返回到下一条指令")])]),t._v(" "),n("tr",[n("td",[t._v("陷阱")]),t._v(" "),n("td",[t._v("有意的异常")]),t._v(" "),n("td",[t._v("同步")]),t._v(" "),n("td",[t._v("总是返回到下一条指令")])]),t._v(" "),n("tr",[n("td",[t._v("故障")]),t._v(" "),n("td",[t._v("潜在可恢复的错误")]),t._v(" "),n("td",[t._v("同步")]),t._v(" "),n("td",[t._v("潜在可恢复的错误")])]),t._v(" "),n("tr",[n("td",[t._v("终止")]),t._v(" "),n("td",[t._v("不可恢复的错误")]),t._v(" "),n("td",[t._v("同步")]),t._v(" "),n("td",[t._v("不会返回")])])])]),t._v(" "),n("p",[n("strong",[t._v("中断")])]),t._v(" "),n("p",[t._v("中断是异步异常，是来自处理器外部的 I/O 设备中的信号的结果。硬件中断不是由指令造成的，因此它是异步的。硬件中断的异常处理程序常常叫做中断处理程序。")]),t._v(" "),n("p",[t._v("I/O 设备，例如网络适配器、磁盘控制器和定时器芯片，通过向处理器芯片上的一个引脚发信号，并将异常号放到系统总线上，来触发中断，这个异常号标识了引起中断的设备。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(568),alt:"image-20220611153902460"}})]),t._v(" "),n("p",[t._v("在当前指令完成执行后，处理器注意到中断引脚的电压变高了，就从系统总线读取异常号，调用对应的中断处理程序。当处理程序返回时，它就将控制返回给下一条指令。结果是程序继续执行，就好像没有发生过中断一样。")]),t._v(" "),n("p",[n("strong",[t._v("陷阱和系统调用")])]),t._v(" "),n("p",[t._v("陷阱是有意的异常，是执行一条指令的结果。陷阱最重要的用途是在应用程序和内核之间提供一个接口，叫做系统调用。")]),t._v(" "),n("p",[t._v("用户程序经常需要向内核请求服务，比如读文件（read）、创建进程（fork）、加载程序（execve）、终止进程（exit）等。为了允许对这些内核服务的受控访问，处理器提供了一条特殊的 ”syscall n“ 指令，当用户程序想要向内核请求服务 n 时，就执行这条指令。执行 syscall 指令会导致一个到异常处理程序的陷阱（异常），这个处理程序解析参数，并调用适当的内核程序。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(569),alt:"image-20220611154020516"}})]),t._v(" "),n("p",[t._v("从程序员角度看，系统调用和普通的函数调用是一样的。但是实现上大不相同。它们分别允许在内核模式和用户模式。")]),t._v(" "),n("p",[n("strong",[t._v("故障")])]),t._v(" "),n("p",[t._v("故障由错误情况引起。故障发生时，处理器将控制转移给故障处理程序，如果处理程序能够修正错误，就把控制返回到引起故障的指令，否则返回给内核中的 abort 例程，abort 会终止当前的应用程序。")]),t._v(" "),n("p",[n("strong",[t._v("缺页异常")])]),t._v(" "),n("p",[t._v("缺页异常是一种经典的故障（页面是虚拟内存中一个连续的块，典型值是 4KB）。当指令引用一个虚拟地址，而与该地址对应的物理页面不在内存中，必须要从磁盘取出时，就会发生缺页异常。")]),t._v(" "),n("p",[t._v("然后缺页处理程序会从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行时，相应的物理页面就在内存中了。")]),t._v(" "),n("p",[t._v("从存储器层次结构的角度看，缺页异常似乎可以看作是内存不命中的惩罚。")]),t._v(" "),n("p",[n("strong",[t._v("终止")])]),t._v(" "),n("p",[t._v("终止是不可恢复的致命错误造成的结果，通常是一些硬件错误。终止处理程序将控制返回给一个 abort 例程，该例程会终止这个应用程序。")]),t._v(" "),n("p",[t._v("运行程序时遇到了 abort 表明发生了故障或终止异常。")]),t._v(" "),n("h2",{attrs:{id:"_8-2-进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-进程"}},[t._v("#")]),t._v(" 8.2 进程")]),t._v(" "),n("p",[t._v("异常是允许操作系统内核提供进程概念的基本构造块。")]),t._v(" "),n("p",[t._v("进程的经典定义就是一个执行中程序的实例。系统中的每个程序都运行在某个进程的上下文中 。")]),t._v(" "),n("p",[t._v("上下文（context）是由程序正确运行所需的状态组成的，包括存放在内存中的程序的代码和数据，栈、通用目的寄存器的内容、程序计数器、环境变量、打开文件描述符的集合。")]),t._v(" "),n("p",[t._v("当用户向 shell 输入一个可执行目标文件的名字，运行程序时， shell 就会创建一个新的进程，然后在这个新进程的上下文中运行该可执行文件。")]),t._v(" "),n("p",[t._v("进程提供给应用程序的关键抽象：")]),t._v(" "),n("ul",[n("li",[t._v("一个独立的逻辑控制流。好像程序独占地使用处理器。")]),t._v(" "),n("li",[t._v("一个私有的地址空间。好像程序独占地使用内存。")])]),t._v(" "),n("h3",{attrs:{id:"逻辑控制流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑控制流"}},[t._v("#")]),t._v(" 逻辑控制流")]),t._v(" "),n("p",[t._v("使用调试器单步执行程序时会看到一系列的程序计数器（PC）值，这个 PC 的值的序列叫做"),n("strong",[t._v("逻辑控制流")]),t._v("，简称"),n("strong",[t._v("逻辑流")]),t._v("。")]),t._v(" "),n("p",[t._v("PC 的值唯一地对应于包含在程序的可执行目标文件中的指令，或包含在运行时动态链接到程序的共享对象中的指令。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(570),alt:"image-20220611154528778"}})]),t._v(" "),n("p",[t._v("进程是轮流使用处理器的。")]),t._v(" "),n("h3",{attrs:{id:"并发流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发流"}},[t._v("#")]),t._v(" 并发流")]),t._v(" "),n("p",[t._v("计算机系统中逻辑流有许多不同的形式，例如异常处理程序、进程、信号处理程序、线程等。")]),t._v(" "),n("p",[t._v("当一个逻辑流的执行在时间上与另一个流重叠，就称为"),n("strong",[t._v("并发流")]),t._v("（concurrent flow），这两个流称为并发地运行。例如上述图中，进程 A 和 B 时并发的，A 和 C 也是，但是 B 和 C 没有并发的运行。")]),t._v(" "),n("p",[t._v("如果两个流并发地运行在不同的处理器核或不同的计算机上时，就称为"),n("strong",[t._v("并行流")]),t._v("。")]),t._v(" "),n("p",[t._v("一个进程和其他进程轮流运行的概念叫做"),n("strong",[t._v("多任务")]),t._v("。")]),t._v(" "),n("p",[t._v("一个进程执行它的控制流的一部分的每一时间段叫做"),n("strong",[t._v("时间片")]),t._v("。因此多任务也叫做"),n("strong",[t._v("时间分片")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"私有地址空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#私有地址空间"}},[t._v("#")]),t._v(" 私有地址空间")]),t._v(" "),n("p",[t._v("进程为每个程序提供自己的私有地址空间。一般而言，和这个私有地址空间中某个地址相关联的那个内存字节是不能被其他进程读或写的。")]),t._v(" "),n("p",[t._v("不同进程的私有地址空间关联的内存的内容一般不同，但是每个这样的空间都有相同的通用结构。")]),t._v(" "),n("p",[t._v("x86-64 Linux 进程的地址空间的组织结构如下图所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(571),alt:"image-20220611155725589"}})]),t._v(" "),n("p",[t._v("地址空间的顶部保留给内核（操作系统常驻内存的部分），包含内核在代表进程执行指令时（比如当执行系统调用时）使用的代码、数据、堆和栈。")]),t._v(" "),n("p",[t._v("地址空间的底部留给用户程序，包括代码段、数据段、运行时堆、用户栈、共享库等。代码段总是从地址 0x400000 开始。")]),t._v(" "),n("p",[t._v("可以看出，内核栈和用户栈是分开的。")]),t._v(" "),n("h3",{attrs:{id:"用户模式和内核模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户模式和内核模式"}},[t._v("#")]),t._v(" 用户模式和内核模式")]),t._v(" "),n("p",[t._v("处理器使用某个控制寄存器中的一个模式位（mode bit）来区分用户模式与内核模式。进程初始时运行在用户模式，当设置了模式位时，进程就运行在内核模式。")]),t._v(" "),n("p",[t._v("运行在内核模式的进程可以执行指令集中的任何指令，并可以访问系统中的任何内存位置。")]),t._v(" "),n("p",[t._v("运行在用户模式的进程不允许执行特权指令，比如停止处理器、改变模式位、发起 I/O 操作等，不能直接引用地址空间内核区中的代码和数据，用户程序只能通过系统调用接口间接地访问内核代码和数据。")]),t._v(" "),n("p",[t._v("进程从用户模式变为内核模式的方法是通过中断、故障、陷阱（系统调用就是陷阱）这样的异常 。异常发生时，控制传递给异常处理程序，处理器将模式从用户模式转变为内核模式。")]),t._v(" "),n("p",[n("strong",[t._v("/proc 文件系统")])]),t._v(" "),n("p",[t._v("Linux 提供了一种叫做 /proc 文件系统的机制来允许用户模式进程访问内核数据结构的内容。")]),t._v(" "),n("p",[t._v("/proc 文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。")]),t._v(" "),n("p",[t._v("可以通过 /proc 文件系统找出一般的系统属性（如 CPU 类型：/proc/cpuinfo）或者某个特殊的进程使用的内存段（/proc//maps）。")]),t._v(" "),n("p",[t._v("2.6 版本的 Linux 内核引入了 /sys 文件系统，它输出关于系统总线和设备的额外的低层信息。")]),t._v(" "),n("h3",{attrs:{id:"上下文切换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[t._v("#")]),t._v(" 上下文切换")]),t._v(" "),n("p",[t._v("上下文切换是一种较高层形式的异常控制流，它是建立在中断、故障等较低层异常机制之上的。")]),t._v(" "),n("p",[t._v("系统通过上下文切换来实现多任务。内核为每一个进程维持一个上下文， 上下文是内核重新启动一个被挂起的进程所需的状态。")]),t._v(" "),n("p",[t._v("上下文由一些对象的值（是这些 对象的值而非对象本身）组成，这些对象包括：通用目的寄存器、浮点寄存器、状态寄存器、程序计数器、用户栈、内核栈和各种内核数据结构（如描述地址空间的页表、包含有关当前进程信息的进程表、包含进程已打开文件的信息的文件表）。")]),t._v(" "),n("p",[t._v("内核挂起当前进程，并重新开始一个之前被挂起的进程的决策叫做调度，是由内核中的调度器完成的。")]),t._v(" "),n("p",[n("strong",[t._v("内核使用上下文切换来调度进程")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("保存当前进程的上下文")]),t._v(" "),n("li",[t._v("恢复某个先前被抢占的进程被保存的上下文")]),t._v(" "),n("li",[t._v("将控制传递给这个新恢复的进程")])]),t._v(" "),n("p",[t._v("当内核代表用户执行系统调用时，可能发生上下文切换。如果系统调用因为等待某个事件而阻塞（比如 sleep 系统调用显式地请求让调用进程休眠，或者 read 系统调用要从磁盘读取数据），内核就可以让当前进程休眠，切换到另一个进程。即使系统调用没有阻塞，内核也可以进行上下文切换，而不是将控制返回给调用进程。")]),t._v(" "),n("p",[t._v("中断也可能引发上下文切换。如所有的系统都有一种定时器中断机制，即产生周期性定时器中断，通常为 1ms 或 10ms。当发生定时器中断，内核就判定当前进程已经运行了足够长时间，该切换到新的进程了。")]),t._v(" "),n("h2",{attrs:{id:"_8-3-系统调用错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-系统调用错误处理"}},[t._v("#")]),t._v(" 8.3 系统调用错误处理")]),t._v(" "),n("p",[t._v("当 Unix 系统级函数遇到错误时，它们通常会返回 -1，并设置全局整数变量 errno 来表示什么出错了。")]),t._v(" "),n("p",[t._v("程序员应该总是检查错误")]),t._v(" "),n("p",[t._v("strerror 函数返回一个文本串，描述了和某个 errno 值相关联的错误。使用 strerror 来查看错误")]),t._v(" "),n("p",[t._v("调用 Unix fork 时检查错误")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果发生错误，此时 errno 已经被设置为对应值了")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fork error: %s\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerror")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//strerror(errno) 返回描述当前 errno 值的文本串")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("错误处理包装函数")]),t._v(" "),n("p",[t._v("许多人因为错误检查会使代码臃肿、难读而放弃检查错误。可以通过定义错误报告函数及对原函数进行包装来简化代码。")]),t._v(" "),n("p",[t._v("对于一个给定的基本函数，定义一个首字母大写的包装函数来检查错误。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误报告函数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s: %s\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerror")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fork 函数的错误处理包装函数 Fork")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fork error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用上面定义的包装函数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"_8-4-进程控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-进程控制"}},[t._v("#")]),t._v(" 8.4 进程控制")]),t._v(" "),n("h3",{attrs:{id:"获取进程id"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取进程id"}},[t._v("#")]),t._v(" 获取进程ID")]),t._v(" "),n("p",[t._v("每个进程都有一个唯一的非零正整数表示的进程 ID，叫做 PID。有两个获取进程 ID 的函数：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("getpid 函数")]),t._v("：返回调用进程的 PID（类型为 pid_t，在 type.h 中定义了 pid_t 为 int）。")]),t._v(" "),n("li",[n("strong",[t._v("getppid 函数")]),t._v("：返回它的父进程的 PID。")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\npid "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npid "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"创建与终止进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建与终止进程"}},[t._v("#")]),t._v(" 创建与终止进程")]),t._v(" "),n("p",[t._v("进程总是处于以下三种状态之一：")]),t._v(" "),n("ul",[n("li",[t._v("运行。进程要么在 CPU 上执行，要么在等待被执行且最终被内核调度。")]),t._v(" "),n("li",[t._v("停止。进程的执行被挂起且不会被调度。当收到 SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU 信号时，进程就会停止，直到收到一个 SIGCONT 信号时再次开始运行。")]),t._v(" "),n("li",[t._v("终止。进程永远地停止了。进程有三种原因终止：收到一个信号，该信号的默认行为是终止进程；从主进程返回；调用 exit 函数。")])]),t._v(" "),n("p",[t._v("信号是一种软件中断的形式。")]),t._v(" "),n("p",[n("strong",[t._v("终止进程")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// status 指定进程终止时的退出状态。")]),t._v("\n")])])]),n("p",[t._v("exit 函数以 status 退出状态来终止进程（另一种设置退出状态的方法是从主程序中返回一个整数值。理解：是否指 main 函数的返回值）。")]),t._v(" "),n("p",[n("strong",[t._v("创建进程")])]),t._v(" "),n("p",[t._v("父进程通过调用 fork 函数创建一个新的运行的子进程。")]),t._v(" "),n("p",[t._v("fork 函数只被调用一次，但是会返回两次：一次返回是在父进程中，一次是在新创建的子进程中。父进程中返回子进程的 PID，子进程中返回 0。")]),t._v(" "),n("p",[t._v("因为 fork 创建的子进程的 PID 总是非零的，所以可以根据返回值是否为 0 来分辨是当前是在父进程还是在子进程。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程返回 0，父进程返回子进程的 PID，如果出错，返回 -1")]),t._v("\n")])])]),n("p",[t._v("子进程与父进程几乎完全相同：")]),t._v(" "),n("ul",[n("li",[t._v("子进程得到与父进程用户级虚拟地址空间相同但独立的一份副本，包括代码段、数据段、堆、共享库、用户栈。")]),t._v(" "),n("li",[t._v("子进程获得与父进程所有文件描述符相同的副本。这意味着子进程可以读写父进程打开的任何文件。")]),t._v(" "),n("li",[t._v("子进程和父进程之间的最大区别在于 PID 不同。")])]),t._v(" "),n("h3",{attrs:{id:"回收子进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回收子进程"}},[t._v("#")]),t._v(" 回收子进程")]),t._v(" "),n("p",[t._v("当一个进程终止时，内核并不会立即把它删除。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收。")]),t._v(" "),n("p",[t._v("当父进程回收已终止的子进程时，内核将子进程的退出状态传递给父进程，然后清除子进程。")]),t._v(" "),n("p",[t._v("僵死进程：一个终止了但还未被回收的进程。")]),t._v(" "),n("p",[t._v("init 进程：系统启动时内核会创建一个 init 进程，它的 PID 为 1，不会终止，是所有进程的祖先。")]),t._v(" "),n("p",[t._v("如果一个父进程终止了，init 进程会成为它的孤儿进程的养父。init 进程会负责回收没有父进程的僵死子进程。")]),t._v(" "),n("p",[t._v("长时间没有运行的程序，总是应该回收僵死子进程。即使僵死子进程没有运行，也在消耗系统的内存资源。")]),t._v(" "),n("p",[n("strong",[t._v("waitpid 函数")])]),t._v(" "),n("p",[t._v("一个进程可以通过调用 waitpid 函数来等待它的子进程终止或停止。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("statusp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果成功，返回对应的已终止的子进程的 PID；如果其他错误，返回 -1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有当参数 options=WNOHANG 时，才有可能返回 0；其他情况要么返回子进程 PID，要么返回 -1")]),t._v("\n")])])]),n("p",[t._v("waitpid 函数比较复杂。默认情况下 options = 0，此时 waitpid 会挂起调用进程的执行，直到它的等待集合中的一个子进程终止。如果等待集合中的一个进程在刚调用时就已经终止了，那么 waitpid 就立即返回。waitpid 的返回值是对应的已终止的子进程的 PID，此时该子进程会被回收，内核从系统中删除掉它的所有痕迹。")]),t._v(" "),n("p",[n("strong",[t._v("判定等待集合的成员")])]),t._v(" "),n("p",[t._v("等待集合的成员是由参数 pid 确定的：")]),t._v(" "),n("ul",[n("li",[t._v("如果 pid>0，等待集合就是进程 ID=pid 的那一个特定的子进程。")]),t._v(" "),n("li",[t._v("如果 pid=-1，等待集合就是由父进程的所有子进程共同构成的。")])]),t._v(" "),n("p",[t._v("还有其他等待集合，不再讨论。")]),t._v(" "),n("p",[n("strong",[t._v("修改默认行为")])]),t._v(" "),n("p",[t._v("默认情况下 options=0，可以将 options 设置为常量 WNOHANG, WUNTRACED, WCONTINUED 的各种组合来修改默认行为：")]),t._v(" "),n("ul",[n("li",[t._v("options=0，挂起调用进程的执行，直到它的等待集合中的一个子进程终止。如果等待集合中的一个进程在刚调用时就已经终止了，那么 waitpid 就立即返回。")]),t._v(" "),n("li",[t._v("options=WNOHANG，如果等待集合中的一个子进程终止了，返回该子进程 ID，如果没有子进程终止，也立即返回，返回值为 0。WNOHANG 的特点是立即返回，不会挂起调用进程。")]),t._v(" "),n("li",[t._v("options=WUNTRACED，挂起调用进程的执行，直到等待集合中的一个进程变成已终止或被停止，返回值是该子进程 ID。WUNTRACED 的特点是还可以检查被停止的子进程。")]),t._v(" "),n("li",[t._v("options=WCONTINUED，挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或等待集合中一个被停止的进程收到 SIGCONT 信号重新开始执行。")]),t._v(" "),n("li",[t._v("options=WNOHANG|WUNTRACED，立即返回，如果等待集合中的子进程都没有被停止或终止，则返回 0，否则返回该子进程的 PID。")])]),t._v(" "),n("p",[n("strong",[t._v("检查已回收子进程的退出状态")])]),t._v(" "),n("p",[t._v("如果 statusp 参数是非空的，那么 waitpid 就会在 status 中放上关于导致 waitpid 返回的子进程的状态信息，status 是 statusp 指向的值。")]),t._v(" "),n("p",[t._v("wait.h 头文件定义了解释 status 参数的几个宏：")]),t._v(" "),n("ul",[n("li",[t._v("WIFEXITED(status)：如果子进程通过调用 exit 或者一个返回（return）正常终止，就返回真。")]),t._v(" "),n("li",[t._v("WEXITSTATUS(status)：返回一个正常终止的子进程的退出状态。只有在 WIFEXITED() 返回为真时，才会定义这个状态。")]),t._v(" "),n("li",[t._v("WIFSIGNALED(status)：如果子进程是因为一个未被捕获的信号终止的，那么就返回真。")]),t._v(" "),n("li",[t._v("WTERMSIG(status)：返回导致子进程终止的信号的编号。只有在 WIFSIGNALED() 返回为真时，才定义这个状态。")]),t._v(" "),n("li",[t._v("WIFSTOPPED(status)：如果引起返回的子进程当前是停止的，就返回真。")]),t._v(" "),n("li",[t._v("WSTOPSIG(status)：返回引起子进程停止的是信号的编号。只有在 WIFSTOPPED() 返回为真时，才定义这个状态。")]),t._v(" "),n("li",[t._v("WIFCONTINUED(status)：如果子进程收到 SIGCONT 信号重新启动，则返回真。")])]),t._v(" "),n("p",[n("strong",[t._v("错误条件")])]),t._v(" "),n("p",[t._v("如果调用进程没有子进程，那么 waitpid 返回 -1，并设置 errno 为 ECHILD。如果 waitpid 函数被一个信号中断，那么它返回 -1，并设置 errno 为 EINTR。")]),t._v(" "),n("p",[n("strong",[t._v("wait 函数")])]),t._v(" "),n("p",[t._v("wait 函数是 waitpid 函数的简单版本。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("statusp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果成功，返回子进程的 PID，如果出错，返回 -1")]),t._v("\n")])])]),n("h3",{attrs:{id:"让进程休眠"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#让进程休眠"}},[t._v("#")]),t._v(" 让进程休眠")]),t._v(" "),n("p",[t._v("sleep函数：sleep 函数将一个进程挂起一段指定的时间。")]),t._v(" "),n("p",[t._v("如果请求的休眠时间量到了，sleep 返回 0，否则返回还剩下的要休眠的秒数（当 sleep 函数被一个信号中断而过早地返回，会发生这种情况）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回还要休眠的秒数")]),t._v("\n")])])]),n("p",[t._v("pause函数：pause 函数让调用函数休眠，直到该进程收到一个信号。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"加载并运行程序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载并运行程序"}},[t._v("#")]),t._v(" 加载并运行程序")]),t._v(" "),n("p",[t._v("execve函数：execve 函数在当前进程的上下文中加载并运行一个新程序（是程序不是进程）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("envp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果成功，则不返回，如果错误，返回 -1。")]),t._v("\n")])])]),n("p",[t._v("execve 函数功能： 加载并运行可执行目标文件 filename，并带一个参数列表 argv 和一个环境变量列表 envp。")]),t._v(" "),n("p",[t._v("execve 调用一次并从不返回（区别于 fork 调用一次返回两次）。")]),t._v(" "),n("p",[t._v("参数列表和变量列表：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("参数列表：argv 指向一个以 null 结尾的指针数组，其中每个指针指向一个字符串。")])]),t._v(" "),n("li",[n("p",[t._v("环境变量列表：envp 指向一个以 null 结尾的指针数组，其中每个指针指向一个环境变量字符串，每个串都是形如 “name=value” 的名字-值对。")])])]),t._v(" "),n("p",[t._v("execve函数的执行过程：execve 函数调用加载器加载了 filename 后，设置用户栈，并将控制传递给新程序的主函数（即 main 函数）。")]),t._v(" "),n("p",[t._v("main 函数：main 函数有以下形式的原型，两种是等价的。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" envp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("envp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("main 函数有三个参数：")]),t._v(" "),n("ul",[n("li",[t._v("argc：给出 argv[] 数组中非空指针的数量。")]),t._v(" "),n("li",[t._v("argv：指向 argv[] 数组中的第一个条目。")]),t._v(" "),n("li",[t._v("envp：指向 envp] 数组中的第一个条目。")])]),t._v(" "),n("p",[t._v("argc 和 argv 的值都是从命令行中获取的，如果命令行中只有该可执行文件的名字，没有其他参数，则 argc=1，argv 的第一个元素的值即为该可执行文件的文件名（包含路径）")]),t._v(" "),n("p",[t._v("注意 argv[] 数组和 envp 数组最后一个元素都是 NULL，可以使用 NULL 作为循环终止条件来遍历数组。")]),t._v(" "),n("p",[t._v("操作环境变量数组的函数：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 在环境变量列表中搜索字符串 "name=value"，如果搜到了返回指向 value 的指针，否则返回 NULL')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 若成功返回 0，否则返回 -1。如果环境变量列表中包含一个形如 ”name=value" 的字符串，setnv 会用 newvalue 替代原来的 value，如果不存在，直接添加一个 "name=newvalue" 到数组中。')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setenv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("newvalue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" overwrite"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 如果环境变量列表中包含一个形如 ”name=value" 的字符串,unsetnv 会删除它。')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsetenv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),n("p",[n("strong",[t._v("区分程序与进程")])]),t._v(" "),n("p",[t._v("程序：程序是一堆代码和数据，程序可以作为目标文件存在于磁盘上，或作为段存在于虚拟地址空间中。")]),t._v(" "),n("p",[t._v("进程：进程是执行中程序的一个具体的实例。")]),t._v(" "),n("p",[t._v("程序总是运行在某个进程的上下文中。")]),t._v(" "),n("p",[n("strong",[t._v("区分 fork 和 execve")])]),t._v(" "),n("p",[t._v("fork 函数是在新的子进程中运行相同的程序，新的子进程是父进程的一个复制品。")]),t._v(" "),n("p",[t._v("execve 函数是在当前进程的上下文中加载并运行一个新的程序，它会覆盖当前进程的地址空间，但没有创建一个新的进程。")]),t._v(" "),n("p",[n("strong",[t._v("利用 fork 和 execve 运行程序")])]),t._v(" "),n("p",[t._v("像 Unix shell 和 Web 服务器这样程序大量使用了 fork 和 execve 函数")]),t._v(" "),n("p",[t._v("一个简单的 shell 的实现方式")]),t._v(" "),n("p",[t._v("shell 会打印一个命令行提示符，等待用户在 stdin 上输入命令行，然后对这个命令行求值。")]),t._v(" "),n("p",[t._v("shell 的 main 例程")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXARGS")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Command line */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Read */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"> "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fgets")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取用户的输入")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("feof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Evaluate */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析命令行")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("解释并执行一个命令行")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* eval - Evaluate a command line */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXARGS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Argument list execve() */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Holds modified command line */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Should the job run in bg or fg? */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Process id */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    bg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseline")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用 parseline 函数解析以空格分隔的命令行参数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示是空命令行")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Ignore empty lines */")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用 builtin_command 检查第一个命令行参数是否是一个内置的 shell 命令。如果是的话返回 1，并在函数内就解释并执行该命令。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("builtin_command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果返回 0，即表明不是内置的 shell 命令")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个子进程")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child runs user job */")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" environ"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在子进程中执行所请求的程序")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s: Command not found.\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent waits for foreground job to terminate */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("bg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bg=0 表示是要在前台执行的程序，shell 会等待程序执行完毕")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("status"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等待子进程结束回收该进程")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"waitfg: waitpid error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bg=1 表示是要在后台执行的程序，shell 不会等待它执行完毕")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %s"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmdline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("一个极简的 shell 程序包括以下几个函数：main 函数、eval 函数、parseline 函数、buildin 函数，它们的各自的主要职责如下：")]),t._v(" "),n("ul",[n("li",[t._v("main：shell 程序的入口点，职责：循环从标准输入读取命令行字符串并调用 eval 函数解析并执行命令行字符串。")]),t._v(" "),n("li",[t._v("eval：解析并执行命令行字符串。职责：首先调用 parseline 函数解析命令行字符串，然后使用 buildin 函数检查是否为内置命令，不是的话要生成一个进程（作业）来完成此命令，还要根据情况回收相应进程。")]),t._v(" "),n("li",[t._v("parseline 函数：解析命令行字符串。职责：根据空格拆分命令行字符串，构造 argv 向量。")]),t._v(" "),n("li",[t._v("buildin 函数：检查命令是否为内置命令，如果是的话直接调用相应函数，不是的话返回交给 eval 函数负责。")])]),t._v(" "),n("h2",{attrs:{id:"_8-5-信号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-信号"}},[t._v("#")]),t._v(" 8.5 信号")]),t._v(" "),n("p",[t._v("信号是一种更高层次的软件形式的异常，它允许进程和内核中断其他进程。")]),t._v(" "),n("p",[t._v("一个信号就是一条消息，它通知进程系统中发生了某件事情。")]),t._v(" "),n("p",[t._v("每种信号类型都对应于某种系统事件。信号可以简单分为两类：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("一类信号对应低层的硬件异常：")]),t._v(" "),n("ul",[n("li",[t._v("此类异常由内核异常处理程序处理，对用户进程不可见。但是当发生异常，会通过信号通知用户进程发生了异常。")]),t._v(" "),n("li",[t._v("例子：一个进程试图除以 0，内核会发送给他一个 SIGFPE 信号。")])])]),t._v(" "),n("li",[n("p",[t._v("一类信号对应于内核或其他用户进程中叫高层的软件事件。")]),t._v(" "),n("ul",[n("li",[t._v("例子：用户按下 Ctrl+C，内核会发送一个 SIGINT 信号给这个前台进程组中的每个进程。一个进程可以通过向另一个进程发送 SIGKILL 信号强制终止它。")])])])]),t._v(" "),n("h3",{attrs:{id:"信号术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号术语"}},[t._v("#")]),t._v(" 信号术语")]),t._v(" "),n("p",[t._v("传送一个信号到目的进程包含两个步骤：")]),t._v(" "),n("ul",[n("li",[t._v("发送信号。内核通过更新目的进程上下文中的某个状态，发送一个信号给目的进程。")]),t._v(" "),n("li",[t._v("接收信号。当目的进程被内核强迫以某种方式对信号的发送做出反应时，就接受了信号。进程可以忽略、终止或通过执行一个叫做信号处理程序的用户层函数捕获这个信号。")])]),t._v(" "),n("p",[t._v("发送信号有两种原因：")]),t._v(" "),n("ul",[n("li",[t._v("内核检测到一个系统事件，比如除零错误或子进程终止。")]),t._v(" "),n("li",[t._v("一个进程调用了 kill 函数，显式地要求内核发送一个信号给目的进程。一个进程可以发送信号给自己。")])]),t._v(" "),n("p",[n("strong",[t._v("待处理信号")])]),t._v(" "),n("p",[t._v("待处理信号是指发出但没有被接收的信号。")]),t._v(" "),n("p",[t._v("一种类型最多只会有一个待处理信号。如果一个进程已经有一个类型为 k 的待处理信号，接下来发给他的类型为 k 的信号都会直接丢弃。")]),t._v(" "),n("p",[t._v("进程可以有选择地阻塞接收某种信号。当一种信号被阻塞，它仍可以发送，但是产生的待处理信号不会被接收。")]),t._v(" "),n("p",[t._v("一个待处理信号最多只能被接收一次。内核为每个进程在 pending 位向量中维护着待处理信号的集合，在 blocked 位向量中维护着被阻塞的信号集合。")]),t._v(" "),n("p",[t._v("只要传送了一个类型为 k 的信号，内核就会设置 pending 中的第 k 位，只要接收了一个类型为 k 的信号，内核就会清除 blocked 中的第 k 位。")]),t._v(" "),n("h3",{attrs:{id:"发送信号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发送信号"}},[t._v("#")]),t._v(" 发送信号")]),t._v(" "),n("p",[t._v("Unix 系统提供了大量向进程发送信号的机制。这些机制都是基于进程组（process group）的概念。")]),t._v(" "),n("p",[t._v("进程组：每个进程都只属于一个进程组，进程组由一个正整数进程组 ID 来标识。")]),t._v(" "),n("p",[t._v("可以使用 getpgrp 函数获取当前进程的进程组 iD，可以使用 setpgid 函数改变自己或其他进程的进程组。")]),t._v(" "),n("p",[t._v("默认情况下，子进程和它的父进程同属于一个进程组。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpgrp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回调用进程的进程组 ID")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setpgid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pgid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将进程 pid 的进程组改为 pgid。若成功返回 0，错误返回 -1。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 pid=0，就表示使用当前进程的 pid，如果 pgid=0，就表示要将使用第一个参数 pid 作为进程组 ID。 ")]),t._v("\n")])])]),n("p",[n("strong",[t._v("用/bin/kill程序发送信号")])]),t._v(" "),n("p",[t._v("可以用 Linux 中的 kill 程序向另外的进程发送任意的信号。")]),t._v(" "),n("p",[t._v("正的 PID 表示发送到对应进程，负的 PID 表示发送到对应进程组中的每个进程。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("linux> /bin/kill -9 15213      # 发送信号9（SIGKILL）给进程 15213。\nlinux> /bin/kill -9 -15213     # 发送信号9（SIGKILL）给进程组 15213 中的每个进程。\n")])])]),n("p",[t._v("上面使用了完整路径，因为有些 Unix shell 有自己内置的 kill 命令。")]),t._v(" "),n("p",[n("strong",[t._v("从键盘发送信号")])]),t._v(" "),n("p",[t._v("Unix shell 使用作业这个抽象概念来表示为对一条命令行求值而创建的进程。在任何时刻，至多只有一个前台作业，后台作业可能有多个。")]),t._v(" "),n("p",[t._v("linux> ls | sort # 这会创建两个进程组成的前台作业，这两个进程通过 Unix 管道连接起来：一个进程运行 ls 程序，另一个运行 sort 程序")]),t._v(" "),n("p",[t._v("shell 为每个作业创建一个独立的进程组，进程组 ID 通常取作业中父进程中的一个。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(572),alt:"image-20220614142139742"}})]),t._v(" "),n("p",[t._v("上图是一个包含一个前台作业与两个后台作业的 shell。")]),t._v(" "),n("p",[t._v("在键盘上输入 Ctrl+C 会导致内核发送一个 SIGINT 信号到前台进程组中的每个进程，默认情况下会终止前台作业。")]),t._v(" "),n("p",[t._v("输入 Ctrl+Z 会发送一个 SIGTSTP 信号到前台进程组中的每个进程，默认情况下会停止（挂起）前台作业。")]),t._v(" "),n("p",[n("strong",[t._v("用 kill 函数发送信号")])]),t._v(" "),n("p",[t._v("进程可以通过调用 kill 函数发送信号给其他进程（包括自己）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功则返回 0，若错误则返回 -1")]),t._v("\n")])])]),n("p",[t._v("pid 取值有三种情况：")]),t._v(" "),n("ul",[n("li",[t._v("pid>0：kill 函数发送信号号码 sig 给进程 pid。")]),t._v(" "),n("li",[t._v("pid=0：kill 函数发送信号 sig 给调用进程所在进程组中的每个进程，")]),t._v(" "),n("li",[t._v("pid<0：kill 函数发送信号 sig 给进程组 | pid | (pid 的绝对值)中的每个进程。")])]),t._v(" "),n("p",[n("strong",[t._v("用 alarm 函数发送信号")])]),t._v(" "),n("p",[t._v("进程可以通过调用 alarm 函数向他自己发送 SIGALRM 信号。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alarm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回前一次闹钟剩余的描述，如果以前没有设定闹钟，就返回 0。")]),t._v("\n")])])]),n("p",[t._v("alarm 函数安排内核在 secs 秒后发送一个 SIGALRM 信号给调用进程。如果 secs=0，则不会调度安排新的闹钟。")]),t._v(" "),n("p",[t._v("在任何情况下，对 alarm 的调用都将取消任何待处理的闹钟，并返回任何待处理的闹钟在被发送前还剩下的秒数。如果没有待处理的闹钟，就返回 0。")]),t._v(" "),n("p",[n("strong",[t._v("发送信号的方法总结")])]),t._v(" "),n("ul",[n("li",[t._v("内核给进程/进程组发送信号。")]),t._v(" "),n("li",[t._v("使用 /bin/kill 程序给进程/进程组发送任意信号。")]),t._v(" "),n("li",[t._v("调用 kill 函数给进程/进程组发送任意信号。")]),t._v(" "),n("li",[t._v("进程调用 alarm 函数给自己发送 SIGALRM 信号。")]),t._v(" "),n("li",[t._v("键盘按键来发送信号。")])]),t._v(" "),n("h3",{attrs:{id:"接收信号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接收信号"}},[t._v("#")]),t._v(" 接收信号")]),t._v(" "),n("p",[t._v("当内核把进程 p 从内核模式切换到用户模式时（比如从系统调用返回），他会检查进程 p 的未被阻塞的待处理信号的集合。如果集合为空，内核就将控制传递到 p 的逻辑控制流中的下一条指令；如果集合非空，内核就选择集合中的某个信号（通常是最小的 k），并强制 p 接收信号 k。")]),t._v(" "),n("p",[t._v("进程 p 收到信号会触发 p 采取某种行为，等进程完成了这个行为，控制就传递回 p 的逻辑控制流中的下一条指令。")]),t._v(" "),n("p",[t._v("每个信号类型都有一个预定义的默认行为，是下面中的一种：")]),t._v(" "),n("ul",[n("li",[t._v("进程终止。")]),t._v(" "),n("li",[t._v("进程终止并转储内存。")]),t._v(" "),n("li",[t._v("进程停止（被挂起）直到被 SIGCONT 信号重启。")]),t._v(" "),n("li",[t._v("进程忽略该信号。")])]),t._v(" "),n("p",[t._v("进程可以通过 signal 函数修改和信号相关联的默认行为，其中 SIGSTOP 和 SIGKILL 的默认行为不能修改。")]),t._v(" "),n("p",[t._v("signal 是在 C 标准库的头文件 signal.h 中定义的。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")]),t._v("  ")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功返回指向前次处理程序的指针，若出错则返回 SIG_ERR（不设置 errno）。")]),t._v("\n")])])]),n("p",[t._v("signal 函数接受两个参数：信号值和函数指针，可以通过下列三种方法之一来改变和信号 signum 相关联的行为：")]),t._v(" "),n("ul",[n("li",[t._v("如果 handler 是 SIG_IGN，那么忽略类型为 signum 的信号。SIG_IGN 是 signal.h 中定义的一个宏。")]),t._v(" "),n("li",[t._v("如果 handler 是 SIG_DFL，那么类型为 signum 的信号行为恢复为默认行为。SIG_DEF 是 signal.h 中定义的一个宏。")]),t._v(" "),n("li",[t._v("如果 hanlder 是用户定义的函数的地址，这个函数就被称为信号处理程序。只要进程接收到一个类型为 signum 的信号，就会调用这个程序。通过把处理程序的地址传递到 signal 函数来改变默认行为，这叫做设置信号处理程序。调用信号处理程序被称作捕获信号。执行信号处理程序被称作处理信号。")])]),t._v(" "),n("p",[t._v("当处理程序执行它的 return 语句时，控制传递回控制流中进程被信号接收中断位置处的指令。")]),t._v(" "),n("p",[t._v("sigaction函数的功能是检查或修改与指定信号相关联的处理动作")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigaction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigaction")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("act"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigaction")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("oldact"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("ul",[n("li",[t._v("signum：要操作的信号。")]),t._v(" "),n("li",[t._v("act：要设置的对信号的新处理方式。")]),t._v(" "),n("li",[t._v("oldact：原来对信号的处理方式。")]),t._v(" "),n("li",[t._v("返回值：0 表示成功，-1 表示有错误发生。")])]),t._v(" "),n("p",[n("strong",[t._v("struct sigaction结构体介绍")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigaction")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sa_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sa_sigaction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("siginfo_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" sa_mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sa_flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sa_restorer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("sa_handler此参数和signal()的参数handler相同，代表新的信号处理函数。")]),t._v(" "),n("li",[t._v("sa_mask 用来设置在处理该信号时暂时将sa_mask 指定的信号集搁置。")]),t._v(" "),n("li",[t._v("sa_flags 用来设置信号处理的其他相关操作，下列的数值可用。")]),t._v(" "),n("li",[t._v("SA_RESETHAND：当调用信号处理函数时，将信号的处理函数重置为缺省值SIG_DFL。")]),t._v(" "),n("li",[t._v("SA_RESTART：如果信号中断了进程的某个系统调用，则系统自动启动该系统调用。")]),t._v(" "),n("li",[t._v("SA_NODEFER ：一般情况下， 当信号处理函数运行时，内核将阻塞该给定信号。但是如果设置了 SA_NODEFER标记， 那么在该信号处理函数运行时，内核将不会阻塞该信号。")]),t._v(" "),n("li",[t._v("SA_NOCLDSTOP：使父进程在它的子进程暂停或继续运行时不会收到 SIGCHLD 信号。")]),t._v(" "),n("li",[t._v("SA_NOCLDWAIT：使父进程在它的子进程退出时不会收到 SIGCHLD 信号，这时子进程如果退出也不会成为僵尸进程。")]),t._v(" "),n("li",[t._v("SA_SIGINFO：使用 sa_sigaction 成员而不是 sa_handler 作为信号处理函数。")])]),t._v(" "),n("p",[t._v("信号处理程序可以被其他信号处理程序中断。")]),t._v(" "),n("p",[t._v("一个信号处理程序的例子")]),t._v(" "),n("div",{staticClass:"language-css extra-class"},[n("pre",{pre:!0,attrs:{class:"language-css"}},[n("code",[n("span",{pre:!0,attrs:{class:"token selector"}},[t._v('#include "csapp"\n\nvoid sigint_handler(int sig)')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  // 定义了一个信号处理程序\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Caught SIGINT!\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("int main()")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Install the SIGINT handler */")]),t._v("\n    if "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGINT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sigint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" == SIGERR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    unix_"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"signal error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // wait for the receipt of signal\n    return 0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"阻塞和解除阻塞信号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞和解除阻塞信号"}},[t._v("#")]),t._v(" 阻塞和解除阻塞信号")]),t._v(" "),n("p",[t._v("Linux 提供两种阻塞信号的机制：")]),t._v(" "),n("ul",[n("li",[t._v("隐式阻塞机制。内核默认阻塞任何当前处理程序正在处理信号类型的待处理的信号。")]),t._v(" "),n("li",[t._v("显式阻塞机制。应用程序可以使用 sigprocmask 函数和它的辅助函数，明确地阻塞和解除阻塞选定的信号。")])]),t._v(" "),n("p",[n("strong",[t._v("sigprocmask 函数")])]),t._v(" "),n("p",[t._v("sigprocmask 函数改变当前阻塞的信号集合（blocked 位向量），具体行为依赖 how 的值：")]),t._v(" "),n("ul",[n("li",[t._v("SIG_BLOCK：把 set 中的信号添加到 blocked 中（blocked = blocked | set）。")]),t._v(" "),n("li",[t._v("SIG_UNBLOCK：从 blocked 中删除 set 中的信号（blocked = blocked & ~set)。")]),t._v(" "),n("li",[t._v("SIG_SETMASK：block = set。")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigprocmask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" how"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("oldset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果 oldset 非空，blocked 位向量之前的值保存在 oldset 中。")]),t._v(" "),n("p",[n("strong",[t._v("其他辅助函数")])]),t._v(" "),n("p",[t._v("辅助函数用来对 set 信号集合进行操作：")]),t._v(" "),n("ul",[n("li",[t._v("sigemptyset 初始化 set 为空集合；")]),t._v(" "),n("li",[t._v("sigfillset 把每个信号都添加到 set 中；")]),t._v(" "),n("li",[t._v("sigaddset 把信号 signum 添加到 set 中；")]),t._v(" "),n("li",[t._v("sigdelset 把信号 signum 从 set 中删除。如果 signum 是 set 的成员返回 1，不是返回 0。")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigemptyset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigfillset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigaddset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigdelset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("segset_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("一个临时阻塞 SIGINT 信号的例子")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev_mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigemptyset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigaddset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SIGINT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将 SIGINT 信号添加到 set 集合中")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigprocmask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIG_BLOCK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("prev_mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞 SIGINT 信号，并把之前的阻塞集合保存到 prev_mask 中。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                                         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这部分的代码不会被 SIGINT 信号所中断")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigprocmask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIG_SETMASK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("prev_mask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//恢复之前的阻塞信号，取消对 SIGINT 的阻塞")]),t._v("\n")])])]),n("h2",{attrs:{id:"_8-6-非本地跳转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-非本地跳转"}},[t._v("#")]),t._v(" 8.6 非本地跳转")]),t._v(" "),n("p",[t._v("C 语言提供了一种用户级异常控制流形式，称为非本地跳转，它将控制直接从一个函数转移到另一个当前正在执行的函数，而不需要经过正常的调用-返回序列（即 C 标准库 setjmp.h 的内容）。")]),t._v(" "),n("p",[t._v("非本地跳转通过 setjmp 和 longjmp 函数来完成")]),t._v(" "),n("p",[n("strong",[t._v("sigjmp函数")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<setjmp.h>")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c 标准库中的头文件")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 0，setjmp 的返回值不能被赋值给变量，但可以用在条件语句的测试中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigsetjmp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" savesigs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("setjmp 函数在 env 缓冲区中保存当前调用环境，以供后面的 longjmp 使用。")]),t._v(" "),n("p",[t._v("调用环境包括程序计数器、栈指针和通用目的寄存器。")]),t._v(" "),n("p",[n("strong",[t._v("longjmp函数")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("siglongjmp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("longjmp 函数从 env 缓冲区中恢复调用环境，然后触发一个从最近一次初始化 env 的 setjmp 调用的返回。然后 setjmp 返回，并带有非零的返回值 retval。")]),t._v(" "),n("p",[t._v("setjmp 和 longjmp 之间的关系比较复杂：setjmp 函数只被调用一次，但返回多次：一次是第一次调用 setjmp 将调用环境保存在 env 中时，一次是为每个相应的 longjmp 调用。而 longjmp 函数被调用一次，但从不返回。")]),t._v(" "),n("p",[n("strong",[t._v("非本地跳转的一个重要应用")]),t._v("：允许从一个深层嵌套的函数调用中立即返回，而不需要解开整个栈的基本框架，通常是由检测到某个错误情况引起的。")]),t._v(" "),n("p",[t._v("C++ 和 Java 提供的 try 语句块异常处理机制是较高层次的，是 C 语言的 setjmp 和 longjmp 函数的更加结构化的版本。可以把 throw 语句看作 longjmp 函数，catch 子句看作 setjmp 函数")]),t._v(" "),n("h2",{attrs:{id:"_8-7-操作进程的工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-操作进程的工具"}},[t._v("#")]),t._v(" 8.7 操作进程的工具")]),t._v(" "),n("p",[t._v("Linux 系统提供了大量的监控和操作进程的工具：")]),t._v(" "),n("ul",[n("li",[t._v("STRACE：打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。")]),t._v(" "),n("li",[t._v("PS：列出当前系统中的进程（包括僵死进程）。")]),t._v(" "),n("li",[t._v("TOP：打印关于当前进程资源使用的信息。")]),t._v(" "),n("li",[t._v("PMAP：显示进程的内存映射。")]),t._v(" "),n("li",[t._v("/proc：一个虚拟文件系统，以 ASCII 文本格式输出大量内核数据结构的内容，用户程序可以读取这些内容。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);