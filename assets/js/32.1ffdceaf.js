(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{1011:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"io多路复用机制详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用机制详解"}},[t._v("#")]),t._v(" IO多路复用机制详解")]),t._v(" "),n("h2",{attrs:{id:"常见的io模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见的io模型"}},[t._v("#")]),t._v(" 常见的IO模型")]),t._v(" "),n("p",[t._v("常见的网络 IO 模型分为四种：同步阻塞 IO（Blocking IO, BIO）、同步非阻塞 IO（NIO）、IO 多路复用、异步非阻塞 IO（Async IO，AIO），其中 AIO 为异步 IO，其他都是同步 IO。")]),t._v(" "),n("h3",{attrs:{id:"同步阻塞io-bio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步阻塞io-bio"}},[t._v("#")]),t._v(" 同步阻塞IO（BIO）")]),t._v(" "),n("p",[t._v("同步阻塞 IO：在线程处理过程中，如果涉及到 IO 操作，那么当前线程会被阻塞，直到 IO 处理完成，线程才接着处理后续流程。如下图，服务器针对客户端的每个 socket 都会分配一个新的线程处理，每个线程的业务处理分 2 步，当步骤 1 处理完成后遇到 IO 操作（比如：加载文件），这时候，当前线程会被阻塞，直到 IO 操作完成，线程才接着处理步骤 2。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(628),alt:"image-20230810122943271"}})]),t._v(" "),n("p",[t._v("实际场景：在 Java 中使用线程池的方式去连接数据库，使用的就是同步阻塞 IO 模型。")]),t._v(" "),n("p",[t._v("模型缺点：因为每个客户端存都需要一个新的线程，势必导致线程被频繁阻塞和切换带来开销。")]),t._v(" "),n("h3",{attrs:{id:"同步非阻塞-io-nio-new-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步非阻塞-io-nio-new-io"}},[t._v("#")]),t._v(" 同步非阻塞 IO-NIO（New IO）")]),t._v(" "),n("p",[t._v("同步非阻塞 IO：在线程处理过程中，如果涉及到 IO 操作，那么当前的线程不会被阻塞，而是会去处理其他业务代码，然后等过段时间再来查询 IO 交互是否完成。如下图：Buffer 是一个缓冲区，用来缓存读取和写入的数据；Channel 是一个通道，负责后台对接 IO 数据；而 Selector 实现的主要功能，是主动查询哪些通道是处于就绪状态。Selector 复用一个线程，来查询已就绪的通道，这样大大减少 IO 交互引起的频繁切换线程的开销。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(629),alt:"image-20230810122958500"}})]),t._v(" "),n("p",[t._v("实际场景：Java NIO 正是基于这个 IO 交互模型，来支撑业务代码实现针对 IO 进行同步非阻塞的设计，从而降低了原来传统的同步阻塞 IO 交互过程中，线程被频繁阻塞和切换带的开销。NIO使用的经典案例是 Netty 框架，Elasticsearch 底层实际上就是采用的这种机制。")]),t._v(" "),n("h3",{attrs:{id:"io-多路复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io-多路复用"}},[t._v("#")]),t._v(" IO 多路复用")]),t._v(" "),n("p",[t._v("下文会详细讲解")]),t._v(" "),n("h3",{attrs:{id:"异步非阻塞-io-aio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步非阻塞-io-aio"}},[t._v("#")]),t._v(" 异步非阻塞 IO（AIO）")]),t._v(" "),n("p",[t._v("AIO 是异步 IO 的缩写，即 Asynchronized IO。对于 AIO 来说，它不是在 IO 准备好时再通知线程，而是在 IO 操作已经完成后，再给线程发出通知。因此，AIO 是完全不会阻塞的。此时，我们的业务逻辑将变成一个回调函数，等待 IO 操作完成后，由系统自动触发。Netty5 中有使用到 AIO，但是花了大力气，Netty5  性能没能在 Netty5 上有大的飞越。")]),t._v(" "),n("h2",{attrs:{id:"什么是io多路复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是io多路复用"}},[t._v("#")]),t._v(" 什么是IO多路复用")]),t._v(" "),n("p",[t._v("在 socket 编程中[ClientIp, ClientPort, ServerIp, ServerPort, Protocol] 5 元素可以唯一标识一个 socket 连接，基于这个前提，同一个服务的某个端口 可以和 n 个客户端建立 socket 连接，可以通过下图来大致描述：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(630),alt:"image-20230810123011523"}})]),t._v(" "),n("p",[t._v("因此，每个客户端和服务器的 socket 连接就可以看做”一路“，多个客户端和该服务器的 socket 连接就是”多路“，从而，IO 多路就是多个 socket 连接上的输入输出流，复用就是多个 socket 连接上的输入输出流由一个线程处理。因此 IO 多路复用可以定义如下：")]),t._v(" "),n("p",[t._v("Linux 中的 IO 多路复用是指："),n("strong",[t._v("一个线程处理多个 IO 流")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"io多路复用的实现机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用的实现机制"}},[t._v("#")]),t._v(" IO多路复用的实现机制")]),t._v(" "),n("p",[t._v("先看下基础 socket 的模型，才能与下文 IO 多路复用机制形成对比，伪代码实现如下")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("listenSocket "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 系统调用 socket() 函数，调用创建一个主动 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给主动 socket 绑定地址和端口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将默认的主动 socket 转换为服务器使用的被动 socket（监听 socket）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环监听客户端连接请求")]),t._v("\n   connSocket "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受客户端连接，获取已连接 socket")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从客户端读取数据，只能同时处理一个客户端")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给客户端返回数据，只能同时处理一个客户端")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("实现网络通信流程如下图")]),t._v(" "),n("p",[n("img",{attrs:{src:a(631),alt:"image-20230810123024837"}})]),t._v(" "),n("p",[t._v("基础 socket 模型，能够实现服务器端和客户端之间的通信，但是程序每调用一次 accept 函数，只能处理一个客户端连接，当有大量的客户端连接时，这种模型处理性能比较差。因此 Linux 提供了高性能的 IO 多路复用机制来解决这种困境。")]),t._v(" "),n("p",[t._v("在 Linux 中，操作系统提供了 select、poll 和 epoll 三种 IO 多路复用机制。")]),t._v(" "),n("h3",{attrs:{id:"select-机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-机制"}},[t._v("#")]),t._v(" select 机制")]),t._v(" "),n("p",[t._v("select 机制中一个重要的函数是 select()，函数有 4 个入参，返回一个整数，select() 原型和参数详情如下：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n*  参数说明\n*  监听的文件描述符数量__nfds、\n*  被监听描述符的三个集合*__readfds,*__writefds和*__exceptfds\n*  监听时阻塞等待的超时时长*__timeout\n*  返回值：返回一个 socket 对应的文件描述符\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __readfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __writefds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __exceptfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("select 可以监听多少个 socket")])]),t._v(" "),n("p",[t._v("1024")]),t._v(" "),n("p",[n("strong",[t._v("select 可以监听 socket 的哪些事件")])]),t._v(" "),n("p",[t._v("select() 函数有三个 fd_set 集合，表示监听的三类事件，分别是 "),n("strong",[t._v("读数据事件")]),t._v("（readfds 集合）、"),n("strong",[t._v("写数据事件")]),t._v("（writefds 集合）和 "),n("strong",[t._v("异常事件")]),t._v("（__exceptfds 集合），当集合为 NULL 时，代表不需要处理对应的事件。")]),t._v(" "),n("p",[n("strong",[t._v("select 如何感知已就绪的 fd")])]),t._v(" "),n("p",[t._v("需要遍历 fd 集合，才能找到就绪的描述符。")]),t._v(" "),n("p",[n("strong",[t._v("select 机制如何实现网络通信")])]),t._v(" "),n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 socket 和已连接 socket 的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在socket 上进行监听，将 socket 转为监听 socket")]),t._v("\n\nfd_set rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被监听的描述符集合，关注描述符上的读事件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 rset 数组，使用 FD_ZERO 宏设置每个元素为 0 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 FD_SET 宏设置 rset 数组中位置为 sock_fd 的文件描述符为 1，表示需要监听该文件描述符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置超时时间 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_sec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_usec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 select 函数，检测 rset 数组保存的文件描述符是否已有读事件就绪，返回就绪的文件描述符个数")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_fd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 FD_ISSET 宏，在 rset 数组中检测 sock_fd 对应的文件描述符是否就绪")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 sock_fd 已经就绪，表明已有客户端连接；调用 accept 函数建立连接")]),t._v("\n       conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 rset 数组中位置为 conn_fd 的文件描述符为 1，表示需要监听该文件描述符")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次检查已连接套接字的文件描述符")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 FD_ISSET 宏，在 rset 数组中检测文件描述符是否就绪")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有数据可读，进行读数据处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("select 实现网络通信流程如下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(632),alt:"image-20230810123050448"}})]),t._v(" "),n("p",[n("strong",[t._v("select 函数存在的不足")])]),t._v(" "),n("p",[t._v("首先，select() 函数对单个进程能监听的文件描述符数量是有限制的，它能监听的文件描述符个数由 __FD_SETSIZE 决定，默认值是 1024。")]),t._v(" "),n("p",[t._v("其次，当 select 函数返回后，需要遍历描述符集合，才能找到就绪的描述符。这个遍历过程会产生一定开销，从而降低程序的性能。")]),t._v(" "),n("h3",{attrs:{id:"poll-机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poll-机制"}},[t._v("#")]),t._v(" poll 机制")]),t._v(" "),n("p",[t._v("poll 机制的主要函数是 poll() 函数，poll() 函数原型定义：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* 参数 *__fds 是 pollfd 结构体数组，pollfd 结构体里包含了要监听的描述符，以及该描述符上要监听的事件类型\n* 参数 __nfds 表示的是 *__fds 数组的元素个数\n*  __timeout 表示 poll 函数阻塞的超时时间\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nfds_t")]),t._v(" __nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("pollfd结构体的定义")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行监听的文件描述符")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的事件类型")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" revents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \t \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际发生的事件类型")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("pollfd 结构体中包含了三个成员变量 fd、events 和 revents，分别表示要监听的文件描述符、要监听的事件类型和实际发生的事件类型。")]),t._v(" "),n("p",[n("strong",[t._v("poll 可以监听多少个 socket")])]),t._v(" "),n("p",[t._v("自定义，但是需要系统能够承受")]),t._v(" "),n("p",[n("strong",[t._v("poll 可以监听 socket 里面的哪些事件")])]),t._v(" "),n("p",[t._v("pollfd 结构体中要监听和实际发生的事件类型，是通过以下三个宏定义来表示的，分别是 POLLRDNORM、POLLWRNORM 和 POLLERR，它们分别表示可读、可写和错误事件。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLRDNORM")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x040")]),t._v("  \t\t")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可读事件")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLWRNORM")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x100")]),t._v("  \t\t")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可写事件")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLERR")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x008")]),t._v("     \t\t")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误事件")])]),t._v("\n")])])]),n("p",[n("strong",[t._v("poll 如何获取已就绪 fd")])]),t._v(" "),n("p",[t._v("和 select 差不多，需要遍历 fd 集合，才能找到就绪的描述符。")]),t._v(" "),n("p",[n("strong",[t._v("poll 机制如何实现网络通信")])]),t._v(" "),n("p",[t._v("poll 实现代码")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听套接字和已连接套接字的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建套接字")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定套接字")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在套接字上进行监听，将套接字转为监听套接字")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll 函数可以监听的文件描述符数量，可以大于 1024")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAX_OPEN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollfd 结构体数组，对应文件描述符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将创建的监听套接字加入 pollfd 数组，并监听其可读事件")]),t._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nmaxfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 client 数组其他元素为-1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 poll 函数，检测 client 数组里的文件描述符是否有就绪的，返回就绪的文件描述符个数")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxfd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果监听套件字的文件描述符有可读事件，则进行处理")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有客户端连接；调用 accept 函数建立连接")]),t._v("\n       conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存已建立连接套接字")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将已建立连接的文件描述符保存到client数组")]),t._v("\n           client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该文件描述符监听可读事件")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       maxfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次检查已连接套接字的文件描述符")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("POLLRDNORM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" POLLERR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有数据可读或发生错误，进行读数据处理或错误处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("poll 机制解决了 select 的单个进程最大只能监听 1024 个 socket 的限制，但是并没有解决轮询获取就绪 fd 的问题。")]),t._v(" "),n("h3",{attrs:{id:"epoll-机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-机制"}},[t._v("#")]),t._v(" epoll 机制")]),t._v(" "),n("p",[t._v("epoll 是 2.6 内核中提出，使用 epoll_event 结构体来记录待监听的 fd 及其监听的事件类型的。")]),t._v(" "),n("p",[t._v("epoll_event 结构体以及 epoll_data 结构体的定义")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" epoll_data\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录文件描述符")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_data_t")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// epoll 监听的事件类型")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_data_t")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应用程序数据")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("epoll 的接口比较简单，一共有三个函数：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("创建一个 epoll 的句柄，size 用来告诉内核这个监听的数目一共有多大。epoll 实例内部维护了两个结构，分别是记录要监听的 fd 和已经就绪的 fd，而对于已经就绪的文件描述符来说，它们会被返回给用户程序进行处理。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("epoll 的事件注册函数，epoll_ctl 向 epoll 对象中添加、修改或者删除感兴趣的事件，成功返回 0，否则返回 –1。此时需要根据 errno 错误码判断错误类型。它不同于 select() 是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。epoll_wait 方法返回的事件必然是通过 epoll_ctl 添加到 epoll 中的。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("等待事件的产生，类似于 select() 调用。参数 events 用来从内核得到事件的集合，maxevents 是 events 集合的大小，且不大于 epoll_create() 时的 size，参数 timeout 是超时时间（毫秒，0 会立即返回，-1 将不确定或永久阻塞）。函数返回需要处理的事件数目，返回 0 表示已超时，返回 –1 表示错误，需要检查 errno 错误码判断错误类型。")]),t._v(" "),n("p",[n("strong",[t._v("关于 epoll 的 ET 和 LT 两种工作模式")])]),t._v(" "),n("p",[t._v("epoll 有两种工作模式："),n("strong",[t._v("水平触发（level trigger, LT）模式")]),t._v(" 和 "),n("strong",[t._v("边缘触发（edge trigger, ET）模式")]),t._v("。")]),t._v(" "),n("ul",[n("li",[t._v("LT 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用 epoll_wait 时，会再次响应应用程序并通知此事件。")]),t._v(" "),n("li",[t._v("ET 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用 epoll_wait 时，不会再次响应应用程序并通知此事件。")])]),t._v(" "),n("p",[n("strong",[t._v("epoll 可以监听多少个 socket")])]),t._v(" "),n("p",[t._v("自定义，但是需要系统能够承受")]),t._v(" "),n("p",[n("strong",[t._v("epoll 如何获取已就绪 fd")])]),t._v(" "),n("p",[t._v("epoll 实例内部维护了两个结构，分别是记录要监听的 fd 和已经就绪的 fd，可以监听就绪的 fd。通过 poll 机制让上层能直接告诉底层，我这个 fd 一旦读写就绪了，请底层硬件（比如网卡）回调的时候自动把这个 fd 相关的结构体放到指定队列中，并且唤醒操作系统。")]),t._v(" "),n("p",[n("strong",[t._v("epoll 如何实现网络通信")])]),t._v(" "),n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 socket 和已连接 socket 的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建主动 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 socket 进行监听，将 socket 转为监听 socket")]),t._v("\n    \nepfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll 实例，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll_event 结构体数组，保存 socket 对应文件描述符和监听事件类型")]),t._v("\nep_events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epoll_event"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epoll_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll_event 变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" ee\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听读事件")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EPOLLIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听的文件描述符是刚创建的监听 socket")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将监听 socket 加入到监听列表中    ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_CTL_ADD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待返回已经就绪的描述符 ")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ep_events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有就绪的描述符     ")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是监听 socket 描述符就绪，表明有一个新客户端连接到来 ")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ep_events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n          conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 accept() 建立连接")]),t._v("\n          ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EPOLLIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n          ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加对新创建的已连接 socket 描述符的监听，监听后续在已连接 socket 上的读事件      ")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_CTL_ADD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n                \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是已连接 socket 描述符就绪，则可以读数据")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取数据并处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("epoll 进行网络通信的流程如下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(633),alt:"image-20230810123103807"}})]),t._v(" "),n("p",[t._v("epllo 实现网络通信")]),t._v(" "),n("p",[n("strong",[t._v("三者的差异")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("IO多路复用机制")]),t._v(" "),n("th",[t._v("监听文件描述符最大限制")]),t._v(" "),n("th",[t._v("如何查找就绪的文件描述符")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("select")]),t._v(" "),n("td",[t._v("1024")]),t._v(" "),n("td",[t._v("遍历文件描述符集合")])]),t._v(" "),n("tr",[n("td",[t._v("poll")]),t._v(" "),n("td",[t._v("自定义")]),t._v(" "),n("td",[t._v("遍历文件描述符集合")])]),t._v(" "),n("tr",[n("td",[t._v("epoll")]),t._v(" "),n("td",[t._v("自定义")]),t._v(" "),n("td",[t._v("epoll_wait返回就绪的文件描述符")])])])]),t._v(" "),n("h2",{attrs:{id:"使用io多路复用的技术框架"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用io多路复用的技术框架"}},[t._v("#")]),t._v(" 使用IO多路复用的技术框架")]),t._v(" "),n("p",[n("strong",[t._v("Redis")]),t._v("：Redis 的 ae_select.c 和 ae_epoll.c 文件，就分别使用了 select 和 epoll 这两种机制，实现 IO 多路复用；")]),t._v(" "),n("p",[n("strong",[t._v("Nginx")]),t._v("：Nginx 支持 epoll、select、kqueue 等不同操作系统下的各种 IO 多路复用方式；Nginx 是通过 ET 模式使用 epoll。")]),t._v(" "),n("p",[n("strong",[t._v("Reactor框架")]),t._v("：无论 C++ 还是 Java，在高性能的网络编程框架的编写上，大多数都是基于 Reactor 模式，其中最为典型的便是 Java 的 Netty 框架，而 Reactor 模式是基于 IO 多路复用的。")])])}),[],!1,null,null,null);s.default=e.exports},628:function(t,s,a){t.exports=a.p+"assets/img/image-20230810122943271.c8f98bb4.png"},629:function(t,s,a){t.exports=a.p+"assets/img/image-20230810122958500.b0967932.png"},630:function(t,s,a){t.exports=a.p+"assets/img/image-20230810123011523.113fa8bb.png"},631:function(t,s,a){t.exports=a.p+"assets/img/image-20230810123024837.d087a43a.png"},632:function(t,s,a){t.exports=a.p+"assets/img/image-20230810123050448.ef706407.png"},633:function(t,s,a){t.exports=a.p+"assets/img/image-20230810123103807.6d82c4c5.png"}}]);