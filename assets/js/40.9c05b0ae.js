(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{1099:function(_,v,t){"use strict";t.r(v);var s=t(14),r=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h1",{attrs:{id:"第1章-软件工程概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第1章-软件工程概述"}},[_._v("#")]),_._v(" 第1章 软件工程概述")]),_._v(" "),s("h2",{attrs:{id:"_1-1-软件危机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-软件危机"}},[_._v("#")]),_._v(" 1.1 软件危机")]),_._v(" "),s("p",[s("strong",[_._v("软件危机：软件开发和维护中出现的一系列问题")]),_._v("。软件工程的出现主要是由于软件危机的出现。")]),_._v(" "),s("p",[_._v("软件危机的表现：")]),_._v(" "),s("ul",[s("li",[_._v("成本和进度难以掌握（时间和金钱）")]),_._v(" "),s("li",[_._v("对用户需求了解模糊，用户对软件不满意（用户要求）")]),_._v(" "),s("li",[_._v("质量不可靠（可靠性）")]),_._v(" "),s("li",[_._v("不可维护（维护性）")])]),_._v(" "),s("p",[_._v("造成软件危机的原因：管理和控制软件开发过程相当困难；开发和维护方法不准确。")]),_._v(" "),s("h2",{attrs:{id:"_1-2-软件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-软件"}},[_._v("#")]),_._v(" 1.2 软件")]),_._v(" "),s("div",{staticStyle:{color:"red"}},[s("p",[s("strong",[_._v("软件 = 程序 + 数据 + 文档")])])]),s("p",[_._v("按软件的 "),s("strong",[_._v("功能")]),_._v(" 进行划分，软件可以划分为 "),s("strong",[_._v("系统软件、支撑软件、应用软件")]),_._v("。")]),_._v(" "),s("p",[s("strong",[_._v("软件的复杂性是固有的")]),_._v("，它引起人员通信困难、开发费用超支、开发时间超时等问题。")]),_._v(" "),s("h2",{attrs:{id:"_1-3-软件工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-软件工程"}},[_._v("#")]),_._v(" 1.3 软件工程")]),_._v(" "),s("p",[s("strong",[_._v("软件工程")]),_._v("：开发、运行、维护和修复软件的系统方法；是研究软件生产的一门学科。")]),_._v(" "),s("p",[s("strong",[_._v("软件工程方法学")]),_._v("：把软件在生命周期全过程中使用的一整套技术的集合，称为软件工程方法学（范型）。")]),_._v(" "),s("p",[_._v("软件工程方法学的基本要素包括："),s("strong",[_._v("方法、工具和过程")]),_._v("。")]),_._v(" "),s("p",[s("strong",[_._v("传统方法学和面向对象方法学")]),_._v(" 是目前适用的最广泛的两种软件工程方法学。")]),_._v(" "),s("p",[_._v("软件工程方法学的目的是：使软件生产规范化和工程化。"),s("strong",[_._v("软件工程方法得以实施的主要保证是软件开发工具和软件开发的环境")]),_._v("。")]),_._v(" "),s("p",[_._v("面向对象方法学与传统方法学的对比：传统方法学强调 "),s("strong",[_._v("自顶向下、逐层分解、顺序开发")]),_._v("；面向对象方法学强调 "),s("strong",[_._v("主动地多次反复迭代地开发")]),_._v("，保证了在各项开发活动之间的平滑过渡。")]),_._v(" "),s("p",[_._v("面向对象方法学的优点：降低了软件产品的复杂性；提高了软件的可理解性；简化了软件的开发和维护工作；提高了软件的可重用性。")]),_._v(" "),s("h2",{attrs:{id:"_1-4-软件生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-软件生命周期"}},[_._v("#")]),_._v(" 1.4 软件生命周期")]),_._v(" "),s("p",[_._v("软件生命周期：软件产品或系统从设计、投入使用到被淘汰的全过程。")]),_._v(" "),s("p",[s("strong",[_._v("软件生命周期由软件定义、软件开发和软件维护三个时期组成")]),_._v("，每个时期又可进一步划分成若干阶段。")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("软件定义")]),_._v("：软件定义时期通常进一步划分成 3 个阶段，即 "),s("strong",[_._v("问题定义")]),_._v("、"),s("strong",[_._v("可行性研究")]),_._v(" 和 "),s("strong",[_._v("需求分析")]),_._v("。需求分析中开发人员要从用户那里了解软件 “做什么”，需求分析是软件开发工作的基础。")]),_._v(" "),s("li",[s("strong",[_._v("软件开发")]),_._v("："),s("strong",[_._v("总体设计、详细设计、编码和单元测试、综合测试")]),_._v("。其中前两个阶段又称为系统设计，后两个阶段又称为系统实现。")]),_._v(" "),s("li",[s("strong",[_._v("运行和维护（软件维护）")])])]),_._v(" "),s("h2",{attrs:{id:"_1-5-软件生命周期模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-软件生命周期模型"}},[_._v("#")]),_._v(" 1.5 软件生命周期模型")]),_._v(" "),s("h3",{attrs:{id:"瀑布模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#瀑布模型"}},[_._v("#")]),_._v(" 瀑布模型")]),_._v(" "),s("p",[_._v("将软件生存周期的各项活动规定为 "),s("strong",[_._v("依照固定顺序连接")]),_._v(" 的若干阶段性工作，形如瀑布流水，最终得到软件产品。传统的瀑布模型没有反馈环。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(897),alt:"image-20240120223941731"}})]),_._v(" "),s("p",[s("strong",[_._v("特点")]),_._v("：阶段间具有具有顺序性和依赖性；推迟实现；质量保证。")]),_._v(" "),s("p",[s("strong",[_._v("适用于")]),_._v("：需求是预知的；软件实现方法是成熟的；项目周期较短。")]),_._v(" "),s("h3",{attrs:{id:"快速原型模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速原型模型"}},[_._v("#")]),_._v(" 快速原型模型")]),_._v(" "),s("p",[s("strong",[_._v("快速原型")]),_._v(" 是 "),s("strong",[_._v("快速")]),_._v(" 建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(898),alt:"image-20240120224128167"}})]),_._v(" "),s("p",[s("strong",[_._v("特点")]),_._v("：快速原型模型 "),s("strong",[_._v("不带反馈环")]),_._v("，软件产品的开发基本上是 "),s("strong",[_._v("线性顺序")]),_._v(" 进行的。")]),_._v(" "),s("h3",{attrs:{id:"增量模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增量模型"}},[_._v("#")]),_._v(" 增量模型")]),_._v(" "),s("p",[_._v("增量模型将项目划分为多个小的 "),s("strong",[_._v("增量")]),_._v(" 部分，每个增量都是一个可交付的、完整的功能子集。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(899),alt:"image-20240121130143133"}})]),_._v(" "),s("p",[s("strong",[_._v("特点")]),_._v("：在每个增量中，团队可以按照优先级完成必要的功能和特性。这种方法可以让团队 "),s("strong",[_._v("快速交付部分功能")]),_._v("，并在后续增量中逐步完善和改进。")]),_._v(" "),s("p",[s("strong",[_._v("适用于")]),_._v("：对于 "),s("strong",[_._v("紧迫的项目交付需求")]),_._v(" 和 "),s("strong",[_._v("并行开发")]),_._v(" 的情况，增量模型可以帮助团队以迅速且可控的方式进行开发，并及时满足客户的要求。")]),_._v(" "),s("h3",{attrs:{id:"螺旋模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#螺旋模型"}},[_._v("#")]),_._v(" 螺旋模型")]),_._v(" "),s("p",[_._v("螺旋模型的基本思想是 "),s("strong",[_._v("使用原型及其他方法")]),_._v(" 来尽量 "),s("strong",[_._v("降低风险")]),_._v("。把它看作 "),s("strong",[_._v("在每个阶段之前都增加了风险分析过程")]),_._v(" 的 "),s("strong",[_._v("快速原型模型")]),_._v("。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(900),alt:"image-20240120224358847"}})]),_._v(" "),s("h3",{attrs:{id:"喷泉模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#喷泉模型"}},[_._v("#")]),_._v(" 喷泉模型")]),_._v(" "),s("p",[_._v("喷泉模型是典型的 "),s("strong",[_._v("面向对象")]),_._v(" 生命周期模型。 “喷泉”这个词体现了面向对象软件开发过程 "),s("strong",[_._v("迭代")]),_._v(" 和 "),s("strong",[_._v("无缝")]),_._v(" 的特性。")]),_._v(" "),s("ul",[s("li",[_._v("迭代性指系统某个部分常常重复工作多次，相关功能在每次迭代中随之加入演化的系统，即求精的一个过程。")]),_._v(" "),s("li",[_._v("无间隙是指在分析、设计和实现等开发活动之间不存在明显的边界。")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(901),alt:"image-20240126223646540"}})]),_._v(" "),s("p",[s("strong",[_._v("适用于")]),_._v("：面向对象的软件开发过程。")]),_._v(" "),s("h2",{attrs:{id:"_1-6-新型软件生命周期模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-新型软件生命周期模型"}},[_._v("#")]),_._v(" 1.6 新型软件生命周期模型")]),_._v(" "),s("h3",{attrs:{id:"敏捷开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#敏捷开发"}},[_._v("#")]),_._v(" 敏捷开发")]),_._v(" "),s("p",[s("strong",[_._v("定义")]),_._v("：敏捷方法的主要特点就是具有快速及灵活的响应变更的能力。")]),_._v(" "),s("p",[_._v("敏捷开发是一种 "),s("strong",[_._v("以人为核心、迭代、循序渐进")]),_._v(" 的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。")]),_._v(" "),s("p",[_._v("敏捷方法很多，包括极限编程（XP）、Scrum、功能驱动开发（FDD）、水晶、净室开发等多种方法，这些方法本质实际上是一样的，都遵循“敏捷宣言”原则。")]),_._v(" "),s("div",{staticClass:"anchor",attrs:{id:"极限编程"}},[_._v("极限编程")]),s("p",[_._v("极限编程（eXtreme Programming）是一种轻量级的软件开发方法，是一种以实践为基础的软件工程过程和思想。")]),_._v(" "),s("p",[_._v("极限编程注重高度灵活性和快速响应变化的能力。它通过迭代开发、持续交付和频繁反馈的方式，使团队能够适应需求变化，并在项目进展中及时调整。")]),_._v(" "),s("h2",{attrs:{id:"_1-7-软件质量与生产率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-软件质量与生产率"}},[_._v("#")]),_._v(" 1.7 软件质量与生产率")]),_._v(" "),s("p",[_._v("质量第一，生产率第二。高质量对所有用户都有价值，而高生产率只对开发方有意义；软件的质量因素一般倾向于：可维护性、可靠性、可理解性和效率。")])])}),[],!1,null,null,null);v.default=r.exports},897:function(_,v,t){_.exports=t.p+"assets/img/image-20240120223941731.7f839218.png"},898:function(_,v,t){_.exports=t.p+"assets/img/image-20240120224128167.842c416f.png"},899:function(_,v,t){_.exports=t.p+"assets/img/image-20240121130143133.42047fd8.png"},900:function(_,v,t){_.exports=t.p+"assets/img/image-20240120224358847.efb4317e.png"},901:function(_,v,t){_.exports=t.p+"assets/img/image-20240126223646540.4ab9406d.png"}}]);