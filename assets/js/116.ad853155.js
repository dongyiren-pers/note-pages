(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{1009:function(t,a,v){"use strict";v.r(a);var s=v(14),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"第1章-理论基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第1章-理论基础"}},[t._v("#")]),t._v(" 第1章 理论基础")]),t._v(" "),v("h2",{attrs:{id:"_1-1-什么是分布式系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是分布式系统"}},[t._v("#")]),t._v(" 1.1 什么是分布式系统")]),t._v(" "),v("p",[t._v("一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。")]),t._v(" "),v("h2",{attrs:{id:"_1-2-分布式系统理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-分布式系统理论"}},[t._v("#")]),t._v(" 1.2 分布式系统理论")]),t._v(" "),v("h3",{attrs:{id:"cap-理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cap-理论"}},[t._v("#")]),t._v(" CAP 理论")]),t._v(" "),v("p",[t._v("其中 "),v("strong",[t._v("C")]),t._v(" 代表 "),v("strong",[t._v("一致性（Consistency）")]),t._v("，"),v("strong",[t._v("A")]),t._v(" 代表 "),v("strong",[t._v("可用性（Availability）")]),t._v("，"),v("strong",[t._v("P")]),t._v(" 代表 "),v("strong",[t._v("分区容错性 （Partition tolerance）")]),t._v("。CAP 理论告诉我们 C、A、P 三者不能同时满足，最多只能满足其中两个。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("一致性 （Consistency）")]),t._v("：一致性，指数据在多个副本之间能够保持一致的特性（严格的一致性）。")]),t._v(" "),v("li",[v("strong",[t._v("可用性 （Availability）")]),t._v("：指系统提供的服务必须一直处于可用的状态，每次请求都获取到非错的响应，但是不保证获取的数据为最新数据。")]),t._v(" "),v("li",[v("strong",[t._v("分区容错性 （Partition tolerance）")]),t._v("：分布式系统在遇到任何网络分区故障的时候，仍然够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障。")])]),t._v(" "),v("h3",{attrs:{id:"对-cap-理论的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对-cap-理论的理解"}},[t._v("#")]),t._v(" 对 CAP 理论的理解")]),t._v(" "),v("p",[t._v("理解 CAP 理论最简单的方式是想象两个副本处于分区两侧，即两个副本之间的网络断开，不能通信。")]),t._v(" "),v("ul",[v("li",[t._v("如果允许其中一个副本更新，则会导致数据不一致，即丧失了 C 性质。")]),t._v(" "),v("li",[t._v("如果为了保证一致性，将分区某一侧的副本设置为不可用，那么又丧失了 A 性质。")]),t._v(" "),v("li",[t._v("除非两个副本可以互相通信，才能既保证 C 又保证 A，这又会导致丧失 P 性质。")])]),t._v(" "),v("p",[t._v("使用网络通信的分布式系统，无法舍弃 P 性质，那么就只能在一致性和可用性上做一个艰难的选择。")]),t._v(" "),v("h3",{attrs:{id:"base-理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#base-理论"}},[t._v("#")]),t._v(" BASE 理论")]),t._v(" "),v("p",[t._v("BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP 的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。")]),t._v(" "),v("p",[t._v("BASE 是基本可用（Basically Available）、软状态（Soft state）、最终一致性（Eventually consistent）的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("基本可用（Basically Available）")]),t._v("：分布式系统在出现不可预知故障的时候，允许损失部分可用性。")]),t._v(" "),v("li",[v("strong",[t._v("软状态（Soft state）")]),t._v("：和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。")]),t._v(" "),v("li",[v("strong",[t._v("最终一致性（Eventually consistent）")]),t._v("：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);