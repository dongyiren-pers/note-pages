(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{1025:function(t,a,s){"use strict";s.r(a);var r=s(14),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#基础"}},[t._v("基础")]),r("ul",[r("li",[r("a",{attrs:{href:"#string、stringbuffer、stringbuilder-的区别"}},[t._v("String、StringBuffer、StringBuilder 的区别")])]),r("li",[r("a",{attrs:{href:"#接口与抽象类的区别"}},[t._v("接口与抽象类的区别")])]),r("li",[r("a",{attrs:{href:"#如何通过反射获取-class-对象"}},[t._v("如何通过反射获取 Class 对象")])]),r("li",[r("a",{attrs:{href:"#jdk-动态代理与-cglib-动态代理的区别"}},[t._v("JDK 动态代理与 CGLib 动态代理的区别")])]),r("li",[r("a",{attrs:{href:"#arrays-sort-方法里的排序算法"}},[t._v("Arrays.sort 方法里的排序算法")])])])]),r("li",[r("a",{attrs:{href:"#java-集合"}},[t._v("Java 集合")]),r("ul",[r("li",[r("a",{attrs:{href:"#fail-fast-和-fail-safe-策略"}},[t._v("fail-fast 和 fail-safe 策略")])]),r("li",[r("a",{attrs:{href:"#hashmap-的扩容机制"}},[t._v("HashMap 的扩容机制")])])])]),r("li",[r("a",{attrs:{href:"#java-并发"}},[t._v("Java 并发")]),r("ul",[r("li",[r("a",{attrs:{href:"#写一个必定发生死锁的代码"}},[t._v("写一个必定发生死锁的代码")])]),r("li",[r("a",{attrs:{href:"#synchronized-锁升级"}},[t._v("synchronized 锁升级")])]),r("li",[r("a",{attrs:{href:"#volatile-的功能和实现原理"}},[t._v("volatile 的功能和实现原理")])]),r("li",[r("a",{attrs:{href:"#volatile-和-synchronized-区别"}},[t._v("volatile 和 synchronized 区别")])]),r("li",[r("a",{attrs:{href:"#什么是-aqs"}},[t._v("什么是 AQS")])]),r("li",[r("a",{attrs:{href:"#公平锁与非公平锁的区别"}},[t._v("公平锁与非公平锁的区别")])]),r("li",[r("a",{attrs:{href:"#concurrenthashmap-的-put-方法"}},[t._v("ConcurrentHashMap 的 put 方法")])]),r("li",[r("a",{attrs:{href:"#线程池的工作原理"}},[t._v("线程池的工作原理")])]),r("li",[r("a",{attrs:{href:"#如何合理设置线程池的核心线程数"}},[t._v("如何合理设置线程池的核心线程数")])])])]),r("li",[r("a",{attrs:{href:"#jvm"}},[t._v("JVM")]),r("ul",[r("li",[r("a",{attrs:{href:"#类的加载过程"}},[t._v("类的加载过程")])]),r("li",[r("a",{attrs:{href:"#双亲委派机制"}},[t._v("双亲委派机制")])]),r("li",[r("a",{attrs:{href:"#jvm-内存结构"}},[t._v("JVM 内存结构")])]),r("li",[r("a",{attrs:{href:"#如何判断对象是否可被回收"}},[t._v("如何判断对象是否可被回收")])]),r("li",[r("a",{attrs:{href:"#垃圾回收算法"}},[t._v("垃圾回收算法")])]),r("li",[r("a",{attrs:{href:"#新生代对象何时进入老年代"}},[t._v("新生代对象何时进入老年代")])]),r("li",[r("a",{attrs:{href:"#什么情况下会触发-full-gc"}},[t._v("什么情况下会触发 Full GC")])]),r("li",[r("a",{attrs:{href:"#oom-场景及解决方案"}},[t._v("OOM 场景及解决方案")])]),r("li",[r("a",{attrs:{href:"#线上-cpu-飙升-100-问题排查"}},[t._v("线上 CPU 飙升 100% 问题排查")])])])])])]),r("p"),t._v(" "),r("h2",{attrs:{id:"基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),r("h3",{attrs:{id:"string、stringbuffer、stringbuilder-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer、stringbuilder-的区别"}},[t._v("#")]),t._v(" String、StringBuffer、StringBuilder 的区别")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里")])],1),r("style",[t._v("\n                        .table-column-x-x-container-v3yqnqx5 table th:nth-of-type(1) {\n                            width: 18.181818181818183%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-v3yqnqx5 table th:nth-of-type(2) {\n                            width: 27.27272727272727%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-v3yqnqx5 table th:nth-of-type(3) {\n                            width: 27.27272727272727%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-v3yqnqx5 table th:nth-of-type(4) {\n                            width: 27.27272727272727%;\n                            word-wrap: break-word;\n                        }\n                    ")]),r("div",{staticClass:"table-column-x-x-container-v3yqnqx5"},[r("table",[r("thead",[r("tr",[r("th",[t._v("类型")]),t._v(" "),r("th",[t._v("String")]),t._v(" "),r("th",[t._v("StringBuilder")]),t._v(" "),r("th",[t._v("StringBuilder")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("线程是否安全")]),t._v(" "),r("td",[t._v("线程安全")]),t._v(" "),r("td",[t._v("线程安全")]),t._v(" "),r("td",[r("strong",[t._v("线程不安全")])])]),t._v(" "),r("tr",[r("td",[t._v("线程安全原因")]),t._v(" "),r("td",[r("strong",[t._v("不可变序列")])]),t._v(" "),r("td",[r("strong",[t._v("synchronized 方法")])]),t._v(" "),r("td",[t._v("—")])]),t._v(" "),r("tr",[r("td",[t._v("拼接性能")]),t._v(" "),r("td",[t._v("最慢")]),t._v(" "),r("td",[t._v("较快")]),t._v(" "),r("td",[t._v("最快")])]),t._v(" "),r("tr",[r("td",[t._v("性能影响因素")]),t._v(" "),r("td",[t._v("一旦创建不可修改，需要不断创建新对象并将旧对象回收")]),t._v(" "),r("td",[t._v("JDK 6 之前无差别使用重量级锁，CPU 需频繁切换用户态和内核态")]),t._v(" "),r("td",[t._v("—")])]),t._v(" "),r("tr",[r("td",[t._v("实现接口")]),t._v(" "),r("td",[t._v("Comparable"),r("br"),t._v("CharSequence")]),t._v(" "),r("td",[t._v("Appendable"),r("br"),t._v("CharSequence")]),t._v(" "),r("td",[t._v("Appendable"),r("br"),t._v("CharSequence")])]),t._v(" "),r("tr",[r("td",[t._v("适用场景")]),t._v(" "),r("td",[t._v("少量字符串操作")]),t._v(" "),r("td",[r("strong",[t._v("多线程")]),t._v("，在字符缓冲区进行大量操作")]),t._v(" "),r("td",[r("strong",[t._v("单线程")]),t._v("，在字符缓冲区进行大量操作")])])])])]),r("h3",{attrs:{id:"接口与抽象类的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口与抽象类的区别"}},[t._v("#")]),t._v(" 接口与抽象类的区别")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里")])],1),r("style",[t._v("\n                        .table-column-x-x-container-f7pvq3ns table th:nth-of-type(1) {\n                            width: 20%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-f7pvq3ns table th:nth-of-type(2) {\n                            width: 40%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-f7pvq3ns table th:nth-of-type(3) {\n                            width: 40%;\n                            word-wrap: break-word;\n                        }\n                    ")]),r("div",{staticClass:"table-column-x-x-container-f7pvq3ns"},[r("table",[r("thead",[r("tr",[r("th"),t._v(" "),r("th",[t._v("接口")]),t._v(" "),r("th",[t._v("抽象类")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("方法的实现")]),t._v(" "),r("td",[t._v("JDK 8 之后允许有静态和默认实现")]),t._v(" "),r("td",[t._v("允许有实现")])]),t._v(" "),r("tr",[r("td",[t._v("方法访问限定")]),t._v(" "),r("td",[t._v("默认且只能为 public")]),t._v(" "),r("td",[t._v("可以为 public、protected 和 default")])]),t._v(" "),r("tr",[r("td",[t._v("成员变量类型")]),t._v(" "),r("td",[t._v("只能有 public static final 成员变量")]),t._v(" "),r("td",[t._v("可以有普通成员变量")])]),t._v(" "),r("tr",[r("td",[t._v("继承或实现机制")]),t._v(" "),r("td",[t._v("一个接口可以继承多个接口"),r("br"),t._v("一个类可以实现多个接口")]),t._v(" "),r("td",[t._v("一个类只能继承一个抽象类")])]),t._v(" "),r("tr",[r("td",[t._v("设计层面")]),t._v(" "),r("td",[t._v("对行为的抽象，是一种行为的规范")]),t._v(" "),r("td",[t._v("对类的抽象，是一种模板设计")])])])])]),r("h3",{attrs:{id:"如何通过反射获取-class-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何通过反射获取-class-对象"}},[t._v("#")]),t._v(" 如何通过反射获取 Class 对象")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里")])],1),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/java/5ddf7a/#getclass-方法"}},[r("strong",[t._v("getClass 方法")])]),t._v("：Object 类的 getClass() 方法返回一个 Class 对象。")],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/java/5ddf7a/#forname-方法"}},[r("strong",[t._v("forName 方法")])]),t._v("：Class 类的静态方法 forName(className) 返回类名对应的 Class 对象。")],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/java/5ddf7a/#t-class"}},[r("strong",[t._v("T.class")])]),t._v("：如果 T 是任意的 Java 类型，T.class 代表匹配的 Class 对象。")],1)]),t._v(" "),r("h3",{attrs:{id:"jdk-动态代理与-cglib-动态代理的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdk-动态代理与-cglib-动态代理的区别"}},[t._v("#")]),t._v(" JDK 动态代理与 CGLib 动态代理的区别")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里飞猪")])],1),r("p",[r("strong",[t._v("实现机制不同")])]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/java/5ddf7a/#jdk-动态代理"}},[r("strong",[t._v("JDK 动态代理")])]),t._v("：委托机制。Proxy 通过 "),r("strong",[t._v("反射机制")]),t._v(" 动态创建代理类实例。代理类和目标类实现了同样的接口，InvocationHandler 持有目标类对象，代理类委托 InvocationHandler 去调用目标类的原始方法。")],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/java/5ddf7a/#cglib-动态代理"}},[r("strong",[t._v("CGLib 动态代理")])]),t._v("：继承机制。Enhancer 通过 "),r("strong",[t._v("字节码技术")]),t._v(" 动态创建代理类实例。代理类继承了目标类并重写了目标方法，通过 MethodInterceptor 调用父类方法执行原始逻辑。")],1)]),t._v(" "),r("p",[r("strong",[t._v("回调方式不同")])]),t._v(" "),r("ul",[r("li",[t._v("JDK 动态代理：反射。")]),t._v(" "),r("li",[t._v("CGLib 动态代理：通过 "),r("RouterLink",{attrs:{to:"/java/5ddf7a/#fastclass-机制"}},[r("strong",[t._v("FastClass 机制")])]),t._v(" 的方法索引直接调用。")],1)]),t._v(" "),r("p",[r("strong",[t._v("适用场景不同")])]),t._v(" "),r("ul",[r("li",[t._v("JDK 动态代理：目标类是接口类。")]),t._v(" "),r("li",[t._v("CGLib 动态代理：非接口类、非 final 类，非 final 方法。")])]),t._v(" "),r("p",[r("strong",[t._v("执行效率不同")])]),t._v(" "),r("ul",[r("li",[t._v("JDK 动态代理：效率瓶颈在反射调用，稍慢。")]),t._v(" "),r("li",[t._v("CGLib 动态代理：通过 FastClass 机制，较快。但第一次调用需要生成多个 Class 对象，较慢。")])]),t._v(" "),r("h3",{attrs:{id:"arrays-sort-方法里的排序算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arrays-sort-方法里的排序算法"}},[t._v("#")]),t._v(" Arrays.sort 方法里的排序算法")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("大疆")])],1),r("p",[t._v("Arrays.Sort 方法里的排序算法主要涉及以下四种："),r("RouterLink",{attrs:{to:"/algorithm/i9pdiv/#双轴快速排序"}},[r("strong",[t._v("双轴快速排序")])]),t._v("、"),r("RouterLink",{attrs:{to:"/algorithm/i9pdiv/#插入排序"}},[r("strong",[t._v("插入排序")])]),t._v("、"),r("strong",[t._v("TimSort")]),t._v("、"),r("RouterLink",{attrs:{to:"/algorithm/i9pdiv/#归并排序"}},[r("strong",[t._v("归并排序")])]),t._v("。")],1),t._v(" "),r("ul",[r("li",[t._v("数组类型为基础类型时，采用 "),r("strong",[t._v("双轴快速排序")]),t._v("，辅以 "),r("strong",[t._v("插入排序")]),t._v("；")]),t._v(" "),r("li",[t._v("数组类型为引用类型时，采用 "),r("strong",[t._v("TimSort")]),t._v(" 或者 "),r("strong",[t._v("归并排序")]),t._v("（除非特殊配置，否则默认采用 TimSort）。")])]),t._v(" "),r("p",[r("strong",[t._v("数组长度小于 47 时为什么使用插入排序")]),t._v("：随着数据量的减小，快速排序的递归行为产生的额外性能开销会逐渐盖过算法带来的性能优势，此时插入排序会比快速排序更快。")]),t._v(" "),r("p",[r("strong",[t._v("引用类型的排序为什么不使用快排")]),t._v("：快速排序不是稳定的，而归并排序是稳定的。对于基本类型，稳定性没有意义，而对于引用类型，稳定性是比较重要的。")]),t._v(" "),r("p",[r("strong",[t._v("TimSort 算法")]),t._v(" 的特点在于它结合了 "),r("strong",[t._v("归并排序")]),t._v(" 和 "),r("strong",[t._v("插入排序")]),t._v("，以便在处理实际数据时能够充分利用数据的 "),r("strong",[t._v("局部有序性")]),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"java-集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-集合"}},[t._v("#")]),t._v(" Java 集合")]),t._v(" "),r("h3",{attrs:{id:"fail-fast-和-fail-safe-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast-和-fail-safe-策略"}},[t._v("#")]),t._v(" fail-fast 和 fail-safe 策略")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("快手本地生活")])],1),r("p",[r("strong",[t._v("fail-fast")]),t._v("：直接在容器上进行遍历，在遍历过程中，一旦发现容器中的数据被修改了，会立刻抛出 ConcurrentModificationException 异常导致遍历失败。")]),t._v(" "),r("p",[t._v("Iterator 接口中的 expectedModCount 记录了容器初始的 modCount（modCount 记录集合操作过程中作的修改次数），每次调用 next() 方法，在实际访问元素前，都会调用 checkForComodification 方法，当 modCount != expectedModCount 时，就会抛出该异常。")]),t._v(" "),r("p",[r("strong",[t._v("fail-safe")]),t._v("：这种遍历基于容器的一个克隆。因此，对容器内容的修改不影响遍历。常见的的使用 fail-safe 方式遍历的容器有 ConcerrentHashMap 和 CopyOnWriteArrayList 等。")]),t._v(" "),r("h3",{attrs:{id:"hashmap-的扩容机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的扩容机制"}},[t._v("#")]),t._v(" HashMap 的扩容机制")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("美团")])],1),r("p",[r("strong",[t._v("何时扩容：")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("第一次放入元素时")]),t._v("：实例化后，并不会立即初始化 table，而是在第一次放入元素时才初始化 table。")]),t._v(" "),r("li",[r("strong",[t._v("元素数量超过阈值时")]),t._v("：阈值 = 容量（默认16）* 加载因子（默认0.75）。")])]),t._v(" "),r("p",[r("strong",[t._v("如何扩容：")])]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("p",[r("img",{attrs:{src:s(450),alt:"image-20230826191742899.drawio"}})])]),r("h2",{attrs:{id:"java-并发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-并发"}},[t._v("#")]),t._v(" Java 并发")]),t._v(" "),r("h3",{attrs:{id:"写一个必定发生死锁的代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#写一个必定发生死锁的代码"}},[t._v("#")]),t._v(" 写一个必定发生死锁的代码")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("快手")])],1),r("div",{staticClass:"language-java extra-class"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockDemo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" notified "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread-1 got a"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("notified"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread-1 got b"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread-2 got b"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                notified "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread-2 got a"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h3",{attrs:{id:"synchronized-锁升级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-锁升级"}},[t._v("#")]),t._v(" synchronized 锁升级")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("快手")])],1),r("p",[t._v("synchronized 不断优化中，引入了偏向锁、轻量级锁、重量级锁的概念，在不同的情况逐步进行锁膨胀。过程如下图：")]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#偏向锁"}},[r("strong",[t._v("偏向锁")])]),t._v("："),r("strong",[t._v("在 MarkWord 上加一个线程 ID 标记")]),t._v(" 的低消耗的方式，来标志对象正在被使用。")],1),t._v(" "),r("ul",[r("li",[r("strong",[t._v("加锁")]),t._v("：如果锁对象是 "),r("strong",[t._v("匿名偏向状态")]),t._v(" 或 "),r("strong",[t._v("偏向锁指向的线程不存在")]),t._v("，使用 CAS 尝试将线程 ID 赋值给对象的 MarkWord。如果偏向锁指向的线程存活，则将锁标志位设置为 "),r("strong",[t._v("00")]),t._v("（轻量级锁态），进行锁升级。")]),t._v(" "),r("li",[r("strong",[t._v("锁重入")]),t._v("：只需要判断锁对象的线程 ID 是否是当前线程即可。偏向锁的重入没有计数器，只要线程 ID 还是自己，就认为可重入，即认为可以进入临界区。")]),t._v(" "),r("li",[r("strong",[t._v("解锁")]),t._v("：偏向锁没有实际意义上的解锁，离开 synchronized 代码块后，不会对偏向锁对象的 MarkWord 做修改，即偏向锁态的 MarkWord 中的线程 ID 仍然指向已经过时的线程。")])]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#轻量级锁"}},[r("strong",[t._v("轻量级锁")])]),t._v("：在当前线程的 "),r("strong",[t._v("栈帧")]),t._v(" 中创建一个 "),r("strong",[t._v("Lock Record")]),t._v("，通过 CAS 尝试交换 Lock Record 的内容与锁对象的 MarkWord，从而进行锁的争抢。")],1),t._v(" "),r("ul",[r("li",[r("strong",[t._v("加锁")]),t._v("：如果锁标志位为 "),r("strong",[t._v("001")]),t._v("（无锁态），在当前线程的栈帧中创建一个 Lock Record，通过 CAS 尝试交换 Lock Record 的内容与对象的 MarkWord。如果锁标志位为 "),r("strong",[t._v("00")]),t._v("（轻量级锁态），通过 MarkWord 的 ptr_to_lock_record 判断是否本线程持有锁，如果不是，升级为重量级锁。")]),t._v(" "),r("li",[r("strong",[t._v("锁重入")]),t._v("：通过 MarkWord 的 ptr_to_lock_record 判断是否本线程持有锁，如果是，将在自己的栈帧中加一个 Lock Record，"),r("strong",[t._v("记录内容为空（null），锁对象的引用仍然指向锁对象。")])]),t._v(" "),r("li",[r("strong",[t._v("解锁")]),t._v("：退出栈帧的时候，如果 "),r("strong",[t._v("Lock Record 的记录为 null")]),t._v("，说明是重入锁，仅仅是弹出栈帧。如果 "),r("strong",[t._v("Lock Record 的记录有值")]),t._v("，说明本次解锁是真正解锁，通过 CAS 尝试将 Lock Record 的内容与对象的 MarkWord 交换。删除线程栈中对应的 Lock Record。")])]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#重量级锁"}},[r("strong",[t._v("重量级锁")])]),t._v("："),r("strong",[t._v("需要内核态的参与")]),t._v("，JVM 向操作系统申请 "),r("strong",[t._v("ObjectMonitor")]),t._v("，这是一个 C++ 对象，需要内核态才能访问。锁对象的 MarkWord 指向 ObjectMonitor 的地址。")],1),t._v(" "),r("ul",[r("li",[r("strong",[t._v("加锁")]),t._v("：当线程 "),r("strong",[t._v("获取轻量级锁失败")]),t._v(" 或 "),r("strong",[t._v("遇到 wait() 或 notify() 方法")]),t._v("，进入重量级锁升级状态。将锁标志位改为 "),r("strong",[t._v("10")]),t._v(" （重量级锁态）。线程自适应自旋，如果在最大自旋次数内争抢成功，使得 ObjectMonitor 的 owner 指向自己，则加锁成功。如果在最大自选次数内没有争抢成功，则进入 ObjectMonitor 的 EntryList 等待队列中等待，并进入 BLOCKED 状态。")]),t._v(" "),r("li",[r("strong",[t._v("锁重入")]),t._v("：将 ObjectMonitor 的 recursion 重入次数加 1。")]),t._v(" "),r("li",[r("strong",[t._v("解锁")]),t._v("：将 recursion 重入次数减 1。如果 recursion 为 0，表示本次是真正的解锁，将 owner 置空，并唤醒 EntryList 中的线程。")])]),t._v(" "),r("h3",{attrs:{id:"volatile-的功能和实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volatile-的功能和实现原理"}},[t._v("#")]),t._v(" volatile 的功能和实现原理")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("美团到店")]),r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("百度")])],1),r("p",[r("strong",[t._v("保证")]),t._v(" "),r("RouterLink",{attrs:{to:"/java-concurrency/vt6hbk/#_5-1-可见性"}},[r("strong",[t._v("可见性")])])],1),t._v(" "),r("p",[t._v("实现原理：volatile 修饰的共享变量进行写操作时会加上 lock 前缀指令。lock 前缀指令会引发两件事情：")]),t._v(" "),r("ul",[r("li",[t._v("将当前处理器缓存行的数据写回到系统内存。")]),t._v(" "),r("li",[t._v("当前处理器的缓存回写到内存会导致其他处理器的缓存失效（"),r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#缓存一致性协议"}},[r("strong",[t._v("缓存一致性协议")])]),t._v("）。")],1)]),t._v(" "),r("p",[r("strong",[t._v("禁止")]),t._v(" "),r("RouterLink",{attrs:{to:"/java-concurrency/vt6hbk/#_5-2-重排序"}},[r("strong",[t._v("重排序")])])],1),t._v(" "),r("p",[t._v("实现原理：编译器在生成字节码时，会在指令序列中插入 "),r("RouterLink",{attrs:{to:"/java-concurrency/vt6hbk/#内存屏障"}},[r("strong",[t._v("内存屏障")])]),t._v(" 来禁止特定类型的处理器重排序。")],1),t._v(" "),r("ul",[r("li",[t._v("在每个 volatile 写操作的前面插入一个 StoreStore 屏障，后面插入一个 StoreLoad 屏障。")]),t._v(" "),r("li",[t._v("在每个 volatile 读操作的后面插入一个 LoadLoad 屏障和一个 LoadStore 屏障。")])]),t._v(" "),r("h3",{attrs:{id:"volatile-和-synchronized-区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volatile-和-synchronized-区别"}},[t._v("#")]),t._v(" volatile 和 synchronized 区别")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("百度")])],1),r("ul",[r("li",[r("strong",[t._v("volatile 和 synchronized 都能保证可见性，但实现原理不同")]),t._v("。volatile 通过 "),r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#缓存一致性协议"}},[r("strong",[t._v("缓存一致性协议")])]),t._v(" 实现；synchronized 通过 “释放锁之前将数据写回主存、获取锁之后从主存读取数据” 实现。")],1),t._v(" "),r("li",[r("strong",[t._v("volatile 禁止重排序")]),t._v("，synchronized 不禁止重排序。volatile 通过 "),r("RouterLink",{attrs:{to:"/java-concurrency/shrk6c/#内存屏障"}},[r("strong",[t._v("内存屏障")])]),t._v(" 实现禁止重排序。")],1),t._v(" "),r("li",[t._v("volatile 不保证原子性， "),r("strong",[t._v("synchronized 保证原子性")]),t._v("。同一时间只有一个线程执行临界区代码，因此 synchronized 天然就具有原子性。")]),t._v(" "),r("li",[t._v("volatile 只能修饰变量；synchronized 可以修饰变量、方法和类（实际上是对象锁）。")])]),t._v(" "),r("h3",{attrs:{id:"什么是-aqs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-aqs"}},[t._v("#")]),t._v(" 什么是 AQS")]),t._v(" "),r("p",[t._v("AQS 是 AbstractQueuedSynchronizer 的简称，即抽象队列同步器。")]),t._v(" "),r("p",[t._v("AQS 维护一个 "),r("strong",[t._v("volatile int state（代表共享资源）")]),t._v(" 和一个 "),r("strong",[t._v("FIFO 线程等待队列（多线程争用资源被阻塞时会进入此队列）")]),t._v(" 。")]),t._v(" "),r("p",[t._v("自定义同步器在实现时只需要重写 tryAcquire() / tryAcquireShared() 和 tryRelease() / tryReleaseShared() 实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在顶层实现好了。状态信息 state 可以通过 protected 类型的 getState()、setState() 和 compareAndSetState() 进行操作。")]),t._v(" "),r("h3",{attrs:{id:"公平锁与非公平锁的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#公平锁与非公平锁的区别"}},[t._v("#")]),t._v(" 公平锁与非公平锁的区别")]),t._v(" "),r("p",[t._v("在使用 ReentrantLock#lock() 方法加锁时，如果是公平锁，会先检查 AQS 队列中是否存在线程在排队，如果有线程在排队，则当前线程加入等待队列，如果是非公平锁，则不会去检查是否有线程在排队，而是直接 CAS 竞争锁。")]),t._v(" "),r("p",[t._v("无论是公平锁还是非公平锁，没有竞争到锁都会进行排队。锁释放时，都是唤醒排在最前面的线程，因此非公平锁只是体现在了线程加锁阶段，而没有体现在线程被唤醒阶段。")]),t._v(" "),r("h3",{attrs:{id:"concurrenthashmap-的-put-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-的-put-方法"}},[t._v("#")]),t._v(" ConcurrentHashMap 的 put 方法")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("快手")])],1),r("p",[t._v("ConcurrentHashMap#put 方法大致可以分为以下步骤：")]),t._v(" "),r("p",[r("img",{attrs:{src:s(451),alt:"image-20230914121647715.drawio"}})]),t._v(" "),r("h3",{attrs:{id:"线程池的工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池的工作原理"}},[t._v("#")]),t._v(" 线程池的工作原理")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里飞猪")])],1),r("ul",[r("li",[t._v("线程池中线程数量 "),r("strong",[t._v("小于 corePoolSize")]),t._v(" 时，则创建线程，并处理任务。")]),t._v(" "),r("li",[t._v("线程池中线程数量 "),r("strong",[t._v("大于等于 corePoolSize")]),t._v(" 时，则把任务 "),r("strong",[t._v("放入 workQueue")]),t._v(" 中，随着线程池中的核心线程不断执行任务，只要线程池中有空闲的核心线程，线程池就从 workQueue 中取任务并处理。")]),t._v(" "),r("li",[t._v("当 "),r("strong",[t._v("workQueue 已存满")]),t._v("，放不下新任务时，则 "),r("strong",[t._v("新建非核心线程入池")]),t._v("，并处理任务，直到线程数目达到 maximumPoolSize。")]),t._v(" "),r("li",[t._v("如果线程池中线程数 "),r("strong",[t._v("大于 maximumPoolSize")]),t._v("，则使用 "),r("RouterLink",{attrs:{to:"/java-concurrency/g56kek/#拒绝策略"}},[r("strong",[t._v("拒绝策略")])]),t._v(" 进行拒绝处理。")],1)]),t._v(" "),r("h3",{attrs:{id:"如何合理设置线程池的核心线程数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何合理设置线程池的核心线程数"}},[t._v("#")]),t._v(" 如何合理设置线程池的核心线程数")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("京东保险")])],1),r("div",{staticClass:"anchor",attrs:{id:"cpu-密集型任务"}},[t._v("CPU 密集型任务")]),r("p",[t._v("对于 CPU 密集型的计算场景，如果设置过多的线程数，会造成不必要的上下文切换。")]),t._v(" "),r("p",[t._v("理论上线程的数量 = CPU 核数就是最合适的，不过通常把线程的数量设置为 "),r("strong",[t._v("CPU 核数 +1")]),t._v("，会实现最优的利用率。即使当密集型的线程由于偶尔的内存页失效或其他原因导致阻塞时，这个额外的线程也能确保 CPU 的时钟周期不会被浪费，从而保证 CPU 的利用率。")]),t._v(" "),r("div",{staticClass:"anchor",attrs:{id:"io-密集型任务"}},[t._v("IO 密集型任务")]),r("p",[t._v("对于 IO 密集型计算场景，当一部分线程正在等待 IO 的时候，它们此时并不需要 CPU 来计算，那么另外的线程便可以利用 CPU 去执行其他的任务。")]),t._v(" "),r("p",[t._v("最佳的线程数是与程序中 CPU 计算和 IO 操作的耗时比相关的，《Java 并发编程实战》的作者 Brain Goetz 推荐的计算方法如下：")]),t._v(" "),r("p",[r("strong",[t._v("线程数 = CPU 核心数 * (1 + IO 耗时 / CPU 耗时)")])]),t._v(" "),r("p",[t._v("通过这个公式，我们可以计算出一个合理的线程数量，如果任务的平均等待时间长，线程数就随之增加，而如果平均工作时间长，即 CPU 密集型任务，线程数就随之减少。")]),t._v(" "),r("h2",{attrs:{id:"jvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),r("h3",{attrs:{id:"类的加载过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类的加载过程"}},[t._v("#")]),t._v(" 类的加载过程")]),t._v(" "),r("p",[t._v("JVM 加载 Class 文件主要三步："),r("strong",[t._v("加载 → 连接 → 初始化")]),t._v("。")]),t._v(" "),r("div",{staticClass:"anchor",attrs:{id:"加载"}},[t._v("加载")]),r("p",[t._v("在加载阶段，虚拟机需要完成以下三件事情：")]),t._v(" "),r("ul",[r("li",[t._v("通过一个 "),r("strong",[t._v("类的全限定名")]),t._v(" 来获取其定义的 "),r("strong",[t._v("二进制字节流")]),t._v("。")]),t._v(" "),r("li",[t._v("将这个字节流所代表的 "),r("strong",[t._v("静态存储结构")]),t._v(" 转化为 "),r("strong",[t._v("方法区")]),t._v(" 的 "),r("strong",[t._v("运行时数据结构")]),t._v("。")]),t._v(" "),r("li",[t._v("在 Java "),r("strong",[t._v("堆")]),t._v(" 中生成一个代表这个类的 "),r("strong",[t._v("java.lang.Class 对象")]),t._v("，作为对方法区中这些数据的访问入口。")])]),t._v(" "),r("div",{staticClass:"anchor",attrs:{id:"连接"}},[t._v("连接")]),r("p",[t._v("连接过程又可分为三步："),r("strong",[t._v("验证 → 准备 → 解析")]),t._v("。")]),t._v(" "),r("ul",[r("li",[t._v("验证：确保被加载的类的 "),r("strong",[t._v("正确性")]),t._v("。")]),t._v(" "),r("li",[t._v("准备：为类的 "),r("strong",[t._v("静态变量")]),t._v(" 分配内存，并将其初始化为 "),r("strong",[t._v("默认值")]),t._v("。")]),t._v(" "),r("li",[t._v("解析：把类中的符号引用转换为 "),r("strong",[t._v("直接引用")]),t._v("。")])]),t._v(" "),r("div",{staticClass:"anchor",attrs:{id:"初始化"}},[t._v("初始化")]),r("p",[t._v("初始化是为类的静态变量赋予正确的初始值。")]),t._v(" "),r("h3",{attrs:{id:"双亲委派机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[t._v("#")]),t._v(" 双亲委派机制")]),t._v(" "),r("p",[t._v("如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法加载时，子加载器才会尝试自己去加载该类。")]),t._v(" "),r("h3",{attrs:{id:"jvm-内存结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存结构"}},[t._v("#")]),t._v(" JVM 内存结构")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里")])],1),r("p",[t._v("JVM 定义了若干种程序运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。")]),t._v(" "),r("ul",[r("li",[t._v("线程私有："),r("RouterLink",{attrs:{to:"/jvm/b0ouv4/#_3-1-程序计数器"}},[r("strong",[t._v("程序计数器")])]),t._v("、"),r("RouterLink",{attrs:{to:"/jvm/b0ouv4/#_3-2-虚拟机栈"}},[r("strong",[t._v("虚拟机栈")])]),t._v("、"),r("RouterLink",{attrs:{to:"/jvm/b0ouv4/#_3-3-本地方法栈"}},[r("strong",[t._v("本地方法栈")])])],1),t._v(" "),r("li",[t._v("线程共享："),r("RouterLink",{attrs:{to:"/jvm/b0ouv4/#_3-4-堆"}},[r("strong",[t._v("堆")])]),t._v("、"),r("RouterLink",{attrs:{to:"/jvm/b0ouv4/#_3-5-方法区"}},[r("strong",[t._v("方法区")])]),t._v("、堆外内存")],1)]),t._v(" "),r("h3",{attrs:{id:"如何判断对象是否可被回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何判断对象是否可被回收"}},[t._v("#")]),t._v(" 如何判断对象是否可被回收")]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/jvm/184c59/#引用计数算法"}},[r("strong",[t._v("引用计数算法")])]),t._v("：给对象添加一个引用计数器，每当有一个其他对象引用它时，计数器加 1；引用失效时，计数器减 1。引用计数为 0 的对象可被回收。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/jvm/184c59/#可达性分析算法"}},[r("strong",[t._v("可达性分析算法")])]),t._v("：通过 "),r("RouterLink",{attrs:{to:"/jvm/184c59/#gc-roots"}},[r("strong",[t._v("GC Roots")])]),t._v(" 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。")],1),t._v(" "),r("h3",{attrs:{id:"垃圾回收算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[t._v("#")]),t._v(" 垃圾回收算法")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("阿里")])],1),r("p",[r("strong",[t._v("标记-清除")]),t._v("：将存活的对象进行标记，然后清理掉未被标记的对象。")]),t._v(" "),r("p",[r("strong",[t._v("标记-整理")]),t._v("：将存活的对象进行标记，将存活的对象向一端移动，然后直接清理掉端边界以外的内存。")]),t._v(" "),r("p",[r("strong",[t._v("标记-复制")]),t._v("：将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。")]),t._v(" "),r("h3",{attrs:{id:"新生代对象何时进入老年代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新生代对象何时进入老年代"}},[t._v("#")]),t._v(" 新生代对象何时进入老年代")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("美团到店")])],1),r("p",[r("strong",[t._v("大对象直接进入老年代")]),t._v("：如果大对象直接在新生代分配就会导致 Eden 区和两个 Survivor 区之间发生大量的内存复制。因此对于大对象都会直接在老年代进行分配。")]),t._v(" "),r("p",[r("strong",[t._v("长期存活的对象进入老年代")]),t._v("：对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄（默认情况下，阈值为15）则移动到老年代中。")]),t._v(" "),r("p",[r("strong",[t._v("动态对象年龄判定")]),t._v("：如果在当前的 Survivor 区中，一批对象的总大小超过了该 Survivor 区内存大小的 50%，此时大于等于这批对象年龄的对象可以直接晋升到老年代。")]),t._v(" "),r("h3",{attrs:{id:"什么情况下会触发-full-gc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会触发-full-gc"}},[t._v("#")]),t._v(" 什么情况下会触发 Full GC")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("快手")])],1),r("ul",[r("li",[r("strong",[t._v("老年代空间不足")]),t._v("：常见场景比如大对象直接进入老年代、长期存活的对象进入老年代。")]),t._v(" "),r("li",[r("strong",[t._v("永久代空间不足（JDK 1.7 及以前）")]),t._v("：当要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。")]),t._v(" "),r("li",[r("strong",[t._v("空间分配担保失败")]),t._v("：每次晋升的对象的平均大小大于老年代剩余空间或 Minor GC 后存活的对象超过了老年代剩余空间。")]),t._v(" "),r("li",[r("strong",[t._v("调用 System.gc()")]),t._v("：只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。")]),t._v(" "),r("li",[r("strong",[t._v("堆伸缩")]),t._v("：未指定老年代和新生代大小，堆伸缩时会产生 Full GC。")])]),t._v(" "),r("h3",{attrs:{id:"oom-场景及解决方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oom-场景及解决方案"}},[t._v("#")]),t._v(" OOM 场景及解决方案")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("美团到店")])],1),r("p",[r("strong",[t._v("场景1")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#线程溢出-unable-to-create-new-native-thread"}},[r("strong",[t._v("线程溢出 - unable to create new native thread")])]),t._v("：操作系统对于一个进程所能创建的本地线程数有限制。当尝试创建新的本地线程时，如果已经达到了系统的线程数限制，就会出现 "),r("code",[t._v("java.lang.OutOfMemoryError: unable to create new native thread")]),t._v("  错误。这通常发生在运行线程密集型应用程序或者系统资源有限的情况下。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("降低程序中创建线程的数量，分析应用是否真的需要创建这么多线程。")]),t._v(" "),r("li",[t._v("如果确实需要创建很多线程，则调高操作系统层面的线程最大数：执行 "),r("code",[t._v("ulimia-a")]),t._v(" 查看最大线程数限制，使用 "),r("code",[t._v("ulimit-u xxx")]),t._v(" 调整最大线程数限制。")])]),t._v(" "),r("p",[r("strong",[t._v("场景2")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#堆内存溢出-java-heap-space"}},[r("strong",[t._v("堆内存溢出 - Java heap space")])]),t._v("：当堆内存没有足够空间存放新创建的对象时，就会抛出 "),r("code",[t._v("java.lang.OutOfMemoryError: Java heap space")]),t._v(" 错误。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("针对大部分情况，通常只需要通过 -Xmx 参数调高 JVM 堆内存空间即可。")]),t._v(" "),r("li",[t._v("如果是超大对象，可以检查其合理性，比如是否一次性查询了数据库全部结果，而没有做结果数限制。")]),t._v(" "),r("li",[t._v("如果是业务峰值压力，可以考虑添加机器资源，或者做限流降级。")]),t._v(" "),r("li",[t._v("如果是内存泄漏，需要找到持有的对象，修改代码设计，比如关闭没有释放的连接。")])]),t._v(" "),r("p",[r("strong",[t._v("场景3")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#垃圾回收上头-gc-overhead-limit-exceeded"}},[r("strong",[t._v("垃圾回收上头 - GC overhead limit exceeded")])]),t._v("：当 Java 进程花费 98% 以上的时间执行 GC，但只恢复了不到 2% 的内存，且该动作连续重复了 5 次，就会抛出 "),r("code",[t._v("java.lang.OutOfMemoryError: GC overhead limit exceeded")]),t._v(" 异常。")],1),t._v(" "),r("p",[t._v("解决方案：此类问题的原因与解决方案跟 "),r("code",[t._v("Java heap space")]),t._v(" 非常类似。")]),t._v(" "),r("ul",[r("li",[t._v("添加 JVM 参数 "),r("code",[t._v("-XX:-UseGCOverheadLimit")]),t._v("。不推荐这么干，没有真正解决问题，只是将异常推迟。")]),t._v(" "),r("li",[t._v("检查项目中是否有大量的死循环或有使用大内存的代码，优化代码。")]),t._v(" "),r("li",[t._v("dump 内存分析，检查是否存在内存泄露，如果没有，加大内存。")])]),t._v(" "),r("p",[r("strong",[t._v("场景4")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#数组大小超限-requested-array-size-exceeds-vm-limit"}},[r("strong",[t._v("数组大小超限 - Requested array size exceeds VM limit")])]),t._v("：Java 虚拟机为每个数组分配一块连续的内存空间，以便存储数组的元素。如果请求的数组大小超过了虚拟机的限制，就会抛出 "),r("code",[t._v("java.lang.OutOfMemoryError: Requested array size exceeds VM limit")]),t._v(" 错误。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("检查代码，确认业务是否需要创建如此大的数组，是否可以拆分为多个块，分批执行。")])]),t._v(" "),r("p",[r("strong",[t._v("场景5")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#元空间溢出-metaspace"}},[r("strong",[t._v("元空间溢出 - Metaspace")])]),t._v("：当元空间无法满足新的类加载请求或元数据的动态增长时，就会抛出 "),r("code",[t._v("java.lang.OutOfMemoryError: Metaspace")]),t._v(" 异常。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("增加 Metaspace 的初始大小和最大大小，使用 JVM 参数 "),r("code",[t._v("-XX:MetaspaceSize")]),t._v(" 设置初始大小，使用 "),r("code",[t._v("-XX:MaxMetaspaceSize")]),t._v(" 设置最大大小。")]),t._v(" "),r("li",[t._v("优化类加载行为，避免加载不必要的类，采用延迟加载或按需加载的策略。")]),t._v(" "),r("li",[t._v("减少动态类生成操作，避免过度使用反射和动态代理，尽量使用静态类或编译时生成的类。")]),t._v(" "),r("li",[t._v("如果必须动态生成大量类，限制生成的类的数量或使用对象池来重用动态生成的类。")]),t._v(" "),r("li",[t._v("使用内存分析工具检查内存使用情况，修复内存泄漏问题，确保无用的类和类加载器能够正确释放。")])]),t._v(" "),r("p",[r("strong",[t._v("场景6")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#直接缓冲区溢出-direct-buffer-memory"}},[r("strong",[t._v("直接缓冲区溢出 - Direct buffer memory")])]),t._v("：如果不断分配本地内存，堆内存很少使用，那么 JVM 就不需要执行 GC，DirectByteBuffer 对象就不会被回收，这时虽然堆内存充足，但本地内存可能已经不够用了，就会出现 OOM，本地直接内存溢出。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("通过增加 "),r("code",[t._v("-XX:MaxDirectMemorySize")]),t._v(" JVM 参数来调整 Direct Buffer Memory 的限制。")]),t._v(" "),r("li",[t._v("合理使用直接字节缓冲区、及时释放无用的缓冲区对象。")])]),t._v(" "),r("p",[r("strong",[t._v("场景7")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#虚拟内存耗尽-out-of-swap-space"}},[r("strong",[t._v("虚拟内存耗尽 - Out of swap space")])]),t._v("：该错误表示所有可用的 "),r("strong",[t._v("虚拟内存已被耗尽")]),t._v("。虚拟内存由物理内存和交换空间两部分组成。当运行时程序请求的虚拟内存溢出时就会抛出 "),r("code",[t._v("java.lang.OutOfMemoryError: Outof swap space")]),t._v(" 错误。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("增加交换空间：调整操作系统的交换空间设置，提供更多的虚拟内存供应用程序使用。")]),t._v(" "),r("li",[t._v("优化内存使用：检查应用程序的内存使用情况，找出内存泄漏或过度消耗内存的部分，并进行优化，以降低内存消耗。")])]),t._v(" "),r("p",[r("strong",[t._v("场景8")]),t._v("："),r("RouterLink",{attrs:{to:"/jvm/gsfjls/#oom-killer-被激活-kill-process-or-sacrifice-child"}},[r("strong",[t._v("OOM Killer 被激活 - Kill process or sacrifice child")])]),t._v("：Linux 内核允许进程申请的内存总量大于系统可用内存，通过 “错峰复用” 的方式更有效的利用系统资源。然而，这种方式会带来一定的 “超卖” 风险。例如某些进程持续占用系统内存，导致其他进程没有可用内存。此时，系统将自动激活 OOM Killer，寻找评分低的进程，并将其 “杀死”，释放内存资源。")],1),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("ul",[r("li",[t._v("升级服务器配置或隔离部署，避免争用。")]),t._v(" "),r("li",[t._v("OOM Killer 调优。")])]),t._v(" "),r("h3",{attrs:{id:"线上-cpu-飙升-100-问题排查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线上-cpu-飙升-100-问题排查"}},[t._v("#")]),t._v(" 线上 CPU 飙升 100% 问题排查")]),t._v(" "),r("div",{staticClass:"tag-group"},[r("el-tag",{attrs:{type:"primary",effect:"plain",size:"medium"}},[t._v("百度")])],1),r("p",[r("strong",[t._v("问题复现")])]),t._v(" "),r("p",[t._v("线上系统突然运行缓慢，CPU 飙升，甚至到 100%，以及 Full GC 次数过多。")]),t._v(" "),r("p",[r("strong",[t._v("问题排查")])]),t._v(" "),r("ul",[r("li",[t._v("使用 "),r("code",[t._v("top")]),t._v(" 命令查看系统中各个 "),r("strong",[t._v("进程")]),t._v(" 的资源（主要看 CPU 使用率）占用状况。")]),t._v(" "),r("li",[t._v("使用 "),r("code",[t._v("top -Hp 进程ID")]),t._v(" 命令查看 Java 进程下的各个 "),r("strong",[t._v("线程")]),t._v(" 的资源（主要看 CPU 使用率）占用状况。")]),t._v(" "),r("li",[t._v("使用 "),r("code",[t._v('printf "%x\\n" 线程ID')]),t._v(" 命令将线程号转换为十六进制格式，以在后续查找线程堆栈信息时使用。")]),t._v(" "),r("li",[t._v("使用 "),r("code",[t._v("jstack 进程ID")]),t._v("  命令查看 JVM 当前时刻的 "),r("strong",[t._v("线程快照")]),t._v("，可以通过线程 ID（十六进制格式）来定位线程："),r("code",[t._v("jstack 进程ID | grep 线程ID")]),t._v("。")]),t._v(" "),r("li",[t._v("使用 "),r("code",[t._v("jstat -gcutil 进程ID 统计间隔毫秒 统计次数")]),t._v(" 命令来查看 Java 进程的 "),r("strong",[t._v("GC（垃圾回收）情况")]),t._v("。特别关注 FGC（Full GC）次数和增长情况，如果频繁进行 Full GC 可能意味着内存溢出或性能问题。")]),t._v(" "),r("li",[t._v("使用 "),r("code",[t._v("jmap -dump:format=b,file=filename 进程ID")]),t._v(" 命令将 Java 进程的堆内存导出到文件中，然后可以使用 Eclipse 的 MAT（Memory Analyzer Tool）工具来分析导出的堆转储文件。")])]),t._v(" "),r("p",[r("strong",[t._v("原因分析")])]),t._v(" "),r("p",[r("strong",[t._v("原因1")]),t._v("：内存消耗过大，导致 Full GC 次数过多。")]),t._v(" "),r("ul",[r("li",[t._v("多个线程的 CPU 都超过了 100%，通过 jstack 命令可以看到这些线程主要是垃圾回收线程。")]),t._v(" "),r("li",[t._v("通过 jstat 命令监控 GC 情况，可以看到 Full GC 次数非常多，并且次数在不断增加。")])]),t._v(" "),r("p",[t._v("确定是 Full GC，接下来找到具体原因：")]),t._v(" "),r("ul",[r("li",[t._v("生成大量的对象，导致内存溢出 → 执行步骤 6，查看具体内存对象占用情况。")]),t._v(" "),r("li",[t._v("内存占用不高，但是 Full GC 次数还是比较多 → 此时可能是代码中手动调用 "),r("code",[t._v("System.gc()")]),t._v(" 导致 GC 次数过多，这可以通过添加 "),r("code",[t._v("-XX:+DisableExplicitGC")]),t._v(" 来禁用 JVM 对显式 GC 的响应。")])]),t._v(" "),r("p",[r("strong",[t._v("原因2")]),t._v("：代码中有大量消耗 CPU 的操作，导致 CPU 过高，系统运行缓慢。")]),t._v(" "),r("ul",[r("li",[t._v("jstack 可直接定位到代码行。例如某些复杂算法，甚至 BUG、无限循环递归等等。")])]),t._v(" "),r("p",[r("strong",[t._v("原因3")]),t._v("：由于锁使用不当，导致死锁。")]),t._v(" "),r("ul",[r("li",[t._v("如果有死锁，线程快照会直接提示 deadlock。jstack 会打印出业务死锁的位置。")])]),t._v(" "),r("p",[r("strong",[t._v("原因4")]),t._v("：某个线程由于某种原因而一直停留在 WAITING 状态。")]),t._v(" "),r("ul",[r("li",[t._v("jstack 多查询几次，每次间隔 30 秒，对比一直停留在 parking 导致的 WAITING 状态的线程。例如 CountDownLatch 倒计时器，使得相关线程等待 → AQS → LockSupport.park()。")])])])}),[],!1,null,null,null);a.default=v.exports},450:function(t,a,s){t.exports=s.p+"assets/img/image-20230826191742899.drawio.2a5f40e5.png"},451:function(t,a,s){t.exports=s.p+"assets/img/image-20230914121647715.drawio.aad446e6.png"}}]);