(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{1021:function(t,v,s){"use strict";s.r(v);var a=s(14),_=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http-与-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-与-https"}},[t._v("#")]),t._v(" HTTP 与 HTTPS")]),t._v(" "),a("h2",{attrs:{id:"http-与-https-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-与-https-的区别"}},[t._v("#")]),t._v(" HTTP 与 HTTPS 的区别")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。"),a("strong",[t._v("HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。")])]),t._v(" "),a("li",[t._v("HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 "),a("strong",[t._v("HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。")])]),t._v(" "),a("li",[t._v("两者的默认端口不一样，HTTP 默认端口号是 80，"),a("strong",[t._v("HTTPS 默认端口号是 443。")])]),t._v(" "),a("li",[a("strong",[t._v("HTTPS 协议需要向 CA（证书权威机构）申请数字证书")]),t._v("，来保证服务器的身份是可信的。")])]),t._v(" "),a("h2",{attrs:{id:"http-风险与-https-解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-风险与-https-解决方案"}},[t._v("#")]),t._v(" HTTP 风险与 HTTPS 解决方案")]),t._v(" "),a("h3",{attrs:{id:"http-的风险"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-的风险"}},[t._v("#")]),t._v(" HTTP 的风险")]),t._v(" "),a("p",[t._v("由于HTTP是明文传输的，因此存在以下三个安全风险：")]),t._v(" "),a("ul",[a("li",[t._v("窃听风险：通信链路上的内容可以被获取；")]),t._v(" "),a("li",[t._v("篡改风险：通信内容可以被篡改，例如植入垃圾广告等；")]),t._v(" "),a("li",[t._v("冒充风险：攻击者可以冒充合法网站进行欺骗。")])]),t._v(" "),a("h3",{attrs:{id:"https-的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-的解决方案"}},[t._v("#")]),t._v(" HTTPS 的解决方案")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("混合加密")]),t._v(" 实现信息的 "),a("strong",[t._v("机密性")]),t._v("，解决了窃听的风险。")]),t._v(" "),a("li",[a("strong",[t._v("摘要算法")]),t._v(" 实现 "),a("strong",[t._v("完整性")]),t._v("，它能够为数据生成独一无二的指，指纹用于校验数据的完整性，解决了篡改的风险。")]),t._v(" "),a("li",[t._v("将服务器公钥放入到 "),a("strong",[t._v("数字证书")]),t._v(" 中，解决了冒充的风险。")])]),t._v(" "),a("h3",{attrs:{id:"混合加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合加密"}},[t._v("#")]),t._v(" 混合加密")]),t._v(" "),a("p",[t._v("HTTPS 采用的是 "),a("strong",[t._v("对称加密")]),t._v(" 和 "),a("strong",[t._v("非对称加密")]),t._v(" 结合的 "),a("strong",[t._v("混合加密")]),t._v(" 方式：")]),t._v(" "),a("ul",[a("li",[t._v("在通信建立前采用 "),a("strong",[t._v("非对称加密")]),t._v(" 的方式交换 "),a("strong",[t._v("会话秘钥")]),t._v("，后续就不再使用非对称加密。")]),t._v(" "),a("li",[t._v("在通信过程中全部使用 "),a("strong",[t._v("对称加密")]),t._v(" 的 "),a("strong",[t._v("会话秘钥")]),t._v(" 的方式加密明文数据。")])]),t._v(" "),a("h3",{attrs:{id:"摘要算法与数字签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#摘要算法与数字签名"}},[t._v("#")]),t._v(" 摘要算法与数字签名")]),t._v(" "),a("p",[t._v("在计算机领域，为了确保数据传输过程中不被篡改，通常需要对数据进行一种唯一的数字指纹计算，即哈希值。在接收方收到数据后，会再次计算哈希值，并与发送方传输的哈希值进行比较。如果两者相同，说明数据未被篡改；如果不同，则说明数据已被篡改。")]),t._v(" "),a("p",[t._v("然而，哈希算法并不能保证数据的完整性，因为缺少对客户端收到的消息是否来源于服务端的证明。例如，一个攻击者可以替换消息并同时替换对应的哈希值。")]),t._v(" "),a("p",[t._v("为了避免这种情况，计算机使用 "),a("strong",[t._v("非对称加密算法")]),t._v("，该算法需要使用两个密钥，一个是公钥，一个是私钥。公钥可以公开给所有人，私钥必须由密钥持有人管理并保密。")]),t._v(" "),a("p",[t._v("非对称加密算法有两种用途：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("公钥加密、私钥解密")]),t._v("，目的是确保数据传输的安全性；")]),t._v(" "),a("li",[a("strong",[t._v("私钥加密、公钥解密")]),t._v("，目的是保证消息不被冒充。")])]),t._v(" "),a("p",[t._v("私钥加密的内容通常是哈希值，而不是实际的传输内容。")]),t._v(" "),a("p",[a("strong",[t._v("数字签名算法的核心思想是")]),t._v("：发送方使用自己的私钥对摘要进行加密，并将加密后的摘要（数字签名）与原始内容一起发送给接收方。接收方使用发送方的公钥对数字签名进行解密，得到原始内容的哈希值，并计算接收到的内容的哈希值，如果两者一致，则说明信息的完整性未被篡改，同时也能够证明信息的来源确实是发送方。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(639),alt:"image-20230402002458510.drawio"}})]),t._v(" "),a("p",[t._v("引入数字签名算法后，数据的完整性和真实性都得到了保证。客户端收到消息后，可以使用公钥解密签名并验证消息的哈希值，以确认消息的完整性和来源。只有持有相应私钥的人才能对数据进行数字签名，确保数据的真实性。")]),t._v(" "),a("p",[t._v("因此，数字签名算法通常用于确认数据的来源和完整性，而非对数据进行加密。")]),t._v(" "),a("h3",{attrs:{id:"数字证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字证书"}},[t._v("#")]),t._v(" 数字证书")]),t._v(" "),a("p",[t._v("哈希算法和数字签名可以确保消息的完整性和来源可靠性，但是仍然存在身份验证的问题。因为即使消息来源可靠，"),a("strong",[t._v("公钥本身可能被伪造")]),t._v("，导致消息被篡改或者被冒充。")]),t._v(" "),a("p",[t._v("为了解决这个问题，"),a("strong",[t._v("数字证书认证机构（CA）")]),t._v(" 可以通过注册和签名公钥来验证公钥的身份。CA 使用自己的私钥对服务器的公钥和服务器信息进行数字签名，然后将这个签名和公钥一起打包成数字证书。"),a("strong",[t._v("数字证书可以包含服务器信息、公钥和数字签名等信息。")])]),t._v(" "),a("p",[t._v("当客户端连接服务器时，服务器会将数字证书发送给客户端，客户端会使用 CA 的公钥来解密数字签名，以验证数字证书的合法性。如果数字证书是合法的，客户端就可以信任公钥，并使用该公钥进行通信。")]),t._v(" "),a("p",[t._v("数字证书的工作流程：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(640),alt:"image-20230402010537735.drawio"}})]),t._v(" "),a("h2",{attrs:{id:"https-连接的建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-连接的建立"}},[t._v("#")]),t._v(" HTTPS 连接的建立")]),t._v(" "),a("h3",{attrs:{id:"tls-握手协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tls-握手协议"}},[t._v("#")]),t._v(" TLS 握手协议")]),t._v(" "),a("div",{staticClass:"anchor",attrs:{id:"1、clienthello"}},[t._v("1、ClientHello")]),a("p",[t._v("首先，由客户端向服务器发起加密通信请求，即 ClientHello 请求。")]),t._v(" "),a("p",[t._v("在这一步，客户端主要向服务器发送以下信息：")]),t._v(" "),a("ul",[a("li",[t._v("客户端支持的 TLS 协议版本，如 TLS 1.2 版本。")]),t._v(" "),a("li",[t._v("客户端生产的 "),a("strong",[t._v("随机数")]),t._v("（Client Random），后面用于生成 “会话秘钥” 条件之一。")]),t._v(" "),a("li",[t._v("客户端支持的密码套件列表，如 RSA 加密算法。")])]),t._v(" "),a("div",{staticClass:"anchor",attrs:{id:"2、severhello"}},[t._v("2、SeverHello")]),a("p",[t._v("服务器收到客户端请求后，向客户端发出响应，即 SeverHello。服务器回应的内容有如下内容：")]),t._v(" "),a("ul",[a("li",[t._v("确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。")]),t._v(" "),a("li",[t._v("服务器生产的 "),a("strong",[t._v("随机数")]),t._v("（Server Random），后面用于生成 “会话秘钥” 条件之一。")]),t._v(" "),a("li",[t._v("确认的密码套件列表，如 RSA 加密算法。")]),t._v(" "),a("li",[a("strong",[t._v("服务器的数字证书。")])])]),t._v(" "),a("div",{staticClass:"anchor",attrs:{id:"3、客户端回应"}},[t._v("3、客户端回应")]),a("p",[t._v("客户端收到服务器回应后，首先通过浏览器或者操作系统中的 CA 公钥确认服务器的数字证书的真实性。")]),t._v(" "),a("p",[t._v("如果验证通过，客户端会 "),a("strong",[t._v("从数字证书中取出服务器的公钥")]),t._v("，使用它加密报文，向服务器发送如下信息：")]),t._v(" "),a("ul",[a("li",[t._v("一个 "),a("strong",[t._v("随机数")]),t._v("（pre-master key）。该随机数会被服务器公钥加密。")]),t._v(" "),a("li",[t._v("加密通信算法改变通知，表示随后的信息都将用 “会话秘钥” 加密通信。")]),t._v(" "),a("li",[t._v("客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。")])]),t._v(" "),a("p",[a("strong",[t._v("服务器和客户端有了这三个随机数（Client Random、Server Random、pre-master key），接着就用双方协商的加密算法，各自生成本次通信的 “会话秘钥” 。")])]),t._v(" "),a("div",{staticClass:"anchor",attrs:{id:"4、服务器的最后回应"}},[t._v("4、服务器的最后回应")]),a("p",[t._v("服务器收到客户端的第三个随机数（pre-master key）之后，通过协商的加密算法，计算出本次通信的 “会话秘钥” 。")]),t._v(" "),a("p",[t._v("然后，向客户端发送最后的信息：")]),t._v(" "),a("ul",[a("li",[t._v("加密通信算法改变通知，表示随后的信息都将用 “会话秘钥” 加密通信。")]),t._v(" "),a("li",[t._v("服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。")])]),t._v(" "),a("p",[t._v("至此，整个 TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用 “会话秘钥” 加密内容。")]),t._v(" "),a("h3",{attrs:{id:"数字证书签发和校验流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字证书签发和校验流程"}},[t._v("#")]),t._v(" 数字证书签发和校验流程")]),t._v(" "),a("p",[a("img",{attrs:{src:s(641),alt:"image-20230402102032950.drawio"}})]),t._v(" "),a("p",[t._v("CA 签发证书的过程，如上图左边部分：")]),t._v(" "),a("ul",[a("li",[t._v("首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；")]),t._v(" "),a("li",[t._v("然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，即 CA 对证书做了签名；")]),t._v(" "),a("li",[t._v("最后将 Certificate Signature 添加在文件证书上，形成数字证书；")])]),t._v(" "),a("p",[t._v("客户端校验服务端的数字证书的过程，如上图右边部分：")]),t._v(" "),a("ul",[a("li",[t._v("首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 A；")]),t._v(" "),a("li",[t._v("通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 B；")]),t._v(" "),a("li",[t._v("最后比较 A 和 B，如果值相同，则为可信赖的证书，否则认为证书不可信。")])]),t._v(" "),a("h3",{attrs:{id:"tls-记录协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tls-记录协议"}},[t._v("#")]),t._v(" TLS 记录协议")]),t._v(" "),a("p",[t._v("TLS 记录协议主要负责消息（HTTP 数据）的压缩、加密及数据的认证，过程如下图：")]),t._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(642),alt:"image-20230402130402293.drawio"}})]),a("p",[t._v("具体过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("首先，消息被分割成多个较短的片段，然后分别对每个片段进行压缩。")]),t._v(" "),a("li",[t._v("接下来，经过压缩的片段会被加上 "),a("strong",[t._v("消息认证码")]),t._v("（MAC 值，这个是通过哈希算法生成的），这是为了保证完整性，并进行数据的认证。通过附加消息认证码的 MAC 值，可以识别出篡改。与此同时，为了防止重放攻击，在计算消息认证码时，还加上了片段的编码。")]),t._v(" "),a("li",[t._v("再接下来，经过压缩的片段再加上消息认证码会一起通过 "),a("strong",[t._v("对称密钥")]),t._v(" 进行加密。")]),t._v(" "),a("li",[t._v("最后，经过加密的数据再加上由数据类型、版本号、压缩后的长度组成的报头就是最终的报文数据。")])]),t._v(" "),a("p",[t._v("记录协议完成后，最终的报文数据将传递到传输控制协议 （TCP） 层进行传输。")]),t._v(" "),a("h2",{attrs:{id:"hsts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hsts"}},[t._v("#")]),t._v(" HSTS")]),t._v(" "),a("h3",{attrs:{id:"重定向的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向的问题"}},[t._v("#")]),t._v(" 重定向的问题")]),t._v(" "),a("p",[t._v("有不少网站只通过 HTTPS 对外提供服务，但用户在访问某个网站的时候，在浏览器里却往往直接输入网站域名，而不是完整的 URL，不过浏览器依然能正确的使用 HTTPS 发起请求。这背后多亏了服务器和浏览器的协作，如下图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(643),alt:"image-20230911092656831"}})]),t._v(" "),a("p",[t._v("简单来讲就是，浏览器向网站发起一次 HTTP 请求，在得到一个重定向响应后，发起一次 HTTPS 请求并得到最终的响应内容。所有的这一切对用户而言是完全透明的，所以在用户看来，在浏览器里直接输入域名却依然可以用 HTTPS 协议和网站进行安全的通信，是个不错的用户体验。")]),t._v(" "),a("p",[t._v("一切看上去都是那么的完美，但其实不然，"),a("strong",[t._v("由于在建立起 HTTPS 连接之前存在一次明文的 HTTP 请求和重定向，使得攻击者可以以中间人的方式劫持这次请求，从而进行后续的攻击")]),t._v("，例如窃听数据、篡改请求和响应、跳转到钓鱼网站等。")]),t._v(" "),a("p",[t._v("以劫持请求并跳转到钓鱼网站为例，其大致做法如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(644),alt:"image-20230911093108924"}})]),t._v(" "),a("p",[t._v("这个攻击的精妙之处在于，攻击者直接劫持了 HTTP 请求，并返回了内容给浏览器，根本不给浏览器同真实网站建立 HTTPS 连接的机会，因此浏览器会误以为真实网站通过 HTTP 对外提供服务，自然也就不会向用户报告当前的连接不安全。于是乎攻击者几乎可以神不知鬼不觉的对请求和响应动手脚。")]),t._v(" "),a("h3",{attrs:{id:"通过-hsts-强制使用-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-hsts-强制使用-https"}},[t._v("#")]),t._v(" 通过 HSTS 强制使用 HTTPS")]),t._v(" "),a("p",[t._v("HSTS 的全称是 HTTP Strict-Transport-Security，它是一个 Web 安全策略机制。")]),t._v(" "),a("p",[t._v("HSTS 最为核心的是一个 HTTP 响应头（HTTP Response Header）。正是它可以让浏览器得知，在接下来的一段时间内，当前域名只能通过 HTTPS 进行访问，并且在浏览器发现当前连接不安全的情况下，强制拒绝用户的后续访问要求。")]),t._v(" "),a("p",[t._v("HSTS Header 的语法如下：")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Strict-Transport-Security")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token header-value hsts languages-hsts"}},[t._v("<max-age=>[; includeSubDomains][; preload]")])]),t._v("\n")])])]),a("p",[t._v("其中：")]),t._v(" "),a("ul",[a("li",[t._v("max-age 是必选参数，是一个以秒为单位的数值，它代表着 HSTS Header 的过期时间，通常设置为 1 年，即 31536000 秒。")]),t._v(" "),a("li",[t._v("includeSubDomains 是可选参数，如果包含它，则意味着当前域名及其子域名均开启 HSTS 保护。")]),t._v(" "),a("li",[t._v("preload 是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它。")])]),t._v(" "),a("p",[t._v("只要在服务器返回给浏览器的响应头中，增加 Strict-Transport-Security 这个 HTTP Header（下文简称 HSTS Header），例如：")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Strict-Transport-Security")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token header-value hsts languages-hsts"}},[t._v("max-age=31536000; includeSubDomains")])]),t._v("\n")])])]),a("p",[t._v("就可以告诉浏览器，在接下来的 31536000 秒（1 年）内，对于当前域名及其子域名的后续通信应该强制性的只使用 HTTPS，直到超过有效期为止。")]),t._v(" "),a("p",[t._v("完整的流程如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(645),alt:"image-20230911093749392"}})]),t._v(" "),a("p",[t._v("细心的你可能发现了，HSTS 存在一个比较薄弱的环节，那就是浏览器没有当前网站的 HSTS 信息的时候，或者第一次访问网站的时候，依然需要一次明文的 HTTP 请求和重定向才能切换到 HTTPS，以及刷新 HSTS 信息。而就是这么一瞬间却给攻击者留下了可乘之机，使得他们可以把这一次的 HTTP 请求劫持下来，继续中间人攻击。")]),t._v(" "),a("p",[t._v("针对上面的攻击，HSTS 也有应对办法，那就是在浏览器里内置一个列表，只要是在这个列表里的域名，无论何时、何种情况，浏览器都只使用 HTTPS 发起连接。这个列表由 Google Chromium 维护，FireFox、Safari、IE 等主流浏览器均在使用。")])])}),[],!1,null,null,null);v.default=_.exports},639:function(t,v,s){t.exports=s.p+"assets/img/image-20230402002458510.drawio.36cd3821.png"},640:function(t,v,s){t.exports=s.p+"assets/img/image-20230402010537735.drawio.7d0ba0cb.png"},641:function(t,v,s){t.exports=s.p+"assets/img/image-20230402102032950.drawio.0b6615d9.png"},642:function(t,v,s){t.exports=s.p+"assets/img/image-20230402130402293.drawio.e7087ba3.png"},643:function(t,v,s){t.exports=s.p+"assets/img/image-20230911092656831.4c24e8f8.png"},644:function(t,v,s){t.exports=s.p+"assets/img/image-20230911093108924.6d9b5f49.png"},645:function(t,v,s){t.exports=s.p+"assets/img/image-20230911093749392.c12ba11b.png"}}]);