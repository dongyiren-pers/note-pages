(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{1001:function(s,t,a){"use strict";a.r(t);var i=a(14),e=Object(i.a)({},(function(){var s=this,t=s.$createElement,i=s._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[i("h1",{attrs:{id:"第3章-分布式id"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#第3章-分布式id"}},[s._v("#")]),s._v(" 第3章 分布式ID")]),s._v(" "),i("h2",{attrs:{id:"_3-1-分布式id的要求"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-分布式id的要求"}},[s._v("#")]),s._v(" 3.1 分布式ID的要求")]),s._v(" "),i("p",[s._v("https://blog.csdn.net/weixin_35099248/article/details/121214802")]),s._v(" "),i("h2",{attrs:{id:"_3-2-uuid"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-uuid"}},[s._v("#")]),s._v(" 3.2 UUID")]),s._v(" "),i("p",[s._v("通用唯一识别码（Universally Unique Identifier, UUID） 由一组 "),i("strong",[s._v("32 位的 16 进制数字")]),s._v(" 构成，所以 UUID 理论上的总数为 "),i("eq",[i("span",{staticClass:"katex"},[i("span",{staticClass:"katex-mathml"},[i("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[i("semantics",[i("mrow",[i("mn",[s._v("1")]),i("msup",[i("mn",[s._v("6")]),i("mn",[s._v("32")])],1),i("mo",[s._v("=")]),i("msup",[i("mn",[s._v("2")]),i("mn",[s._v("128")])],1)],1),i("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("16^{32}=2^{128}")])],1)],1)],1),i("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[i("span",{staticClass:"base"},[i("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em","vertical-align":"0em"}}),i("span",{staticClass:"mord"},[s._v("1")]),i("span",{staticClass:"mord"},[i("span",{staticClass:"mord"},[s._v("6")]),i("span",{staticClass:"msupsub"},[i("span",{staticClass:"vlist-t"},[i("span",{staticClass:"vlist-r"},[i("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[i("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[i("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),i("span",{staticClass:"sizing reset-size6 size3 mtight"},[i("span",{staticClass:"mord mtight"},[i("span",{staticClass:"mord mtight"},[s._v("3")]),i("span",{staticClass:"mord mtight"},[s._v("2")])])])])])])])])]),i("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),i("span",{staticClass:"mrel"},[s._v("=")]),i("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),i("span",{staticClass:"base"},[i("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em","vertical-align":"0em"}}),i("span",{staticClass:"mord"},[i("span",{staticClass:"mord"},[s._v("2")]),i("span",{staticClass:"msupsub"},[i("span",{staticClass:"vlist-t"},[i("span",{staticClass:"vlist-r"},[i("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[i("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[i("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),i("span",{staticClass:"sizing reset-size6 size3 mtight"},[i("span",{staticClass:"mord mtight"},[i("span",{staticClass:"mord mtight"},[s._v("1")]),i("span",{staticClass:"mord mtight"},[s._v("2")]),i("span",{staticClass:"mord mtight"},[s._v("8")])])])])])])])])])])])])]),s._v("，约等于 "),i("eq",[i("span",{staticClass:"katex"},[i("span",{staticClass:"katex-mathml"},[i("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[i("semantics",[i("mrow",[i("mn",[s._v("3.4")]),i("mo",[s._v("×")]),i("mn",[s._v("1")]),i("msup",[i("mn",[s._v("0")]),i("mn",[s._v("38")])],1)],1),i("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("3.4 \\times 10^{38}")])],1)],1)],1),i("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[i("span",{staticClass:"base"},[i("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),i("span",{staticClass:"mord"},[s._v("3")]),i("span",{staticClass:"mord"},[s._v(".")]),i("span",{staticClass:"mord"},[s._v("4")]),i("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),i("span",{staticClass:"mbin"},[s._v("×")]),i("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),i("span",{staticClass:"base"},[i("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em","vertical-align":"0em"}}),i("span",{staticClass:"mord"},[s._v("1")]),i("span",{staticClass:"mord"},[i("span",{staticClass:"mord"},[s._v("0")]),i("span",{staticClass:"msupsub"},[i("span",{staticClass:"vlist-t"},[i("span",{staticClass:"vlist-r"},[i("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[i("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[i("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),i("span",{staticClass:"sizing reset-size6 size3 mtight"},[i("span",{staticClass:"mord mtight"},[i("span",{staticClass:"mord mtight"},[s._v("3")]),i("span",{staticClass:"mord mtight"},[s._v("8")])])])])])])])])])])])])]),s._v("。如果每纳秒产生 1 兆个 UUID，要花 100 亿年才会将 UUID 耗尽。")],1),s._v(" "),i("p",[s._v("生成的 UUID 是由 8-4-4-4-12 格式的数据组成，其中 32 个字符和 4 个连字符' - '。")]),s._v(" "),i("div",{staticClass:"anchor",attrs:{id:"版本1：基于时间的-uuid"}},[s._v("版本1：基于时间的 UUID")]),i("p",[s._v("基于时间的 UUD 通过计算当前 "),i("strong",[s._v("时间戳、随机数和机器 MAC")]),s._v(" 地址得到。由于在算法中使用了 MAC 地址，这个版本的 UUD 可以保证在全球范围的唯一性。但与此同时，使用 MAC 地址会带来安全性问题，这就是这个版本 UUD 受到批评的地方。如果应用只是在局域网中使用，也可以使用退化的算法，以 IP 地址来代替 MAC 地址（不考虑手动更改 MAC 地址的情况）。")]),s._v(" "),i("div",{staticClass:"anchor",attrs:{id:"版本2：dce-安全的-juid"}},[s._v("版本2：DCE 安全的 JUID")]),i("p",[s._v("DCE（Distributed Computing Environment）安全的 UUID，和基于时间的 UUID 算法相同，但会 "),i("strong",[s._v("把时间戳的前 4 位置换为 POSIX 的 UID 或 GD")]),s._v("。这个版本的 UUID 在实际中较少用到。")]),s._v(" "),i("div",{staticClass:"anchor",attrs:{id:"版本3：基于名字的-uuid（md5）"}},[s._v("版本3：基于名字的 UUID（MD5）")]),i("p",[s._v("基于名字的 UUD 通过 "),i("strong",[s._v("计算名字和命名空间的 MD5 散列值")]),s._v(" 得到。这个版本的 UUD 保证了：相同命名空间中不同名字生成的 UUD 的唯一性；不同命名空间的 UUD 的唯一性；相同名字空间中相同名字的 UUID 重复生成是相同的。")]),s._v(" "),i("div",{staticClass:"anchor",attrs:{id:"版本4：随机-uuid"}},[s._v("版本4：随机 UUID")]),i("p",[s._v("根据 "),i("strong",[s._v("随机数或者伪随机数")]),s._v(" 生成UUD。这种UUD产生重复的概率是可以计算出来的，但是重复的可能性可以忽略不计。")]),s._v(" "),i("div",{staticClass:"anchor",attrs:{id:"版本5：基于名字的-uuid（sha1）"}},[s._v("版本5：基于名字的 UUID（SHA1）")]),i("p",[s._v("和版本 3 的 UUID 算法类似，只是 "),i("strong",[s._v("散列值计算使用 SHA1（Secure Hash Algorithm1）算法。")])]),s._v(" "),i("h2",{attrs:{id:"_3-3-数据库自增-id"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-数据库自增-id"}},[s._v("#")]),s._v(" 3.3 数据库自增 ID")]),s._v(" "),i("p",[s._v("将分布式系统中数据库的同一个业务表的自增 ID 设计成不一样的起始值，然后设置固定的步长，步长的值即为分库的数量或分表的数量。")]),s._v(" "),i("p",[s._v("以 MySQL 举例，设置 auto_increment_offset 和 auto_increment_increment 来保证 ID 自增。")]),s._v(" "),i("p",[s._v("假设有三台机器，则 DB1 中 order 表的起始 ID 值为 1，DB2 中 order 表的起始值为 2，DB3 中 order 表的起始值为 3，它们自增的步长都为 3，则它们的 ID 生成范围如下：")]),s._v(" "),i("p",[i("img",{attrs:{src:a(614),alt:"image-20230824104739147.drawio"}})]),s._v(" "),i("h2",{attrs:{id:"_3-4-基于-redis-实现"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-基于-redis-实现"}},[s._v("#")]),s._v(" 3.4 基于 Redis 实现")]),s._v(" "),i("p",[s._v("Redis 实现分布式唯一 ID 主要是通过提供像 INCR 和 INCRBY 这样的自增原子命令，由于 Redis 自身的单线程的特点，能保证生成的 ID 肯定是唯一有序的。")]),s._v(" "),i("h2",{attrs:{id:"_3-5-雪花算法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-雪花算法"}},[s._v("#")]),s._v(" 3.5 雪花算法")]),s._v(" "),i("p",[s._v("雪花算法（Snowflake）是由 Twitter 开源的分布式 ID 生成算法，以划分命名空间的方式将 64-bit 位分割成多个部分，每个部分代表不同的含义。")]),s._v(" "),i("p",[s._v("具体的格式如下：")]),s._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[s._v("0 | 0000000000 0000000000 0000000000 000000000 | 00000 | 00000 | 000000000000\n")])])]),i("p",[s._v("第 1 位为符号位，固定为 0；接下来的 41 位为 "),i("strong",[s._v("时间戳（毫秒级）")]),s._v("，记录了生成 ID 的时间；然后是 "),i("strong",[s._v("10 位的机器 ID")]),s._v("，5 位数据中心 ID 和 5 位工作机器 ID，标识不同的机器；最后是 "),i("strong",[s._v("12 位的序列号")]),s._v("，表示在同一毫秒内生成的多个 ID 的顺序。")])])}),[],!1,null,null,null);t.default=e.exports},614:function(s,t,a){s.exports=a.p+"assets/img/image-20230824104739147.drawio.9afa3665.png"}}]);