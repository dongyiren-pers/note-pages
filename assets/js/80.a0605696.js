(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{1053:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"第6章-异常处理和日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第6章-异常处理和日志"}},[a._v("#")]),a._v(" 第6章 异常处理和日志")]),a._v(" "),n("h2",{attrs:{id:"_6-1-异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-异常"}},[a._v("#")]),a._v(" 6.1 异常")]),a._v(" "),n("p",[a._v("对于异常情况，例如，可能造成程序崩溃的错误输入，Java 使用一种称为异常处理（exception handing）的错误捕获机制处理。Java 中的异常处理与 C++ 或Delphi 中的异常处理十分类似。")]),a._v(" "),n("p",[a._v("异常处理的任务就是将控制权从错误产生的地方转移给能够处理这种情况的错误处理器。")]),a._v(" "),n("p",[a._v("对于方法中的一个错误，传统的做法是返回一个特殊的错误码，由调用方法分析。 例如，对于一个从文件中读取信息的方法来说，返回值通常不是标准字符，而是一个  -1 ，表示文件结束。 这种处理方式对于很多异常状况都是可行的。")]),a._v(" "),n("p",[a._v("遗憾的是，并不是在任何情况下都能够返回一个错误码。有可能无法明确地将有效数据与无效数据加以区分。一个返回整型的方法就不能简单地通过返回 -1 表示错误，因为 -1 很可能是一个完全合法的结果。")]),a._v(" "),n("p",[a._v("在 Java 中，如果某个方法不能够采用正常的途径完整它的任务，就可以通过另外一个路径退出方法。在这种情况下，方法并不返回任何值，而是"),n("strong",[a._v("抛出")]),a._v("（throw）一个封装了错误信息的对象。需要注意的是，这个方法将会立刻退出，并不返回任何值。此外，调用这个方法的代码也将无法继续执行，取而代之的是，异常处理机制开始搜索能够处理这种异常状况的"),n("strong",[a._v("异常处理器")]),a._v("（exception handler）。")]),a._v(" "),n("h3",{attrs:{id:"异常分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常分类"}},[a._v("#")]),a._v(" 异常分类")]),a._v(" "),n("p",[a._v("在 Java 中，异常对象都是派生于 Throwable 类的一个实例。稍后还可以看到，如果 Java 中内置的异常类不能够满足需求，用户可以创建自己的异常类。")]),a._v(" "),n("p",[a._v("下图是 Java 异常层次结构的一个简化示意图：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(718),alt:"java-basic-exception-1"}})]),a._v(" "),n("p",[a._v("需要注意的是，所有的异常都是由 Throwable 继承而来，但在下一层立即分解为两个分支： Error 和 Exception 。")]),a._v(" "),n("p",[n("strong",[a._v("Error 层次结构描述了 Java 运行时系统的内部错误和资源耗尽错误")]),a._v("。应用程序不应抛出这种类型的对象。如果出现了这样的内部错误，除了通告给用户，并尽力使程序安全地终止之外，再也无能为力了。")]),a._v(" "),n("p",[a._v("在设计 Java 程序时，需要关注 Exception 层次结构。这个层次结构又分解为两个分支：一个分支派生于 RuntimeException ；另一个分支包含其他异常。 划分两个分支的规则是："),n("strong",[a._v("由程序错误导致的异常属于 RuntimeException；而程序本身没有问题，但由于像 I/O 错误这类问题导致的异常属于其他异常。")])]),a._v(" "),n("p",[a._v("Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为"),n("strong",[a._v("非受查（unchecked）异常")]),a._v("，所有其他的异常称为"),n("strong",[a._v("受查（checked）异常")]),a._v("。编译器将核查是否为所有的受查异常提供了异常处理器。")]),a._v(" "),n("h3",{attrs:{id:"声明受查异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明受查异常"}},[a._v("#")]),a._v(" 声明受查异常")]),a._v(" "),n("p",[a._v("如果遇到了无法处理的情况，那么 Java 的方法可以抛出一个异常。这个道理很简单：一个方法不仅需要告诉编译器将要返回什么值，还要告诉编译器有可能发生什么错误。")]),a._v(" "),n("p",[a._v("例如，一段读取文件的代码知道有可能读取的文件不存在，或者内容为空，试图处理文件信息的代码需要通知编译器可能会抛出 IOException 类的异常。")]),a._v(" "),n("p",[n("strong",[a._v("方法应该在其首部声明所有可能抛出的异常。")]),a._v(" 这样可以从首部反映出这个方法可能抛出哪类受查异常。例如，下面是标准类库中提供的 FilelnputStream 类的一个构造器的声明：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileNotFoundException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("这个声明表示这个构造器将根据给定的 String 参数产生一个 FilelnputStream 对象，但也有可能抛出一个 FileNotFoundException 异常。如果发生了这种糟糕情况，构造器将不会初始化一个新的 FilelnputStream 对象，而是抛出一个 FileNotFoundException 类对象。如果这个方法真的抛出了这样一个异常对象，运行时系统就会开始搜索异常处理器，以便知道如何处理 FileNotFoundException 对象。")]),a._v(" "),n("p",[a._v("在自己编写方法时，不必将所有可能抛出的异常都进行声明。遇到下面 4 种情况时应该抛出异常：")]),a._v(" "),n("ul",[n("li",[a._v("调用一个抛出受查异常的方法，例如，FilelnputStream 构造器。")]),a._v(" "),n("li",[a._v("程序运行过程中发现错误，并且利用 throw 语句抛出一个受查异常。")]),a._v(" "),n("li",[a._v("程序出现错误，例如，"),n("code",[a._v("a[-1] = 0")]),a._v(" 会抛出一个 ArraylndexOutOfBoundsException 非受查异常。")]),a._v(" "),n("li",[a._v("Java 虚拟机和运行时库出现的内部错误。")])]),a._v(" "),n("p",[a._v("如果出现前两种情况之一，则必须告诉调用这个方法的程序员有可能抛出异常。因为任何一个抛出异常的方法都有可能是一个死亡陷阱。如果没有处理器捕获这个异常，当前执行的线程就会结束。")]),a._v(" "),n("p",[a._v("如果一个方法有可能抛出多个受查异常类型，必须在方法的首部列出所有的异常类，并用逗号隔开。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Image")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadImage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileNotFoundException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[n("strong",[a._v("但是，不需要声明 Java 的内部错误，即从 Error 继承的错误")]),a._v("。任何程序代码都具有抛出那些异常的潜能，而我们对其没有任何控制能力。")]),a._v(" "),n("p",[n("strong",[a._v("同样，不需要声明从 RuntimeException 继承的非受查异常")]),a._v("。这些运行时错误完全在我们的控制之下，应将更多的时间花费在修正程序中的错误上，而不是说明这些错误发生的可能性上。")]),a._v(" "),n("p",[a._v("一个方法必须声明所有可能抛出的受查异常，而非受查异常要么不可控制（Error），要么就应该避免发生（RuntimeException）。如果方法没有声明所有可能发生的受查异常，编译器就会发出一个错误消息。")]),a._v(" "),n("p",[n("strong",[a._v("如果类中的一个方法声明将会抛出一个异常，而这个异常是某个特定类的实例时，则这个方法有可能抛出一个这个类的异常，或者这个类的任意一个子类的异常")]),a._v("。例如，FileInputStream 构造器声明将有可能抛出一个 IOExcetion 异常，然而并不知道具体是哪种 IOException 异常。既可能是 IOException 异常，也可能是其子类的异常，例如 FileNotFoundException。")]),a._v(" "),n("h3",{attrs:{id:"如何抛出异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何抛出异常"}},[a._v("#")]),a._v(" 如何抛出异常")]),a._v(" "),n("p",[a._v("假设在程序代码中发生了一些很糟糕的事情。readData 方法正在读取一个首部具有下列信息的文件：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Content-length：1024\n")])])]),n("p",[a._v("然而，读到 733 个字符之后文件就结束了。我们认为这是一种不正常的情况，希望抛出一个异常。")]),a._v(" "),n("p",[a._v("EOFException 异常描述的是 “在输入过程中，遇到了一个未预期的 EOF 后的信号”。这正是我们要抛出的异常。下面是抛出这个异常的示例：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("div",{staticClass:"highlight-lines"},[n("div",{staticClass:"highlighted"},[a._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[a._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" readData "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// EOF encountered")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("对于一个已经存在的异常类，将其抛出非常容易。在这种情况下：")]),a._v(" "),n("ol",[n("li",[a._v("找到一个合适的异常类。")]),a._v(" "),n("li",[a._v("创建这个类的一个对象。")]),a._v(" "),n("li",[a._v("将对象抛出 。")])]),a._v(" "),n("p",[a._v("一旦方法抛出了异常，这个方法就不可能返回到调用者。不必为返回的默认值或错误代码担忧。")]),a._v(" "),n("blockquote",[n("p",[n("strong",[a._v("C++ 注释")]),a._v("：在 Java 中，只能抛出 Throwable 子类的对象，而在 C++ 中，却可以抛出任何类型的值。")])]),a._v(" "),n("h3",{attrs:{id:"创建异常类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建异常类"}},[a._v("#")]),a._v(" 创建异常类")]),a._v(" "),n("p",[a._v("在程序中，可能会遇到任何标准异常类都没有能够充分地描述清楚的问题。在这种情况下，需要创建自己的异常类。"),n("strong",[a._v("我们需要做的只是定义一个派生于 Exception 的类，或者派生于 Exception 子类的类。")])]),a._v(" "),n("p",[a._v("习惯上，定义的类应该包含两个构造器， 一个是默认的构造器；另一个是带有详细描述信息的构造器。超类 Throwable 的 toString 方法将会打印出这些详细信息，这在调试中非常有用。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileFormatException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileFormatException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileFormatException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" gripe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("gripe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("现在，就可以抛出自己定义的异常类型了。")]),a._v(" "),n("h2",{attrs:{id:"_6-2-捕获异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-捕获异常"}},[a._v("#")]),a._v(" 6.2 捕获异常")]),a._v(" "),n("p",[a._v("到目前为止，已经知道如何抛出一个异常。这个过程十分容易。只要将其抛出就不用理睬了。当然，有些代码必须捕获异常。捕获异常需要进行周密的计划。")]),a._v(" "),n("h3",{attrs:{id:"捕获异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常"}},[a._v("#")]),a._v(" 捕获异常")]),a._v(" "),n("p",[a._v("如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息，其中包括异常的类型和堆楼的内容。")]),a._v(" "),n("p",[a._v("要想捕获一个异常，必须设置 try/catch 语句块。最简单的 try 语句块如下所示：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// code")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExceptionType")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// handler for this type")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("如果在 try 语句块中的任何代码抛出了一个在 catch 子句中说明的异常类，那么")]),a._v(" "),n("ul",[n("li",[a._v("程序将跳过 try 语句块的其余代码。")]),a._v(" "),n("li",[a._v("程序将执行 catch 子句中的处理器代码。")])]),a._v(" "),n("p",[a._v("如果在 try 语句块中的代码没有抛出任何异常，那么程序将跳过 catch 子句。")]),a._v(" "),n("p",[a._v("如果方法中的任何代码抛出了一个在 catch 子句中没有声明的异常类型，那么这个方法就会立刻退出。希望调用者为这种类型的异常设计了 catch 子句。")]),a._v(" "),n("p",[n("strong",[a._v("如果调用了一个抛出受查异常的方法，就必须对它进行处理，或者继续传递。")])]),a._v(" "),n("p",[a._v("如果编写一个覆盖超类的方法，而这个方法又没有抛出异常，那么这个方法就必须捕获方法代码中出现的每一个受查异常。"),n("strong",[a._v("不允许在子类的 throws 说明符中出现超过超类方法所列出的异常类范围。")])]),a._v(" "),n("h3",{attrs:{id:"捕获多个异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#捕获多个异常"}},[a._v("#")]),a._v(" 捕获多个异常")]),a._v(" "),n("p",[a._v("在一个 try 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理。可以按照下列方式为每个异常类型使用一个单独的 catch 子句：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// code that might throw exceptions")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileNotFoundException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// emergency action for missing files")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnknownHostException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// emergency action for unknown hosts")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// emergency action for all other I/O problems")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("在 Java SE 7 中，同一个 catch 子句中可以捕获多个异常类型。 例如，假设对应缺少文件和未知主机异常的动作是一样的，就可以合并 catch 子句：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// code that might throw exceptions")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileNotFoundException")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnknownHostException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// emergency action for missing files and unknown hosts")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// emergency action for all other I/O problems")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("只有当捕获的异常类型彼此之间不存在子类关系时才需要这个特性。")]),a._v(" "),n("blockquote",[n("p",[n("strong",[a._v("注释")]),a._v("：捕获多个异常时，异常变量隐含为 final 变量。")])]),a._v(" "),n("h3",{attrs:{id:"再次抛出异常与异常链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#再次抛出异常与异常链"}},[a._v("#")]),a._v(" 再次抛出异常与异常链")]),a._v(" "),n("p",[a._v("在 catch 子句中可以抛出一个异常，这样做的目的是改变异常的类型。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// access the database ")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SQLException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ServletException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"database error: "')]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("有一种更好的处理方法，将原始异常设置为新异常的 “原因”：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// access the database ")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SQLException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwab1e")]),a._v(" se "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ServletException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"database error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    se"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("initCause")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" se"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("当捕获到异常时，就可以使用下面这条语句重新得到原始异常：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" se"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getCause")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("强烈建议使用这种包装技术。这样可以让用户抛出子系统中的高级异常，而不会丢失原始异常的细节。")]),a._v(" "),n("h3",{attrs:{id:"finally-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#finally-语句"}},[a._v("#")]),a._v(" finally 语句")]),a._v(" "),n("p",[a._v("当代码抛出一个异常时，就会终止方法中剩余代码的处理，并退出这个方法的执行。如果方法获得了一些在退出方法之前必须被回收的资源，并且只有这个方法自己知道，那么就会产生资源回收问题。一种解决方案是捕获并重新抛出所有的异常。但是，这种解决方案比较乏味，这是因为需要在两个地方清除所分配的资源。一个在正常的代码中；另一个在异常代码中。")]),a._v(" "),n("p",[a._v("Java 有一种更好的解决方案，这就是 finally 子句。")]),a._v(" "),n("p",[n("strong",[a._v("不管是否有异常被捕获，finally 子句中的代码都被执行")]),a._v("。下面的示例将在所有情况下关闭文件。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InputStream")]),a._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// code that might throw exception")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// show error message")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("在上面这段代码中，有下列 3 种情况会执行 finally 子句：")]),a._v(" "),n("ul",[n("li",[a._v("代码没有抛出异常。在这种情况下，程序首先执行 try 语句块中的全部代码，然后执行 finally 子句中的代码。随后，继续执行 try 语句块之后的第一条语句。")]),a._v(" "),n("li",[a._v("抛出一个在 catch 子句中捕获的异常。在上面的示例中就是 IOException 异常。在这种情况下，程序将执行 try 语句块中的代码，直到发生异常为止。此时，将跳过 try 语句块中的剩余代码，转去执行与该异常匹配的 catch 子句中的代码，最后执行 finally 子句中的代码。")]),a._v(" "),n("li",[a._v("代码抛出了一个异常，但这个异常不是由 catch 子句捕获的。在这种情况下，程序将执行 try 语句块中的语句，直到有异常被抛出为止。此时，将跳过 try 语句块中的剩余代码，然后再执行 finally 子句中的语句，并将异常抛给这个方法的调用者。")])]),a._v(" "),n("p",[n("strong",[a._v("try 语句可以只有 finally 子句，而没有 catch 子句")]),a._v("。无论在 try 语句块中是否遇到异常，finally 子句中的语句都会被执行。当然，如果遇到一个异常，这个异常将会被重新抛出，必须由另一个 catch 子句捕获。")]),a._v(" "),n("blockquote",[n("p",[n("strong",[a._v("警告")]),a._v("：当 finally 子句包含 return 语句时，将会覆盖 try 语句块中 return 语句的返回值。")])]),a._v(" "),n("h3",{attrs:{id:"带资源的-try-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带资源的-try-语句"}},[a._v("#")]),a._v(" 带资源的 try 语句")]),a._v(" "),n("p",[a._v("假设资源属于一个实现了 AutoCloseable 接口的类，Java SE 7 为打开和关闭这类资源提供了一个很有用的快捷方式。AutoCloseable 接口有一个方法：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" close "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v("\n")])])]),n("blockquote",[n("p",[n("strong",[a._v("注释")]),a._v("：另外，还有一个 Closeable 接口。这是 AutoCloseable 的子接口，也包含一个 close 方法。不过，这个方法声明为抛出一个 IOException。")])]),a._v(" "),n("p",[n("strong",[a._v("带资源的 try 语句（try-with-resources）的最简形式为")]),a._v("：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Resource")]),a._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    work "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("res")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("try 块退出时，会自动调用 "),n("code",[a._v("res.close()")]),a._v("。下面给出一个典型的例子，读取一个文件中的所有单词：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/share/dict/words"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"UTF-8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("这个块正常退出时，或者存在一个异常时，都会调用 "),n("code",[a._v("in.close()")]),a._v(" 方法，就好像使用了 finally 块一样。还可以指定多个资源。例如：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/share/dict/words"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"UTF-8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintWriter")]),a._v(" out "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintWriter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"out. txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("toUpperCase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("不论这个块如何退出，in 和 out 都会关闭。")]),a._v(" "),n("p",[a._v("对于常规的 try 语句，如果 try 块抛出一个异常，而且 close 方法也抛出一个异常，这就会带来一个难题。带资源的 try 语句可以很好地处理这种情况。try 块抛出的异常会正常抛出，而 close 方法抛出的异常会 “被抑制”。这些异常将被自动捕获，并由 addSuppressed 方法增加到 try 块抛出的异常。如果对这些异常感兴趣，可以调用 getSuppressed 方法，它会得到从 close 方法抛出并被抑制的异常列表。")]),a._v(" "),n("blockquote",[n("p",[n("strong",[a._v("注释")]),a._v("：带资源的 try 语句可以有 catch 子句和一个 finally 子句。这些子句会在关闭资源之后执行。")])]),a._v(" "),n("h3",{attrs:{id:"分析堆栈轨迹元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分析堆栈轨迹元素"}},[a._v("#")]),a._v(" 分析堆栈轨迹元素")]),a._v(" "),n("p",[n("strong",[a._v("堆栈轨迹")]),a._v("（stack trace）是一个方法调用过程的列表，它包含了程序执行过程中方法调用的特定位置。")]),a._v(" "),n("p",[a._v("可以调用 Throwable 类的 printStackTrace 方法访问堆栈轨迹的文本描述信息。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringWriter")]),a._v(" out "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringWriter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintWriter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" description "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("一种更灵活的方法是使用 getStackTrace 方法，它会得到 StackTraceElement 对象的一个数组，可以在你的程序中分析这个对象数组。例如：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTraceElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" frames "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTraceElement")]),a._v(" frame "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" frames"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// analyze frame")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("StackTraceElement 类含有能够获得文件名和当前执行的代码行号的方法，同时，还含有能够获得类名和方法名的方法。")]),a._v(" "),n("p",[a._v("静态的 Thread.getAllStackTrace 方法，它可以产生所有线程的堆栈轨迹。例如：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTraceElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getA11StackTraces")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("keySet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTraceElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" frames "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// analyze frames")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("h2",{attrs:{id:"_6-3-断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-断言"}},[a._v("#")]),a._v(" 6.3 断言")]),a._v(" "),n("h3",{attrs:{id:"断言的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#断言的概念"}},[a._v("#")]),a._v(" 断言的概念")]),a._v(" "),n("p",[a._v("假设确信某个属性符合要求，并且代码的执行依赖于这个属性。例如，需要计算")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("sqrt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("我们确信，这里的 x 是一个非负数值。然而，还是希望进行检查，以避免让不合法的数值参与计算操作。当然，可以抛出一个异常：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IllegalArgumentException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"x < 0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("但这段代码会一直保留在程序中，即使测试完毕也不会自动地删除。如果在程序中含有大量的这种检查，程序运行起来会相当慢。断言机制允许在测试期间向代码中插入一些检查语句。当代码发布时，这些插入的检测语句将会被自动地移走。")]),a._v(" "),n("p",[a._v("Java 引入了关键字 assert。这个关键字有两种形式：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("assert")]),a._v(" 条件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("和")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("assert")]),a._v(" 条件 "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 表达式"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("这两种形式都会对条件进行检测，如果结果为 false，则抛出一个 AssertionError 异常。在第二种形式中，表达式将被传入 AssertionError 的构造器，并转换成一个消息字符串。")]),a._v(" "),n("p",[a._v("要想断言 x 是一个非负数值，只需要简单地使用下面这条语句")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("assert")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("或者将 x 的实际值传递给 AssertionError 对象，从而可以在后面显示出来。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("assert")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"启用和禁用断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启用和禁用断言"}},[a._v("#")]),a._v(" 启用和禁用断言")]),a._v(" "),n("p",[a._v("在默认情况下，断言被禁用。可以在运行程序时用 "),n("code",[a._v("-enableassertions")]),a._v(" 或 "),n("code",[a._v("-ea")]),a._v(" 选项启用：")]),a._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[a._v("java -enableassertions MyApp\n")])])]),n("p",[a._v("需要注意的是，在启用或禁用断言时不必重新编译程序。启用或禁用断言是类加载器的功能。断言被禁用时，类加载器将跳过断言代码，因此，不会降低程序运行的速度。")]),a._v(" "),n("p",[a._v("可以在某个类或整个包中使用断言，例如：")]),a._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[a._v("java -ea:MyClass -ea:com.mycompany.mylib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". MyApp\n")])])]),n("p",[a._v("可以用选项 "),n("code",[a._v("-disabIeassertions")]),a._v(" 或 "),n("code",[a._v("-da")]),a._v(" 禁用某个特定类和包的断言：")]),a._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[a._v("java -ea:"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(" -da:MyClass MyApp\n")])])]),n("p",[a._v("启用和禁用所有断言的 "),n("code",[a._v("-ea")]),a._v(" 和 "),n("code",[a._v("-da")]),a._v(" 开关不能应用到那些没有类加载器的 “系统类” 上。对于这些系统类来说，需要使用 "),n("code",[a._v("-enablesystemassertions/-esa")]),a._v(" 开关启用断言。")]),a._v(" "),n("h3",{attrs:{id:"何时使用断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何时使用断言"}},[a._v("#")]),a._v(" 何时使用断言")]),a._v(" "),n("p",[a._v("什么时候应该选择使用断言呢？请记住下面几点：")]),a._v(" "),n("ul",[n("li",[a._v("断言失败是致命的、不可恢复的错误。")]),a._v(" "),n("li",[a._v("断言检查只用于开发和测阶段。")])]),a._v(" "),n("p",[a._v("因此，不应该使用断言向程序的其他部分通告发生了可恢复性的错误，或者，不应该作为程序向用户通告问题的手段。断言只应该用于在测试阶段确定程序内部的错误位置。")]),a._v(" "),n("h2",{attrs:{id:"_6-4-日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-日志"}},[a._v("#")]),a._v(" 6.4 日志")]),a._v(" "),n("p",[a._v("记录日志 API 的优点：")]),a._v(" "),n("ul",[n("li",[a._v("可以很容易地取消全部日志记录，或者仅仅取消某个级别的日志，而且打开和关闭这个操作也很容易。")]),a._v(" "),n("li",[a._v("可以很简单地禁止日志记录的输出，因此，将这些日志代码留在程序中的开销很小。")]),a._v(" "),n("li",[a._v("日志记录可以被定向到不同的处理器，在控制台中显示，或存储在文件中等。")]),a._v(" "),n("li",[a._v("日志记录器和处理器都可以对记录进行过滤。过滤器可以根据过滤实现器制定的标准丢弃无用记录项。")]),a._v(" "),n("li",[a._v("日志记录可以采用不同的方式格式化，例如，纯文本或XML。")]),a._v(" "),n("li",[a._v("应用程序可以使用多个日志记录器，它们使用类似包名的这种具有层次结构的名字，例如，com.mycompany.myappo。")]),a._v(" "),n("li",[a._v("在默认情况下，日志系统的配置由配置文件控制。如果需要的话，应用程序可以替换这个配置。")])]),a._v(" "),n("h3",{attrs:{id:"基本日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本日志"}},[a._v("#")]),a._v(" 基本日志")]),a._v(" "),n("p",[a._v("要生成简单的日志记录，可以使用全局日志记录器（global logger）并调用其 info 方法：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getGlobal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"File->Open menu item selected"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("在默认情况下，这条记录将会显示以下内容：·")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("May 10, 2013 10:12:15 PM LoggingImageViewer fileOpen\nINFO: File->Open menu item selected\n")])])]),n("p",[a._v("但是，如果在适当的地方（如 main 开始）调用")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getGlobal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setLevel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("OFF"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("将会取消所有的日志。")]),a._v(" "),n("h3",{attrs:{id:"高级日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级日志"}},[a._v("#")]),a._v(" 高级日志")]),a._v(" "),n("p",[a._v("在一个专业的应用程序中，不要将所有的日志都记录到一个全局日志记录器中，而是自定义日志记录器。")]),a._v(" "),n("p",[a._v("可以调用 getLogger 方法创建或获取记录器：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),a._v(" myLogger "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.mycompany.myapp"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("与包名类似，日志记录器名也具有层次结构。事实上，与包名相比，日志记录器的层次性更强。对于包来说，一个包的名字与其父包的名字之间没有语义关系，但是日志记录器的父与子之间将共享某些属性。例如，如果对 com.mycompany 日志记录器设置了日志级别，它的子记录器也会继承这个级别。")]),a._v(" "),n("p",[a._v("通常，有以下 7 个日志记录器级别：")]),a._v(" "),n("ul",[n("li",[a._v("SEVERE")]),a._v(" "),n("li",[a._v("WARNING")]),a._v(" "),n("li",[a._v("INFO")]),a._v(" "),n("li",[a._v("CONFIG")]),a._v(" "),n("li",[a._v("FINE")]),a._v(" "),n("li",[a._v("FINER")]),a._v(" "),n("li",[a._v("FINEST")])]),a._v(" "),n("p",[a._v("在默认情况下，只记录前三个级别。")]),a._v(" "),n("p",[a._v("另外，还可以使用 Level.ALL 开启所有级别的记录，或者使用 Level.OFF 关闭所有级别的记录。")]),a._v(" "),n("p",[a._v("对于所有的级别有下面几种记录方法：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("warning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("fine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("同时，还可以使用 log 方法指定级别，例如：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("FINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("默认的日志记录将显示包含日志调用的类名和方法名，如同堆栈所显示的那样。但是，如果虚拟机对执行过程进行了优化，就得不到准确的调用信息。此时，可以调用 logp 方法获得调用类和方法的确切位置，这个方法的签名为：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("logp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),a._v(" l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" className"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" methodName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("p",[a._v("记录日志的常见用途是记录不可预料的异常。使用下面两个方法提供日志记录中包含的异常描述内容。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("throwing")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" className"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" methodName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),a._v(" l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("h3",{attrs:{id:"修改日志管理器配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改日志管理器配置"}},[a._v("#")]),a._v(" 修改日志管理器配置")]),a._v(" "),n("p",[a._v("可以通过编辑配置文件来修改日志系统的各种属性。在默认情况下，配置文件存在于：jre/lib/logging.properties")]),a._v(" "),n("p",[a._v("要想使用另一个配置文件，就要将 java.util.logging.config.file 特性设置为配置文件的存储位置，并用下列命令启动应用程序：")]),a._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[a._v("java -Djava.util.logging.config.file"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("configFile MainClass\n")])])]),n("p",[a._v("要想修改默认的日志记录级别，就需要编辑配置文件，并修改以下命令行")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v(".level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("INFO")]),a._v("\n")])])]),n("p",[a._v("可以通过添加以下内容来指定自己的日志记录级别。在日志记录器名后面添加后缀 "),n("code",[a._v(".level")]),a._v("。")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("com.mycompany.myapp.level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("FINE")]),a._v("\n")])])]),n("p",[a._v("日志记录并不将消息发送到控制台上，这是处理器的任务。另外，处理器也有级别。要想在控制台上看到 FINE 级别的消息，就需要进行下列设置")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("java.util.logging.ConsoleHandler.level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("FINE")]),a._v("\n")])])]),n("h3",{attrs:{id:"本地化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本地化"}},[a._v("#")]),a._v(" 本地化")]),a._v(" "),n("p",[a._v("我们可能希望将日志消息本地化，以便让全球的用户都可以阅读它。")]),a._v(" "),n("p",[a._v("本地化的应用程序包含资源包（resource bundle）中的本地特定信息。资源包由各个地区（例如，美国或德国）的映射集合组成。例如，某个资源包可能将字符串 “readingFile” 映射成英文的 “Reading file” 或者德文的 “Achtung！Datei wird eingelesen”。")]),a._v(" "),n("p",[a._v("每个资源包都有一个名字（如 com.mycompany.logmessages）。要想将映射添加到一个资源包中，需要为每个地区创建一个文件。英文消息映射位于 com/mycompany/logmessages_en.properties 文件中；德文消息映射位于 com/mycompany/logmessages_de.properties 文件中。（en 和 de 是语言编码）。可以将这些文件与应用程序的类文件放在一起，以便 ResourceBundle 类自动地对它们进行定位。这些文件都是纯文本文件，其组成如下所示：")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("readingFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("Achtung! Datei wird eingelesen")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("renamingFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("Datei wird umbenannt")]),a._v("\n...\n")])])]),n("p",[a._v("在请求日志记录器时，可以指定一个资源包：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),a._v(" logger "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("loggerName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com. mycompany.logmessages"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("然后，为日志消息指定资源包的关键字，而不是实际的日志消息字符串：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"readingFile"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("通常需要在本地化的消息中增加一些参数，消息可能包括占位符 {0}、{1} 等。例如，要在日志消息中包含文件名，就应该用下列方式包括占位符：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Reading file {0}.\nAchtung! Datei {0} wird eingelesen.\n")])])]),n("p",[a._v("然后，通过调用下面的一个方法向占位符传递具体的值：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"readingFile"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" fileName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"renamingFile"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("oldName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" newName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"日志处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志处理器"}},[a._v("#")]),a._v(" 日志处理器")]),a._v(" "),n("p",[a._v("在默认情况下，日志记录器将记录发送到 ConsoleHandler 中，并由它输出到 System.err 流中。特别是，日志记录器还会将记录发送到父处理器中，而最终的处理器有一个 ConsoleHandler。")]),a._v(" "),n("p",[a._v("与日志记录器一样，处理器也有日志记录级别。对于一个被记录的日志记录，它的日志记录级别必须高于日志记录器和处理器的阈值。日志管理器配置文件设置的默认控制台处理器的日志记录级别为")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("java.util.logging.ConsoleHandler.level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("INFO")]),a._v("\n")])])]),n("p",[a._v("要记录 FINE 级别的日志，就必须修改配置文件中的默认日志记录级别和处理器级别。另外，还可以绕过配置文件，安装自己的处理器。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),a._v(" logger "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.mycompany.myapp"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setlevel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("FINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setUseParentHandlers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Handler")]),a._v(" handler "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsoleHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nhandler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setLevel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("FINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("addHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("默认情况下，日志记录器将记录发送到自己的处理器和父处理器。我们的日志记录器是原始日志记录器的子类，而原始日志记录器将会把所有等于或高于 INFO级别的记录发送到控制台。然而，我们并不想两次看到这些记录。鉴于这个原因，应该将 useParentHandlers 属性设置为 false。")]),a._v(" "),n("p",[a._v("要将日志记录发送到其他地方，就要添加其他的处理器。日志 API 为此提供了两个很有用的处理器，一个是 FileHandler；另一个是 SocketHandler。")]),a._v(" "),n("p",[a._v("可以像下面这样直接将记录发送到默认文件的处理器：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileHandler")]),a._v(" handler "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("addHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("这些记录被发送到用户主目录的 javan.log 文件中，n 是文件名的唯一编号。如果用户系统没有主目录，文件就存储在 C:\\Window 这样的默认位置上。在默认情况下，记录被格式化为 XML。")]),a._v(" "),n("p",[a._v("可以通过设置日志管理器配置文件中的不同参数，或者利用其他的构造器来修改文件处理器的默认行为。")]),a._v(" "),n("h3",{attrs:{id:"过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[a._v("#")]),a._v(" 过滤器")]),a._v(" "),n("p",[a._v("在默认情况下，过滤器根据日志记录的级别进行过滤。每个日志记录器和处理器都可以有一个可选的过滤器来完成附加的过滤。另外，可以通过实现 Filter 接口并定义下列方法来自定义过滤器。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("isLoggable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LogRecord")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("p",[a._v("可以根据自己的标准，对日志记录进行分析，返回 true 表示这些记录应该包含在日志中。")]),a._v(" "),n("p",[a._v("要将一个过滤器安装到一个日志记录器或处理器中，只需要调用 setFilter 方法就可以了。注意，同一时刻最多只能有一个过滤器。")]),a._v(" "),n("h3",{attrs:{id:"格式化器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式化器"}},[a._v("#")]),a._v(" 格式化器")]),a._v(" "),n("p",[a._v("ConsoleHandler 类和 FileHandler 类可以生成文本和XML 格式的日志记录。但是，也可以自定义格式。这需要扩展 Formatter 类并覆盖下面这个方法：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LogRecord")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("p",[a._v("可以根据自己的愿望对记录中的信息进行格式化，并返回结果字符串。在 format 方法中，有可能会调用下面这个方法")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("formatMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LogRecord")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("p",[a._v("这个方法对记录中的部分消息进行格式化、参数替换和本地化应用操作。")]),a._v(" "),n("p",[a._v("很多文件格式（如XML）需要在已格式化的记录的前后加上一个头部和尾部。在这个例子中，要覆盖下面两个方法：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getHead")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Handler")]),a._v(" h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getTail")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Handler")]),a._v(" h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),n("p",[a._v("最后，调用 setFormatter 方法将格式化器安装到处理器中。")])])}),[],!1,null,null,null);t.default=e.exports},718:function(a,t,s){a.exports=s.p+"assets/img/java-basic-exception-1.56346ec5.png"}}]);