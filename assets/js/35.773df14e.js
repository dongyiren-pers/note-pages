(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{1065:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第3章-网络管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第3章-网络管理"}},[t._v("#")]),t._v(" 第3章 网络管理")]),t._v(" "),n("h2",{attrs:{id:"_3-1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-概述"}},[t._v("#")]),t._v(" 3.1 概述")]),t._v(" "),n("h3",{attrs:{id:"什么是-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-io"}},[t._v("#")]),t._v(" 什么是 IO")]),t._v(" "),n("p",[t._v("IO 全程 Input/Output，即数据的读取（接收）或写入（发送）操作，针对不同的数据存储媒介，大致可以分为网络 IO 和磁盘 IO 两种。")]),t._v(" "),n("p",[t._v("而在 Linux 系统中，为了保证系统安全，操作系统将虚拟内存划分为内核空间和用户空间两部分。因此用户进程无法直接操作 IO 设备资源，需要通过系统调用完成对应的 IO 操作。")]),t._v(" "),n("p",[t._v("即此时一个完整的 IO 操作将经历一下两个阶段：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(742),alt:"image-20230919111841409.drawio"}})]),t._v(" "),n("h3",{attrs:{id:"同步和异步、阻塞和非阻塞"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步、阻塞和非阻塞"}},[t._v("#")]),t._v(" 同步和异步、阻塞和非阻塞")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"同步和异步"}},[t._v("同步和异步")]),n("p",[n("strong",[t._v("同步 IO")]),t._v(" 是指用户空间（进程或者线程）是主动发起 IO 请求的一方，系统内核是被动接收方。")]),t._v(" "),n("p",[n("strong",[t._v("异步 IO")]),t._v(" 则反过来，系统内核是主动发起 IO 请求的一方，用户空间是被动接收方。")]),t._v(" "),n("p",[t._v("同步和异步最大的区别就是被调用方的执行方式和返回时机。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方（此时数据已 Ready，调用方可以直接使用）。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"阻塞和非阻塞"}},[t._v("阻塞和非阻塞")]),n("p",[n("strong",[t._v("阻塞 IO")]),t._v(" 指的是需要内核 IO 操作彻底完成后才返回到用户空间执行用户程序的操作指令。")]),t._v(" "),n("p",[n("strong",[t._v("非阻塞 IO")]),t._v(" 指的是用户进程不需要等待内核 IO 操作彻底完成，即可返回用户空间执行后续指令。与此同时，内核会立即返回给用户一个 IO 状态值。")]),t._v(" "),n("p",[t._v("阻塞是指用户进程一直在等待，而不能做别的事情；非阻塞是指用户进程 "),n("strong",[t._v("获得内核返回的状态值")]),t._v(" 就返回自己的空间，可以去做别的事情。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"根据等待时机区分"}},[t._v("根据等待时机区分")]),n("p",[t._v("事实上，在整条 IO 链路中，有两个可能的等待时机：")]),t._v(" "),n("ul",[n("li",[t._v("时机 1：等待读写事件发生")]),t._v(" "),n("li",[t._v("时机 2：等待数据从内核缓冲区拷贝到用户缓冲区")])]),t._v(" "),n("p",[n("strong",[t._v("同步 IO")]),t._v(" 是指需要等待时机 2，而 "),n("strong",[t._v("异步 IO")]),t._v(" 是指不需要等待时机 2，等待内核 "),n("strong",[t._v("将数据从内核缓冲区拷贝到用户缓冲区")]),t._v(" 后通知用户进程。")]),t._v(" "),n("p",[n("strong",[t._v("阻塞 IO")]),t._v(" 是指需要等待时机 1，而 "),n("strong",[t._v("非阻塞 IO")]),t._v(" 是指不需要等待时机 1，用户进程 "),n("strong",[t._v("获得内核返回的状态值")]),t._v(" 就返回自己的空间。")]),t._v(" "),n("h2",{attrs:{id:"_3-2-常见的-io-模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-常见的-io-模型"}},[t._v("#")]),t._v(" 3.2 常见的 IO 模型")]),t._v(" "),n("p",[t._v("常见的网络 IO 模型分为四种：同步阻塞 IO（Blocking IO, BIO）、同步非阻塞 IO（NIO）、IO 多路复用、异步非阻塞 IO（Async IO，AIO），其中 AIO 为异步 IO，其他都是同步 IO。")]),t._v(" "),n("h3",{attrs:{id:"同步阻塞-io-bio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步阻塞-io-bio"}},[t._v("#")]),t._v(" 同步阻塞 IO（BIO）")]),t._v(" "),n("p",[n("strong",[t._v("同步阻塞 IO（Blocking IO, BIO）")]),t._v("： 指的是用户进程（或线程）主动发起，需要等待内核 IO 操作彻底完成后才返回到用户空间的 IO 操作。在 IO 操作过程中，发起 IO 请求的用户进程处于阻塞状态。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(743),alt:"image-20230919153232603"}})]),t._v(" "),n("h3",{attrs:{id:"同步非阻塞-io-nio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步非阻塞-io-nio"}},[t._v("#")]),t._v(" 同步非阻塞 IO（NIO）")]),t._v(" "),n("p",[n("strong",[t._v("同步非阻塞 IO（Non-Blocking IO，NIO）")]),t._v("： 指的是用户进程主动发起，不需要等待内核 IO 操作彻底完成就能立即返回用户空间的 IO 操作。在 IO 操作过程中，发起 IO 请求的用户进程处于非阻塞状态。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(744),alt:"image-20230919154003108"}})]),t._v(" "),n("p",[t._v("当数据 Ready 之后，用户线程仍然会进入阻塞状态，直到数据复制完成。")]),t._v(" "),n("p",[t._v("NIO 实时性好，内核态数据没有 Ready 会立即返回，但频繁的轮询内核，会占用大量的 CPU 资源，降低效率。")]),t._v(" "),n("h3",{attrs:{id:"io-多路复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io-多路复用"}},[t._v("#")]),t._v(" IO 多路复用")]),t._v(" "),n("p",[t._v("IO 多路复用实际上就解决了 NIO 中的频繁轮询 CPU 的问题，并且引入一种新的 select 系统调用。")]),t._v(" "),n("p",[t._v("复用 IO 的基本思路就是通过 select 调用来监控多个 fd（文件描述符），来达到不必为每个 fd 创建一个对应的监控线程的目的，从而减少线程资源创建的开销。一旦某个描述符就绪（一般是内核缓冲区可读/可写），内核就能够将文件描述符的就绪状态返回给用户进程（或者线程），用户空间可以根据文件描述符的就绪状态进行相应的 IO 系统调用。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(745),alt:"image-20230919154638229"}})]),t._v(" "),n("h3",{attrs:{id:"异步非阻塞-io-aio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步非阻塞-io-aio"}},[t._v("#")]),t._v(" 异步非阻塞 IO（AIO）")]),t._v(" "),n("p",[n("strong",[t._v("异步非阻塞 IO（AIO）")]),t._v("：指的是用户空间的线程变成被动接收者，而内核空间成为主动调用者。在异步 IO 模型中，当用户线程收到通知时，数据已经被内核读取完毕并放在用户缓冲区内，内核在 IO 完成后通知用户线程直接使用即可。而此处说的 AIO 通常是一种异步非阻塞 IO。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(746),alt:"image-20230919160917312"}})]),t._v(" "),n("h2",{attrs:{id:"_3-3-io-多路复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-io-多路复用"}},[t._v("#")]),t._v(" 3.3 IO 多路复用")]),t._v(" "),n("h3",{attrs:{id:"什么是-io-多路复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-io-多路复用"}},[t._v("#")]),t._v(" 什么是 IO 多路复用")]),t._v(" "),n("p",[t._v("在 socket 编程中[ClientIp, ClientPort, ServerIp, ServerPort, Protocol] 5 元素可以唯一标识一个 socket 连接，基于这个前提，同一个服务的某个端口 可以和 n 个客户端建立 socket 连接。")]),t._v(" "),n("p",[t._v("因此，每个客户端和服务器的 socket 连接就可以看做”一路“，多个客户端和该服务器的 socket 连接就是”多路“，从而，IO 多路就是多个 socket 连接上的输入输出流，复用就是多个 socket 连接上的输入输出流由一个线程处理。因此 IO 多路复用可以定义如下：")]),t._v(" "),n("p",[t._v("Linux 中的 IO 多路复用是指："),n("strong",[t._v("一个线程处理多个 IO 流")]),t._v("。")]),t._v(" "),n("p",[t._v("先看下基础 socket 的模型，才能与下文 IO 多路复用机制形成对比，伪代码实现如下")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("listenSocket "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 系统调用 socket() 函数，调用创建一个主动 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给主动 socket 绑定地址和端口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将默认的主动 socket 转换为服务器使用的被动 socket（监听 socket）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环监听客户端连接请求")]),t._v("\n   connSocket "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenSocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受客户端连接，获取已连接 socket")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从客户端读取数据，只能同时处理一个客户端")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给客户端返回数据，只能同时处理一个客户端")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("基础 socket 模型，能够实现服务器端和客户端之间的通信，但是程序每调用一次 accept 函数，只能处理一个客户端连接，当有大量的客户端连接时，这种模型处理性能比较差。因此 Linux 提供了高性能的 IO 多路复用机制来解决这种困境。")]),t._v(" "),n("p",[t._v("在 Linux 中，操作系统提供了 select、poll 和 epoll 三种 IO 多路复用机制。")]),t._v(" "),n("h3",{attrs:{id:"select-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-函数"}},[t._v("#")]),t._v(" select 函数")]),t._v(" "),n("p",[t._v("select() 函数原型定义：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n*  参数说明\n*  监听的文件描述符数量__nfds、\n*  被监听描述符的三个集合*__readfds,*__writefds和*__exceptfds\n*  监听时阻塞等待的超时时长*__timeout\n*  return：表示此时有多少个监控的描述符就绪，若超时则为 0，出错为 -1。\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __readfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __writefds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __exceptfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n           "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" __timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("select() 函数有三个 fd_set 集合，表示监听的三类事件，分别是 "),n("strong",[t._v("读数据事件")]),t._v("（readfds 集合）、"),n("strong",[t._v("写数据事件")]),t._v("（writefds 集合）和 "),n("strong",[t._v("异常事件")]),t._v("（__exceptfds 集合），当集合为 NULL 时，代表不需要处理对应的事件。")]),t._v(" "),n("p",[n("strong",[t._v("使用示例：")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 socket 和已连接 socket 的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在socket 上进行监听，将 socket 转为监听 socket")]),t._v("\n\nfd_set rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被监听的描述符集合，关注描述符上的读事件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 rset 数组，使用 FD_ZERO 宏设置每个元素为 0 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 FD_SET 宏设置 rset 数组中位置为 sock_fd 的文件描述符为 1，表示需要监听该文件描述符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置超时时间 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_sec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_usec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 select 函数，检测 rset 数组保存的文件描述符是否已有读事件就绪，返回就绪的文件描述符个数")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_fd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 FD_ISSET 宏，在 rset 数组中检测 sock_fd 对应的文件描述符是否就绪")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 sock_fd 已经就绪，表明已有客户端连接；调用 accept 函数建立连接")]),t._v("\n       conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 rset 数组中位置为 conn_fd 的文件描述符为 1，表示需要监听该文件描述符")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次检查已连接套接字的文件描述符")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 FD_ISSET 宏，在 rset 数组中检测文件描述符是否就绪")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有数据可读，进行读数据处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("select 的缺点：")])]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("每次调用 select 都需要将进程加入到监视 fd 的等待队列，每次唤醒都需要从每个队列中移除。")]),t._v(" 这里涉及了两次遍历，而且每次都要将整个 fd_set 列表传递给内核，有一定的开销。")]),t._v(" "),n("li",[t._v("当函数返回时，系统会将就绪描述符写入 fd_set 中，并将其拷贝到用户空间。进程被唤醒后，用户线程并不知道哪些 fd 收到数据，还需要遍历一次。")]),t._v(" "),n("li",[t._v("受 fd_set 的大小限制，32 位系统最多能监听 1024 个 fd，64 位最多监听 2048 个。")])]),t._v(" "),n("h3",{attrs:{id:"poll-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poll-函数"}},[t._v("#")]),t._v(" poll 函数")]),t._v(" "),n("p",[t._v("poll() 函数原型定义：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* 参数 *__fds 是 pollfd 结构体数组，pollfd 结构体里包含了要监听的描述符，\n* \t以及该描述符上要监听的事件类型\n* 参数 __nfds 表示的是 *__fds 数组的元素个数\n* __timeout 表示 poll 函数阻塞的超时时间\n* return：表示此时有多少个监控的描述符就绪，若超时则为 0，出错为 -1。\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nfds_t")]),t._v(" __nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("pollfd结构体的定义")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行监听的文件描述符")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的事件类型")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" revents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \t \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际发生的事件类型")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("pollfd 结构体中包含了三个成员变量 fd、events 和 revents，分别表示要监听的文件描述符、要监听的事件类型和实际发生的事件类型。")]),t._v(" "),n("p",[t._v("poll 函数与 select 原理相似，都需要来回拷贝全部监听的文件描述符，"),n("strong",[t._v("不同的是：")])]),t._v(" "),n("ul",[n("li",[t._v("poll 函数采用 "),n("strong",[t._v("链表")]),t._v(" 的方式替代原来 select 中 fd_set 结构，因此 "),n("strong",[t._v("可监听文件描述符数量不受限")]),t._v("。")]),t._v(" "),n("li",[t._v("poll 函数返回后，可以通过 pollfd 结构中的内容进行处理就绪文件描述符，相比 select 效率要高。")]),t._v(" "),n("li",[n("strong",[t._v("新增水平触发")]),t._v("：通知程序 fd 就绪后，这次没有被处理，下次 poll 的时候会再次通知同个 fd 已经就绪。")])]),t._v(" "),n("p",[n("strong",[t._v("使用示例：")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听套接字和已连接套接字的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建套接字")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定套接字")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在套接字上进行监听，将套接字转为监听套接字")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll 函数可以监听的文件描述符数量，可以大于 1024")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAX_OPEN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollfd 结构体数组，对应文件描述符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将创建的监听套接字加入 pollfd 数组，并监听其可读事件")]),t._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nmaxfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 client 数组其他元素为-1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 poll 函数，检测 client 数组里的文件描述符是否有就绪的，返回就绪的文件描述符个数")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxfd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果监听套件字的文件描述符有可读事件，则进行处理")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有客户端连接；调用 accept 函数建立连接")]),t._v("\n       conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存已建立连接套接字")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将已建立连接的文件描述符保存到client数组")]),t._v("\n           client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLRDNORM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该文件描述符监听可读事件")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       maxfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次检查已连接套接字的文件描述符")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAX_OPEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("POLLRDNORM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" POLLERR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有数据可读或发生错误，进行读数据处理或错误处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("poll 的缺点：")])]),t._v(" "),n("ul",[n("li",[t._v("和 select 一样，poll 返回后，"),n("strong",[t._v("需要轮询 pollfd 来获取就绪的描述符")]),t._v("。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。")])]),t._v(" "),n("h3",{attrs:{id:"epoll-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll-函数"}},[t._v("#")]),t._v(" epoll 函数")]),t._v(" "),n("p",[t._v("epoll 是 2.6 内核中提出，使用 epoll_event 结构体来记录待监听的 fd 及其监听的事件类型的。")]),t._v(" "),n("p",[t._v("epoll_event 结构体以及 epoll_data 结构体的定义：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" epoll_data\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录文件描述符")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_data_t")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// epoll 监听的事件类型")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_data_t")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应用程序数据")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("epoll 的接口比较简单，一共有三个函数：")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"epoll_create"}},[t._v("epoll_create")]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("创建一个 epoll 的句柄，size 用来告诉内核这个监听的数目一共有多大。epoll 实例内部维护了两个结构，分别是记录要监听的 fd 和已经就绪的 fd，而对于已经就绪的文件描述符来说，它们会被返回给用户程序进行处理。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"epoll_ctl"}},[t._v("epoll_ctl")]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("epoll 的事件注册函数，epoll_ctl 向 epoll 对象中添加、修改或者删除感兴趣的事件，成功返回 0，否则返回 –1。此时需要根据 errno 错误码判断错误类型。它不同于 select() 是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。epoll_wait 方法返回的事件必然是通过 epoll_ctl 添加到 epoll 中的。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"epoll_wait"}},[t._v("epoll_wait")]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("等待事件的产生，类似于 select() 调用。参数 events 用来从内核得到事件的集合，maxevents 是 events 集合的大小，且不大于 epoll_create() 时的 size，参数 timeout 是超时时间（毫秒，0 会立即返回，-1 将不确定或永久阻塞）。函数返回需要处理的事件数目，返回 0 表示已超时，返回 –1 表示错误，需要检查 errno 错误码判断错误类型。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"工作模式"}},[t._v("工作模式")]),n("p",[t._v("epoll 有两种工作模式："),n("strong",[t._v("水平触发（level trigger, LT）模式")]),t._v(" 和 "),n("strong",[t._v("边缘触发（edge trigger, ET）模式")]),t._v("。")]),t._v(" "),n("ul",[n("li",[t._v("LT 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，"),n("strong",[t._v("应用程序可以不立即处理该事件")]),t._v("。下次调用 epoll_wait 时，会再次响应应用程序并通知此事件。")]),t._v(" "),n("li",[t._v("ET 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，"),n("strong",[t._v("应用程序必须立即处理该事件")]),t._v("。如果不处理，下次调用 epoll_wait 时，不会再次响应应用程序并通知此事件。")])]),t._v(" "),n("p",[n("strong",[t._v("epoll 可以监听多少个 socket")])]),t._v(" "),n("p",[t._v("自定义，但是需要系统能够承受")]),t._v(" "),n("p",[n("strong",[t._v("epoll 如何获取已就绪 fd")])]),t._v(" "),n("p",[t._v("epoll 实例内部维护了两个结构，分别是记录要监听的 fd 和已经就绪的 fd，可以监听就绪的 fd。通过 poll 机制让上层能直接告诉底层，我这个 fd 一旦读写就绪了，请底层硬件（比如网卡）回调的时候自动把这个 fd 相关的结构体放到指定队列中，并且唤醒操作系统。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"使用示例"}},[t._v("使用示例")]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 socket 和已连接 socket 的变量")]),t._v("\nsock_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建主动 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 socket")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 socket 进行监听，将 socket 转为监听 socket")]),t._v("\n    \nepfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll 实例，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll_event 结构体数组，保存 socket 对应文件描述符和监听事件类型")]),t._v("\nep_events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epoll_event"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epoll_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 epoll_event 变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" ee\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听读事件")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EPOLLIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听的文件描述符是刚创建的监听 socket")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将监听 socket 加入到监听列表中    ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_CTL_ADD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待返回已经就绪的描述符 ")]),t._v("\n   n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ep_events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有就绪的描述符     ")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是监听 socket 描述符就绪，表明有一个新客户端连接到来 ")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ep_events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n          conn_fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 accept() 建立连接")]),t._v("\n          ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EPOLLIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n          ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加对新创建的已连接 socket 描述符的监听，监听后续在已连接 socket 上的读事件      ")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_CTL_ADD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n                \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是已连接 socket 描述符就绪，则可以读数据")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取数据并处理")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"epoll-的优点"}},[t._v("epoll 的优点")]),n("ul",[n("li",[t._v("epoll 精巧的使用了 3 个方法来实现 select 方法要做的事，分清了频繁调用和不频繁调用的操作。epoll_ctrl 是不太频繁调用的，而 epoll_wait 是非常频繁调用的。"),n("strong",[t._v("而 epoll_wait 却几乎没有入参，这比 select 的效率高出一大截。")])]),t._v(" "),n("li",[t._v("内存映射函数 mmap 的引入，"),n("strong",[t._v("将用户空间的一块地址和内核空间的一块地址同时映射到相同的一块物理内存地址")]),t._v("（不管是用户空间还是内核空间都是虚拟地址，最终要通过地址映射映射到物理地址），使得这块物理内存对内核和对用户均可见，减少用户态和内核态之间的数据交换。")]),t._v(" "),n("li",[t._v("使用红黑树存储 epoll 监听的 fd，插入和删除性能比较好，时间复杂度 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("l")]),n("mi",[t._v("o")]),n("mi",[t._v("g")]),n("mi",[t._v("N")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(logN)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathdefault"},[t._v("o")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),n("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("。")],1)]),t._v(" "),n("h3",{attrs:{id:"select、poll-和-epoll-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select、poll-和-epoll-的区别"}},[t._v("#")]),t._v(" select、poll 和 epoll 的区别")]),t._v(" "),n("style",[t._v("\n                        .table-column-x-x-container-bwjozhvn table th:nth-of-type(1) {\n                            width: 16.666666666666664%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-bwjozhvn table th:nth-of-type(2) {\n                            width: 27.77777777777778%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-bwjozhvn table th:nth-of-type(3) {\n                            width: 27.77777777777778%;\n                            word-wrap: break-word;\n                        }\n                    \n                        .table-column-x-x-container-bwjozhvn table th:nth-of-type(4) {\n                            width: 27.77777777777778%;\n                            word-wrap: break-word;\n                        }\n                    ")]),n("div",{staticClass:"table-column-x-x-container-bwjozhvn"},[n("div",{staticStyle:{"font-size":"14px"}},[n("table",[n("thead",[n("tr",[n("th",[t._v("系统调用")]),t._v(" "),n("th",[t._v("select")]),t._v(" "),n("th",[t._v("poll")]),t._v(" "),n("th",[t._v("epoll")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("事件集合")]),t._v(" "),n("td",[t._v("通过 3 个参数传入感兴趣的 "),n("strong",[t._v("可读、可写及异常")]),t._v(" 等事件，内核通过对这些参数的修改来反馈其中的就绪事件。这使得用户每次调用 select 都要重置这 3 个参数。")]),t._v(" "),n("td",[t._v("只需 "),n("strong",[t._v("1 个事件集")]),t._v(" 参数，通过 pollfd.events 传入感兴趣的事件，内核通过修改 pollfd.revents 反馈其中就绪的事件。")]),t._v(" "),n("td",[t._v("内核通过 "),n("strong",[t._v("事件表")]),t._v(" 直接管理用户注册的事件。因此，每次调用 epoll_wait "),n("strong",[t._v("无须反复传入感兴趣的事件")]),t._v("。epoll_wait 系统调用的参数 events 仅用来反馈就绪的事件。")])]),t._v(" "),n("tr",[n("td",[t._v("索引就绪文件描述符的时间复杂度")]),t._v(" "),n("td",[t._v("O(n)")]),t._v(" "),n("td",[t._v("O(n)")]),t._v(" "),n("td",[t._v("O(1)")])]),t._v(" "),n("tr",[n("td",[t._v("最大支持文件描述符数")]),t._v(" "),n("td",[t._v("受 fd_set 大小限制，32 位系统最多监听 1024 个 fd，64 位最多监听 2048 个。")]),t._v(" "),n("td",[t._v("65535")]),t._v(" "),n("td",[t._v("65535")])]),t._v(" "),n("tr",[n("td",[t._v("工作模式")]),t._v(" "),n("td",[t._v("LT")]),t._v(" "),n("td",[t._v("LT")]),t._v(" "),n("td",[t._v("支持 ET 高效模式")])]),t._v(" "),n("tr",[n("td",[t._v("内核实现")]),t._v(" "),n("td",[t._v("通过 "),n("strong",[t._v("轮询")]),t._v(" 来检测就绪事件，时间复杂度为 "),n("strong",[t._v("O(n)")])]),t._v(" "),n("td",[t._v("通过 "),n("strong",[t._v("轮询")]),t._v(" 来检测就绪事件，时间复杂度为 "),n("strong",[t._v("O(n)")])]),t._v(" "),n("td",[t._v("通过 "),n("strong",[t._v("回调")]),t._v(" 来检测就绪事件，时间复杂度为 O(1)")])])])])])])])}),[],!1,null,null,null);s.default=e.exports},742:function(t,s,a){t.exports=a.p+"assets/img/image-20230919111841409.drawio.1e36075c.png"},743:function(t,s,a){t.exports=a.p+"assets/img/image-20230919153232603.eb3aed58.png"},744:function(t,s,a){t.exports=a.p+"assets/img/image-20230919154003108.8218d22b.png"},745:function(t,s,a){t.exports=a.p+"assets/img/image-20230919154638229.f545ce04.png"},746:function(t,s,a){t.exports=a.p+"assets/img/image-20230919160917312.ed10bcab.png"}}]);