(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{448:function(t,a,s){t.exports=s.p+"assets/img/image-20220610171647096.96654cf9.png"},545:function(t,a,s){t.exports=s.p+"assets/img/image-20220610223039791.a12921f6.png"},978:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第5章-优化程序性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第5章-优化程序性能"}},[t._v("#")]),t._v(" 第5章 优化程序性能")]),t._v(" "),n("p",[t._v("功能：指在一般条件下系统能够为用户做什么，能够满足用户什么样的需求。")]),t._v(" "),n("p",[t._v("性能：衡量软件质量（好/坏）的重要因素。")]),t._v(" "),n("h2",{attrs:{id:"_5-1-编译器的局限性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-编译器的局限性"}},[t._v("#")]),t._v(" 5.1 编译器的局限性")]),t._v(" "),n("p",[t._v("编译器的优化处理是保守的（悲观的、安全的）。")]),t._v(" "),n("h2",{attrs:{id:"_5-2-程序性能的度量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-程序性能的度量"}},[t._v("#")]),t._v(" 5.2 程序性能的度量")]),t._v(" "),n("p",[n("strong",[t._v("运行时间")]),t._v("：一个元素完成功能所运行的时间。")]),t._v(" "),n("p",[n("strong",[t._v("周期数每元素（Cycles Per Element, CPE）")]),t._v("：运行时间/时钟周期。")]),t._v(" "),n("p",[n("strong",[t._v("时间周期")]),t._v("：CPU 完成一个基本动作的时间（对应一个电平信号宽度）。")]),t._v(" "),n("h2",{attrs:{id:"_5-3-高级语言层次优化性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-高级语言层次优化性能"}},[t._v("#")]),t._v(" 5.3 高级语言层次优化性能")]),t._v(" "),n("h3",{attrs:{id:"消除循环的低效率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消除循环的低效率"}},[t._v("#")]),t._v(" 消除循环的低效率")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Move call to vec_length out of loop */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IDENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_element")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest OP val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这个优化是一类常见的优化的一个例子，称为代码移动（code motion）。这类优化包括识别要执行多次但是计算结果不会改变的计算。因而可以将计算移动到代码前面不会被多次求值的部分。")]),t._v(" "),n("h3",{attrs:{id:"减少过程调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#减少过程调用"}},[t._v("#")]),t._v(" 减少过程调用")]),t._v(" "),n("p",[t._v("过程调用会带来相当大的开销， 而且妨碍大多数形式的程序优化。")]),t._v(" "),n("p",[t._v("从 combine2 的代码中可以看出，每次循环迭代都会调用 get_vec_element 获取下一个向量元素。对每个向量引用，这个函数要把向量索引 i 与循环边界做比较，很明显会造成低效率。")]),t._v(" "),n("p",[t._v("作为替代，假设为抽象数据类型增加一个函数 get_vec_start 。这个函数返回数组的起始地址，如下：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Direct access to vector data */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IDENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"消除不必要的存储器引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消除不必要的存储器引用"}},[t._v("#")]),t._v(" 消除不必要的存储器引用")]),t._v(" "),n("p",[t._v("combine3 的代码将合并运算计算的值累积在指针 dest 指定的位置。通过检查编译出来的循环产生的汇编代码，可以看出这个属性。在此给出数据类型为 float, 合并运算为乘法的 x86-64 代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# coinbine3: data_t = float, OP = *\n# i in %rdx, data in %rax, dest in %rbp\n.L498: \t\t\t\t\t\t\t\t# loop:\n\tmovss \t(%rbp), %xmm0\t\t\t# read product from dest\n\tmulss \t(%rax,%rdx,4), %xmm0 \t# multiply product by data[i]\n\tmovss \t%xmm0, (%rbp) \t\t\t# store product at dest\n\taddq \t$1, %rdx\t\t\t\t# increment i\n\tcmpq \t%rdx, %r12 \t\t\t\t# Compare i:limit\n\tjg \t\t.L498 \t\t\t\t\t# if >, goto loop\n")])])]),n("p",[t._v("从在这段循环代码中，我们看到，对应于指针 dest 的地址存放在寄存器 %rbp 中。在第 i 次迭代中，程序读出这个位置处的值，乘以 data[i], 再将结果存回到 dest。这样的读写很浪费，因为每次迭代开始时从 dest 读出的值就是上次迭代最后写入的值。")]),t._v(" "),n("p",[t._v("我们能够消除这样无用的存储器读写：引入一个临时变量 acc，它在循环中用来累积计算出来的值。只有在循环完成之后结果才存放在 dest 中。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Accumulate result in local variable */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IDENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("正如下面的汇编代码所示，编译器可以使用寄存器 %xmm0 来保存累积值。与 combine3 中的循环相比，我们将每次迭代的存储器操作从两次读和一次写减少到只需要一次读。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# combine4: data_t = float, OP = *\n# i in %rdx, data in %rax, limit in %rbp, ace in %xmm0\n.L488: \t\t\t\t\t\t\t\t# loop:\n\tmulss\t(%rax, %rdx,4), %xmmO\t# multiply acc by data[i]\n\taddq \t$1, %rdx\t\t\t\t# increment i\n\tcmpq \t%rdx, %r12 \t\t\t\t# Compare i:limit\n\tjg \t\t.L488 \t\t\t\t\t# if >, goto loop\n")])])]),n("h2",{attrs:{id:"_5-4-理解现代处理器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-理解现代处理器"}},[t._v("#")]),t._v(" 5.4 理解现代处理器")]),t._v(" "),n("p",[t._v("到目前为止，我们运用的优化都不依赖于目标机器的任何特性。只是简单地降低了过程调用的开销，以及消除了一些重大的 “妨碍优化的因素”，这些因素会给优化编译器造成困难。")]),t._v(" "),n("h3",{attrs:{id:"冯•诺伊曼结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冯•诺伊曼结构"}},[t._v("#")]),t._v(" 冯•诺伊曼结构")]),t._v(" "),n("p",[n("img",{attrs:{src:s(448),alt:"image-20220610171647096"}})]),t._v(" "),n("ul",[n("li",[t._v("控制器：分析和执行机器指令并控制各部件的协同工作")]),t._v(" "),n("li",[t._v("运算器：根据控制信号对数据进行算术运算和逻辑运算")]),t._v(" "),n("li",[t._v("存储器：内存存储中间结果，外存存储需要长期保存的信息")]),t._v(" "),n("li",[t._v("输入设备：接收外界信息")]),t._v(" "),n("li",[t._v("输出设备：向外界输送信息")])]),t._v(" "),n("h3",{attrs:{id:"指令周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指令周期"}},[t._v("#")]),t._v(" 指令周期")]),t._v(" "),n("p",[n("strong",[t._v("取指令阶段（Instruction Fetch, IF）")]),t._v("：将一条指令从主存中取到指令寄存器的过程。程序计数器 PC 中的数值指示当前指令在主存中的位置。当一条指令被取出后，PC 中的数值将根据指令字长度而自动递增。")]),t._v(" "),n("p",[n("strong",[t._v("指令译码阶段（Decode）")]),t._v("：取出指令后，立即进入指令译码阶段，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。")]),t._v(" "),n("p",[n("strong",[t._v("执行指令阶段")]),t._v("：此阶段的任务是完成指令所规定的各种操作，具体实现指令的功能（分支、乘除、加法、加载和写存储器等）。为此，CPU 的不同部分被连接起来，以执行所需的操作。")]),t._v(" "),n("h3",{attrs:{id:"指令间相关性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指令间相关性"}},[t._v("#")]),t._v(" 指令间相关性")]),t._v(" "),n("p",[t._v("如果各指令之间不存在相关性，那么它们在流水线中是可以并行执行的，这种指令间潜在的重叠是指令级并行（Instruction-Level Parallelism, ILP）  。")]),t._v(" "),n("p",[t._v("结构相关：指不同指令同时争取同一寄存器或存储器（资源冲突），但这些指令间不存在数据流。")]),t._v(" "),n("p",[t._v("数据相关：后续的指令需要的操作数，要等到前面的指令执行完成后并保存结果后才能获得。")]),t._v(" "),n("p",[t._v("控制相关：是对指令寄存器的 RAW（Read after write） 相关问题。PC 保存的是下一条指令的地址，当前指令的分支指令（转移指令）会在执行阶段计算出新的转移地址（改变 PC 值），并写入指令寄存器。")]),t._v(" "),n("h2",{attrs:{id:"_5-5-循环展开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-循环展开"}},[t._v("#")]),t._v(" 5.5 循环展开")]),t._v(" "),n("p",[t._v("循环展开是一种程序变换，通过增加每次迭代计算的元素的数量，减少循环的迭代次数。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unroll loop by 2 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("DENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Combine 2 elements at a time */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" limit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Finish any remaining elements */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"_5-6-提高并行性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-提高并行性"}},[t._v("#")]),t._v(" 5.6 提高并行性")]),t._v(" "),n("p",[t._v("在此，程序是受运算单元的延迟限制的。不过，执行加法和乘法的功能单元是完全流水线化的，这意味着它们可以每个时钟周期开始一个新操作。代码不能利用这种能力，即使是使用循环展开也不能，这是因为将累积值放在一个单独的变量 acc 中。前面的计算完成之前，都不能计算 acc 的新值。虽然功能单元能够每个时钟周期开始一个新的操作，但是它只会每 L 个周期开始 一条新操作，这里 L 是合并操作的延迟。现在我们要考察打破这种顺序相关，得到比延迟界限更好性能的方法。")]),t._v(" "),n("h3",{attrs:{id:"多个累积变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个累积变量"}},[t._v("#")]),t._v(" 多个累积变量")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unroll loop by 2, 2-way parallelism */")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" accO "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IDENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" ace1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IDENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Combine 2 elements at a time */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" limit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        accO "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" accO OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        acc1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc1 OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Finish any remaining elements */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        accO "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" accO OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" accO OP acc1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"重新结合变换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重新结合变换"}},[t._v("#")]),t._v(" 重新结合变换")]),t._v(" "),n("p",[t._v("下面给出了函数 combine7，它与简单展开代码 combine5 的唯一区别在于内循环中元素合并的方式。在 combine5  中，合并是以下面这条语句来实现的：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("而在 combine7 中，合并是以这条语句来实现的：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc OP "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("combine7：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Change associativity of combining operation */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vec_ptr v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec_length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_vec_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data_t")]),t._v(" ace "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("DENT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Combine 2 elements at a time */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" O"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" limit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("OP")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Finish any remaining elements */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc OP data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("总的来说，重新结合变换能够减少计算中关键路径上操作的数量，通过更好地利用功能单元的流水线能力得到更好的性能。")]),t._v(" "),n("h2",{attrs:{id:"_5-7-理解存储器性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-理解存储器性能"}},[t._v("#")]),t._v(" 5.7 理解存储器性能")]),t._v(" "),n("p",[t._v("到目前为止我们写的所有代码，以及我们运行的所有测试，只访问相对比较少量的存储器。现代处理器都包含一个或多个高速缓存（cache）存储器，以对少量的存储器提供快速的访问。")]),t._v(" "),n("ul",[n("li",[t._v("加载：从存储器读到寄存器")]),t._v(" "),n("li",[t._v("存储：从寄存器写到存储器")])]),t._v(" "),n("h3",{attrs:{id:"加载的性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载的性能"}},[t._v("#")]),t._v(" 加载的性能")]),t._v(" "),n("p",[t._v("一个包含加载操作的程序的性能既依赖于流水线的能力，也依赖于加载单元的延迟。")]),t._v(" "),n("h3",{attrs:{id:"存储的性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储的性能"}},[t._v("#")]),t._v(" 存储的性能")]),t._v(" "),n("p",[t._v("存储单元包含一个存储缓冲区，它包含已经被发射到存储单元而又还没有完成的存储操作的地址和数据，这里的完成包括更新数据高速缓存。提供这样一个缓冲区，使得一系列存储操作不必等待每个操作都更新高速缓存就能够执行。")]),t._v(" "),n("p",[t._v("当一条加载操作发生时，必须检查存储缓冲区中的条目，看有没有地址相匹配。如果有地址相匹配（意味着在写的字节与在读的字节有相同的地址），它就取出相应的数据条目作为加载操作的结果。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(545),alt:"image-20220610223039791"}})]),t._v(" "),n("p",[t._v("加载和存储单元的细节见上图。存储单元包含一个未执行的写的缓冲区。加载单元必须检查它的地址是否与存储单元中的地址相符，以发现写／读相关。")]),t._v(" "),n("h2",{attrs:{id:"_5-8-加速比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-加速比"}},[t._v("#")]),t._v(" 5.8 加速比")]),t._v(" "),n("h3",{attrs:{id:"阿姆达尔-amdahl-定律"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阿姆达尔-amdahl-定律"}},[t._v("#")]),t._v(" 阿姆达尔（Amdahl）定律")]),t._v(" "),n("p",[t._v("加速比 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("S")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("S(n)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" 和串行部分所占比例 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("f")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("f")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")])])])])]),t._v(" 有关，而与 CPU 核数 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("n")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 无关。")],1),t._v(" "),n("section",[n("eqn",[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("S")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mo",[t._v("=")]),n("mfrac",[n("mn",[t._v("1")]),n("mrow",[n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mn",[t._v("1")]),n("mo",[t._v("−")]),n("mi",[t._v("α")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mo",[t._v("+")]),n("mi",[t._v("α")]),n("mi",{attrs:{mathvariant:"normal"}},[t._v("/")]),n("mi",[t._v("k")])],1)],1),n("mspace",{attrs:{linebreak:"newline"}}),n("munder",[n("mo",[n("mi",[t._v("S")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("mrow",[n("mi",[t._v("n")]),n("mo",[t._v("→")]),n("mi",{attrs:{mathvariant:"normal"}},[t._v("∞")])],1)],1),n("mo",[t._v("=")]),n("munder",[n("mo",[n("mi",[t._v("lim")]),n("mo",[t._v("⁡")])],1),n("mrow",[n("mi",[t._v("k")]),n("mo",[t._v("→")]),n("mi",{attrs:{mathvariant:"normal"}},[t._v("∞")])],1)],1),n("mfrac",[n("mn",[t._v("1")]),n("mrow",[n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mn",[t._v("1")]),n("mo",[t._v("−")]),n("mi",[t._v("α")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mo",[t._v("+")]),n("mi",[t._v("α")]),n("mi",{attrs:{mathvariant:"normal"}},[t._v("/")]),n("mi",[t._v("k")])],1)],1),n("mo",[t._v("=")]),n("mfrac",[n("mn",[t._v("1")]),n("mi",[t._v("f")])],1)],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\nS(n)=\\frac{1}{(1-\\alpha)+\\alpha/k}\\\\\n\\mathop{S(n)}\\limits_{n\\rightarrow\\infty}=\\lim_{k\\rightarrow\\infty} \\frac{1}{(1-\\alpha)+\\alpha/k}=\\frac{1}{f}\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.25744em","vertical-align":"-0.936em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen nulldelimiter"}),n("span",{staticClass:"mfrac"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.32144em"}},[n("span",{staticStyle:{top:"-2.314em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.0037em"}},[t._v("α")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.0037em"}},[t._v("α")]),n("span",{staticClass:"mord"},[t._v("/")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])]),n("span",{staticStyle:{top:"-3.23em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"frac-line",staticStyle:{"border-bottom-width":"0.04em"}})]),n("span",{staticStyle:{top:"-3.677em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("1")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.936em"}},[n("span")])])])]),n("span",{staticClass:"mclose nulldelimiter"})]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}})]),n("span",{staticClass:"mspace newline"},[t._v(" ")]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1.7em","vertical-align":"-0.95em"}}),n("span",{staticClass:"mop op-limits"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.75em"}},[n("span",{staticStyle:{top:"-2.15em","margin-left":"0em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mathdefault mtight"},[t._v("n")]),n("span",{staticClass:"mrel mtight"},[t._v("→")]),n("span",{staticClass:"mord mtight"},[t._v("∞")])])])]),n("span",{staticStyle:{top:"-3em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",[n("span",{staticClass:"mop"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")])])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.95em"}},[n("span")])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.25744em","vertical-align":"-0.936em"}}),n("span",{staticClass:"mop op-limits"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.69444em"}},[n("span",{staticStyle:{top:"-2.347892em","margin-left":"0em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mathdefault mtight",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),n("span",{staticClass:"mrel mtight"},[t._v("→")]),n("span",{staticClass:"mord mtight"},[t._v("∞")])])])]),n("span",{staticStyle:{top:"-3em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",[n("span",{staticClass:"mop"},[t._v("lim")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.7521079999999999em"}},[n("span")])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen nulldelimiter"}),n("span",{staticClass:"mfrac"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.32144em"}},[n("span",{staticStyle:{top:"-2.314em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.0037em"}},[t._v("α")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.0037em"}},[t._v("α")]),n("span",{staticClass:"mord"},[t._v("/")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])]),n("span",{staticStyle:{top:"-3.23em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"frac-line",staticStyle:{"border-bottom-width":"0.04em"}})]),n("span",{staticStyle:{top:"-3.677em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("1")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.936em"}},[n("span")])])])]),n("span",{staticClass:"mclose nulldelimiter"})]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.20188em","vertical-align":"-0.8804400000000001em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen nulldelimiter"}),n("span",{staticClass:"mfrac"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.32144em"}},[n("span",{staticStyle:{top:"-2.314em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")])])]),n("span",{staticStyle:{top:"-3.23em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"frac-line",staticStyle:{"border-bottom-width":"0.04em"}})]),n("span",{staticStyle:{top:"-3.677em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("1")])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8804400000000001em"}},[n("span")])])])]),n("span",{staticClass:"mclose nulldelimiter"})])])])])])])],1),n("p",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("α")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\alpha")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.0037em"}},[t._v("α")])])])])]),t._v(" 是某个部分初始耗时占比，"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("k")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])]),t._v(" 是加速比例因子。")],1),t._v(" "),n("h3",{attrs:{id:"gustafson-定律"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gustafson-定律"}},[t._v("#")]),t._v(" Gustafson 定律")]),t._v(" "),n("section",[n("eqn",[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("S")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mo",[t._v("=")]),n("mi",[t._v("n")]),n("mo",[t._v("+")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mn",[t._v("1")]),n("mo",[t._v("−")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mi",[t._v("K")]),n("mo",[t._v("=")]),n("mi",[t._v("K")]),n("mo",[t._v("+")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mn",[t._v("1")]),n("mo",[t._v("−")]),n("mi",[t._v("K")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")]),n("mi",[t._v("n")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\nS(n)=n+(1-n)K=K+(1-K)n\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("K")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("K")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("K")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])])])],1),n("p",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("K")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("K")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("K")])])])])]),t._v(" 是一个常数，表示串行执行时间所占的比例。")],1),t._v(" "),n("p",[t._v("串行化代码的规模固定时，计算规模是随 CPU 核数 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("n")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 增加而增加的。")],1)])}),[],!1,null,null,null);a.default=e.exports}}]);