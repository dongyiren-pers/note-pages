(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{1082:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第2章-进程与线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第2章-进程与线程"}},[t._v("#")]),t._v(" 第2章 进程与线程")]),t._v(" "),n("h2",{attrs:{id:"_2-1-进程与线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-进程与线程"}},[t._v("#")]),t._v(" 2.1 进程与线程")]),t._v(" "),n("h3",{attrs:{id:"进程的定义、组成、组织、特征"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程的定义、组成、组织、特征"}},[t._v("#")]),t._v(" 进程的定义、组成、组织、特征")]),t._v(" "),n("p",[t._v("系统为每个运行的程序配置一个数据结构，称为 "),n("strong",[t._v("进程控制块（PCB）")]),t._v("，用来描述进程的各种信息（如程序代码存放位置）。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程的定义"}},[t._v("进程的定义")]),n("p",[n("strong",[t._v("程序段、数据段、PCB")]),t._v(" 三部分组成了进程实体（进程映像）。一般的，我们把进程实体简称为进程。例如，所谓创建进程，实质上是创建进程实体中的 PCB；而撤销进程，实质上是撤销进程实体中的 PCB。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注意")]),t._v("：PCB 是进程存在的唯一标志。")])]),t._v(" "),n("p",[n("strong",[t._v("定义")]),t._v("：进程是进程实体的运行过程，是系统进行 "),n("strong",[t._v("资源分配和调度")]),t._v(" 的一个独立单位。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程的组成"}},[t._v("进程的组成")]),n("ul",[n("li",[n("strong",[t._v("PCB")]),t._v("：进程描述信息、进程控制和管理信息、资源分配清单、处理机相关信息。")]),t._v(" "),n("li",[n("strong",[t._v("程序段")]),t._v("：存放要执行的代码。")]),t._v(" "),n("li",[n("strong",[t._v("数据段")]),t._v("：存放程序运行过程中处理的各种数据。")])]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程的组织"}},[t._v("进程的组织")]),n("ul",[n("li",[n("strong",[t._v("链接方式")]),t._v("：按照进程状态将 PCB 分为多个 "),n("strong",[t._v("队列")]),t._v("，操作系统持有指向各个队列的指针。")]),t._v(" "),n("li",[n("strong",[t._v("索引方式")]),t._v("：根据进程状态的不同建立多个 "),n("strong",[t._v("索引表")]),t._v("，操作系统持有指向各个索引表的指针。")])]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程的特征"}},[t._v("进程的特征")]),n("ul",[n("li",[n("strong",[t._v("动态性")]),t._v("："),n("strong",[t._v("最基本的特征")]),t._v("。进程是程序的一次执行过程，是动态地产生、变化和消亡的。")]),t._v(" "),n("li",[n("strong",[t._v("并发性")]),t._v("：内存中有多个进程实体，各进程可并发执行。")]),t._v(" "),n("li",[n("strong",[t._v("独立性")]),t._v("：进程是能独立运行、独立获得资源、独立接受调度的基本单位。")]),t._v(" "),n("li",[n("strong",[t._v("异步性")]),t._v("：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供 “进程同步机制“ 来解决异步问题。")]),t._v(" "),n("li",[n("strong",[t._v("结构性")]),t._v("：每个进程都会配置一个 PCB。结构上看，进程由程序段、数据段、PCB 组成。")])]),t._v(" "),n("h3",{attrs:{id:"进程的状态与转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态与转换"}},[t._v("#")]),t._v(" 进程的状态与转换")]),t._v(" "),n("p",[t._v("三种基本状态：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("运行态")]),t._v("（Running）：占有 CPU，并在 CPU 上运行。")]),t._v(" "),n("li",[n("strong",[t._v("就绪态")]),t._v("（Ready）：已经具备运行条件，但由于没有空闲 CPU，而暂时不能运行。")]),t._v(" "),n("li",[n("strong",[t._v("阻塞态")]),t._v("（Waiting/Blocked，又称等待态）：因等待某一事件而暂时不能运行。")])]),t._v(" "),n("p",[t._v("另外两种状态：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("创建态")]),t._v("（New）：进程正在被创建，操作系统为进程分配资源、初始化 PCB。")]),t._v(" "),n("li",[n("strong",[t._v("终止态")]),t._v("（Terminated）：进程正在从系统中撤销，操作系统会回收进程拥有得资源、撤销 PCB。")])]),t._v(" "),n("p",[t._v("进程的状态转换：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(821),alt:"image-20240118123420827"}})]),t._v(" "),n("h3",{attrs:{id:"进程控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[t._v("#")]),t._v(" 进程控制")]),t._v(" "),n("p",[t._v("通过 "),n("strong",[t._v("原语")]),t._v(" 实现进程控制。原语的 "),n("strong",[t._v("特点")]),t._v(" 是执行期间 "),n("strong",[t._v("不允许中断")]),t._v("，只能一气呵成。")]),t._v(" "),n("p",[t._v("这种不可被中断的操作即 "),n("strong",[t._v("原子操作")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[t._v("原语采用 “"),n("strong",[t._v("关中断")]),t._v(" 指令” 和 “"),n("strong",[t._v("开中断")]),t._v(" 指令” 实现。在关中断和开中断之间收到的中断信号会被忽略。")])]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("创建原语")]),t._v("："),n("strong",[t._v("申请空白 PCB")]),t._v(" → 为新进程 "),n("strong",[t._v("分配所需资源")]),t._v(" → "),n("strong",[t._v("初始化 PCB")]),t._v(" → 将 PCB 插入 "),n("strong",[t._v("就绪队列")]),t._v("。")]),t._v(" "),n("li",[n("strong",[t._v("撤销原语")]),t._v("：从 PCB 集合中找到终止进程的 PCB → 若进程正在运行，立即 "),n("strong",[t._v("剥夺 CPU")]),t._v("，将 CPU 分配给其他进程 → 终止其所有子进程 → 将该进程拥有的所有 "),n("strong",[t._v("资源归还")]),t._v(" 给父进程或操作系统 → "),n("strong",[t._v("删除 PCB")]),t._v("。")]),t._v(" "),n("li",[n("strong",[t._v("阻塞原语")]),t._v("：找到要阻塞的进程对应的 PCB → "),n("strong",[t._v("保护进程运行现场")]),t._v(" → 将 "),n("strong",[t._v("PCB 状态")]),t._v(" 信息设置为 "),n("strong",[t._v("“阻塞态”")]),t._v("，暂时停止进程运行 → 将 PCB 插入相应事件的 "),n("strong",[t._v("等待队列")]),t._v("。")]),t._v(" "),n("li",[n("strong",[t._v("唤醒原语")]),t._v("：在事件等待队列中找到 PCB → 将 PCB "),n("strong",[t._v("从等待队列移除")]),t._v("，设置进程为就绪态 → 将 PCB 插入 "),n("strong",[t._v("就绪队列")]),t._v("，等待被调度。")]),t._v(" "),n("li",[n("strong",[t._v("切换原语")]),t._v("：将运行环境信息存入 PCB → PCB 移入相应队列 → 选择另一个进程执行，并更新其 PCB → 根据 PCB 恢复新进程所需的运行环境。")])]),t._v(" "),n("h3",{attrs:{id:"进程通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程通信"}},[t._v("#")]),t._v(" 进程通信")]),t._v(" "),n("p",[t._v("顾名思义，进程通信就是指进程之间的信息交换。")]),t._v(" "),n("p",[t._v("为了保证安全，一个进程不能直接访问另一个进程的地址空间。但是进程之间的信息交换又是必须实现的。为了保证进程间的安全通信，操作系统提供了一些方法。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"共享存储"}},[t._v("共享存储")]),n("p",[n("strong",[t._v("基于数据结构的共享")]),t._v("：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。")]),t._v(" "),n("p",[n("strong",[t._v("基于存储区的共享")]),t._v("：在内存中画出一块共享存储区，数据的形式、存放位置都由进程控制，而不是操作系统。相比之下，这种共享方式速度更快，是一种高级通信方式。")]),t._v(" "),n("p",[t._v("两个进程对共享空间的访问必须是互斥的。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"管道通信"}},[t._v("管道通信")]),n("p",[t._v("“管道”是指用于连接读写进程的一个共享文件，又名 pipe 文件。其实就是在内存中开辟一个大小固定的缓冲区。")]),t._v(" "),n("p",[t._v("管道只能采用 "),n("strong",[t._v("半双工通信")]),t._v("，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道。")]),t._v(" "),n("p",[t._v("各进程要 "),n("strong",[t._v("互斥")]),t._v(" 地访问管道。")]),t._v(" "),n("p",[t._v("数据以字符流的形式写入管道，"),n("strong",[t._v("当管道写满时，写进程的 wite() 系统调用将被阻塞")]),t._v("，等待读进程将数据取走。当读进程将数据全部取走后，"),n("strong",[t._v("管道变空，此时读进程的 read(）系统调用将被阻塞")]),t._v("。如果没写满，就不允许读。如果没读空，就不允许写。")]),t._v(" "),n("p",[t._v("数据一旦被读出，就从管道中被抛弃，这就意味着 "),n("strong",[t._v("读进程最多只能有一个")]),t._v("，否则可能会有读错数据的情况。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"消息传递"}},[t._v("消息传递")]),n("p",[t._v("进程间的数据交换以 "),n("strong",[t._v("格式化的消息")]),t._v("（Message）为单位。进程通过操作系统提供的 “发送消息/接收消息” 两个 "),n("strong",[t._v("原语")]),t._v(" 进行数据交换。")]),t._v(" "),n("h3",{attrs:{id:"线程概念和多线程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程概念和多线程模型"}},[t._v("#")]),t._v(" 线程概念和多线程模型")]),t._v(" "),n("p",[t._v("有的进程可能需要 “同时” 做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了 “线程”，来增加并发度。")]),t._v(" "),n("p",[n("strong",[t._v("线程是处理机调度的单位。")])]),t._v(" "),n("p",[t._v("多 CPU 计算机中，各个线程可占用不同的 CPU。")]),t._v(" "),n("p",[t._v("每个线程都有一个线程 ID、线程控制块（TCB）。线程有就绪、阻塞、运行三种基本状态。")]),t._v(" "),n("p",[t._v("线程几乎不拥有系统资源，同一进程的不同线程间共享进程的资源。由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预。")]),t._v(" "),n("p",[t._v("同一进程中的线程切换，不会引起进程切换；不同进程中的线程切换，会引起进程切换。切换同进程内的线程，系统开销很小；切换进程，系统开销较大。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"线程的实现方式"}},[t._v("线程的实现方式")]),n("ul",[n("li",[n("strong",[t._v("用户级线程")]),t._v("：由应用程序通过线程库实现。所有的 "),n("strong",[t._v("线程管理工作")]),t._v(" 由 "),n("strong",[t._v("应用程序负责")]),t._v(" （包括线程切换）。用户级线程中，"),n("strong",[t._v("线程切换在用户态下即可完成")]),t._v("，无需操作系统干预。")]),t._v(" "),n("li",[n("strong",[t._v("内核级线程")]),t._v("："),n("strong",[t._v("线程管理工作")]),t._v(" 由 "),n("strong",[t._v("操作系统内核")]),t._v(" 完成。线程调度、切换等工作由内核负责，因此 "),n("strong",[t._v("内核级线程的切换")]),t._v(" 必然需要在 "),n("strong",[t._v("核心态")]),t._v(" 下才能完成。")])]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"多线程模型"}},[t._v("多线程模型")]),n("p",[t._v("在同时支持用户级线程和内核级线程的系统中，由几个用户级线程映射到几个内核级线程的问题引出了 “多线程模型” 问题。")]),t._v(" "),n("p",[t._v("多对一模型：")]),t._v(" "),n("ul",[n("li",[t._v("优：进程管理开销小效率高。")]),t._v(" "),n("li",[t._v("缺：一个线程阻塞会导致整个进程都被阻塞（并发度低）。")])]),t._v(" "),n("p",[t._v("一对一模型：")]),t._v(" "),n("ul",[n("li",[t._v("优：进程管理开销大。")]),t._v(" "),n("li",[t._v("缺：各个线程可分配到多核处理机并行执行，并发度高。")])]),t._v(" "),n("p",[t._v("多对多模型：集二者之所长。")]),t._v(" "),n("h2",{attrs:{id:"_2-2-处理机的调度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-处理机的调度"}},[t._v("#")]),t._v(" 2.2 处理机的调度")]),t._v(" "),n("h3",{attrs:{id:"处理机调度的概念、层次"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理机调度的概念、层次"}},[t._v("#")]),t._v(" 处理机调度的概念、层次")]),t._v(" "),n("p",[t._v("处理机调度，就是从就绪队列中按照一定地算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"高级调度"}},[t._v("高级调度")]),n("p",[n("strong",[t._v("高级调度（作业调度）")]),t._v("：按一定的原则从外存上处于 "),n("strong",[t._v("后备队列的作业")]),t._v(" 中挑选一个（或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立PCB)，以使它（们）获得竞争处理机的权利。")]),t._v(" "),n("p",[n("strong",[t._v("高级调度是辅存（外存）与内存之间的调度")]),t._v("。每个作业只调入一次，调出一次。"),n("strong",[t._v("作业调入时会建立相应的 PCB，作业调出时才撤销 PCB")]),t._v("。高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，但调出的时机必然是作业运行结束才调出。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"中级调度"}},[t._v("中级调度")]),n("blockquote",[n("p",[t._v("引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。")]),t._v(" "),n("p",[t._v("这么做的目的是为了 "),n("strong",[t._v("提高内存利用率")]),t._v(" 和 "),n("strong",[t._v("系统吞吐量")]),t._v("。")]),t._v(" "),n("p",[t._v("暂时调到外存等待的进程状态为 "),n("strong",[t._v("挂起状态")]),t._v("。值得注意的是，"),n("strong",[t._v("PCB")]),t._v(" 并不会一起调到外存，而是会 "),n("strong",[t._v("常驻内存")]),t._v("。PCB 中会记录进程数据在外存中的存放位置、进程状态等信息，操作系统通过内存中的 PCB 来保持对各个进程的监控、管理。"),n("strong",[t._v("被挂起的进程 PCB 会被放到挂起队列中。")])])]),t._v(" "),n("p",[n("strong",[t._v("中级调度（内存调度）")]),t._v("：就是要决定将哪个 "),n("strong",[t._v("处于挂起状态的进程")]),t._v(" 重新调入内存。")]),t._v(" "),n("p",[t._v("一个进程可能会被多次调出、调入内存，因此中级调度发生的频率要比高级调度更高。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"低级调度"}},[t._v("低级调度")]),n("p",[n("strong",[t._v("低级调度（进程调度）")]),t._v("：其主要任务是按照某种方法和策略从 "),n("strong",[t._v("就绪队列")]),t._v(" 中选取一个 "),n("strong",[t._v("进程")]),t._v("，将处理机分配给它。")]),t._v(" "),n("p",[t._v("进程调度是操作系统中 "),n("strong",[t._v("最基本的一种调度")]),t._v("，在一般的操作系统中都必须配置进程调度。")]),t._v(" "),n("p",[t._v("进程调度的 "),n("strong",[t._v("频率很高")]),t._v("，一般几十毫秒一次。")]),t._v(" "),n("h3",{attrs:{id:"进程调度的时机、方式、切换与过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程调度的时机、方式、切换与过程"}},[t._v("#")]),t._v(" 进程调度的时机、方式、切换与过程")]),t._v(" "),n("p",[t._v("进程调度的时机：")]),t._v(" "),n("ul",[n("li",[t._v("当前运行的进程 "),n("strong",[t._v("主动")]),t._v(" 放弃处理机：进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞（如等待 I/O）。")]),t._v(" "),n("li",[t._v("当前运行的进程 "),n("strong",[t._v("被动")]),t._v(" 放弃处理机：分给进程的时间片用完、有更紧急的事需要处理（如 I/O 中断）、有更高优先级的进程进入就绪队列。")])]),t._v(" "),n("p",[t._v("进程调度的方式：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("非剥夺调度方式")]),t._v("：又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。")]),t._v(" "),n("li",[n("strong",[t._v("剥夺调度方式")]),t._v("：又称抢占方式。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。")])]),t._v(" "),n("p",[t._v("切换与过程：狭义的进程调度指的是从就绪队列中选中一个要运行的进程。进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。进程切换的过程主要完成了：")]),t._v(" "),n("ul",[n("li",[t._v("对原来运行进程各种数据的保存")]),t._v(" "),n("li",[t._v("对新的进程各种数据的恢复")])]),t._v(" "),n("p",[t._v("进程切换是有代价的，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。")]),t._v(" "),n("h3",{attrs:{id:"调度算法的评价指标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调度算法的评价指标"}},[t._v("#")]),t._v(" 调度算法的评价指标")]),t._v(" "),n("p",[n("strong",[t._v("CPU 利用率")]),t._v("：指 CPU “忙碌” 的时间占总时间的比例。")]),t._v(" "),n("p",[n("strong",[t._v("系统吞吐量")]),t._v("：单位时间内完成作业的数量。")]),t._v(" "),n("p",[n("strong",[t._v("周转时间")]),t._v("：是指从 "),n("strong",[t._v("作业被提交给系统")]),t._v(" 开始，到 "),n("strong",[t._v("作业完成")]),t._v(" 为止的这段时间间隔。它包括四个部分：作业 "),n("strong",[t._v("在外存后备队列上等待")]),t._v(" 作业调度（高级调度）的时间、进程 "),n("strong",[t._v("在就绪队列上等待")]),t._v(" 进程调度（低级调度）的时间、进程 "),n("strong",[t._v("在 CPU 上执行")]),t._v(" 的时间、进程 "),n("strong",[t._v("等待 I/O 操作")]),t._v(" 的时间。")]),t._v(" "),n("ul",[n("li",[t._v("周转时间 = 作业完成时间 - 作业提交时间")]),t._v(" "),n("li",[t._v("平均周转时间 = 各作业周转时间之和 / 作业数")]),t._v(" "),n("li",[n("strong",[t._v("带权周转时间 = 作业周转时间 / 作业实际运行的时间")])]),t._v(" "),n("li",[t._v("平均带权周转时间 = 各作业带权周转时间之和 / 作业数")])]),t._v(" "),n("p",[n("strong",[t._v("等待时间")]),t._v("：指进程/作业处于 "),n("strong",[t._v("等待处理机")]),t._v(" 状态时间之和。")]),t._v(" "),n("p",[t._v("对于进程来说，等待时间就是指进程建立后等待被服务的时间之和，在等待 I/O 完成的期间其实进程也是在被服务的，所以不计入等待时间。")]),t._v(" "),n("p",[t._v("对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间。")]),t._v(" "),n("p",[n("strong",[t._v("响应时间")]),t._v("：指从用户提交请求到首次产生响应所用的时间。")]),t._v(" "),n("h3",{attrs:{id:"作业-进程调度算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作业-进程调度算法"}},[t._v("#")]),t._v(" 作业/进程调度算法")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"先来先服务（fcfs--first-come-first-server）"}},[t._v("先来先服务（FCFS, First Come First Server）")]),n("p",[t._v("算法规则：按照作业/进程 "),n("strong",[t._v("到达的先后顺序")]),t._v(" 进行服务。")]),t._v(" "),n("p",[t._v("是否可抢占："),n("strong",[t._v("非抢占式")]),t._v(" 的算法。")]),t._v(" "),n("p",[t._v("优缺点：")]),t._v(" "),n("ul",[n("li",[t._v("优点：公平、算法实现简单。")]),t._v(" "),n("li",[t._v("缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间大，对短作业来说用户体验不好。即，"),n("strong",[t._v("对长作业有利，对短作业不利。")])])]),t._v(" "),n("p",[t._v("是否会导致饥饿：不会。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"短作业优先（sjf--shortest-job-first）"}},[t._v("短作业优先（SJF, Shortest Job First）")]),n("p",[t._v("算法规则：最短的作业/进程优先得到服务（所谓“最短”，是指要求服务时间最短）。")]),t._v(" "),n("p",[t._v("是否可抢占："),n("strong",[t._v("非抢占式")]),t._v(" 的算法。")]),t._v(" "),n("p",[t._v("优缺点：")]),t._v(" "),n("ul",[n("li",[t._v("优点：“最短的” 平均等待时间、平均周转时间。")]),t._v(" "),n("li",[t._v("缺点：不公平。"),n("strong",[t._v("对短作业有利，对长作业不利")]),t._v("。"),n("strong",[t._v("可能产生饥饿现象")]),t._v("。作业进程的运行时间是由用户提供的，并不一定真实，不一定能做到真正的短作业优先")])]),t._v(" "),n("p",[t._v("是否会导致饥饿：会。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"高响应比优先（hrrn--highest-response-ratio-next）"}},[t._v("高响应比优先（HRRN, Highest Response Ratio Next）")]),n("p",[t._v("算法规则：调度时先计算各个作业进程的响应比，选择 "),n("strong",[t._v("响应比最高")]),t._v(" 的作业/进程为其服务。")]),t._v(" "),n("section",[n("eqn",[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mtext",[t._v("响应比")]),n("mo",[t._v("=")]),n("mfrac",[n("mrow",[n("mtext",[t._v("等待时间")]),n("mo",[t._v("+")]),n("mtext",[t._v("要求服务时间")])],1),n("mtext",[t._v("要求服务时间")])],1),n("mo",[t._v("=")]),n("mfrac",[n("mtext",[t._v("等待时间")]),n("mtext",[t._v("要求服务时间")])],1),n("mo",[t._v("+")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\n\\text{响应比}= \\frac{\\text{等待时间}+\\text{要求服务时间}}{\\text{要求服务时间}}= \\frac{\\text{等待时间}}{\\text{要求服务时间}}+1\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("响应比")])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.04633em","vertical-align":"-0.686em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen nulldelimiter"}),n("span",{staticClass:"mfrac"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.36033em"}},[n("span",{staticStyle:{top:"-2.314em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("要求服务时间")])])])]),n("span",{staticStyle:{top:"-3.23em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"frac-line",staticStyle:{"border-bottom-width":"0.04em"}})]),n("span",{staticStyle:{top:"-3.677em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("等待时间")])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("要求服务时间")])])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.686em"}},[n("span")])])])]),n("span",{staticClass:"mclose nulldelimiter"})]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"2.04633em","vertical-align":"-0.686em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mopen nulldelimiter"}),n("span",{staticClass:"mfrac"},[n("span",{staticClass:"vlist-t vlist-t2"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"1.36033em"}},[n("span",{staticStyle:{top:"-2.314em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("要求服务时间")])])])]),n("span",{staticStyle:{top:"-3.23em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"frac-line",staticStyle:{"border-bottom-width":"0.04em"}})]),n("span",{staticStyle:{top:"-3.677em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord cjk_fallback"},[t._v("等待时间")])])])])]),n("span",{staticClass:"vlist-s"},[t._v("​")])]),n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.686em"}},[n("span")])])])]),n("span",{staticClass:"mclose nulldelimiter"})]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])])])],1),n("p",[t._v("是否可抢占："),n("strong",[t._v("非抢占式")]),t._v(" 的算法。")]),t._v(" "),n("p",[t._v("优缺点："),n("strong",[t._v("综合考虑了等待时间和运行时间（要求服务时间）")]),t._v("。对于长作业来说，随着等待时间越来越久，其响应比也会越来越大，从而避免了长作业饥饿的问题。")]),t._v(" "),n("p",[t._v("是否会导致饥饿：不会。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"时间片轮转调度算法（rr，round-robin）"}},[t._v("时间片轮转调度算法（RR，Round-Robin）")]),n("p",[t._v("算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个 "),n("strong",[t._v("时间片")]),t._v("。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队。")]),t._v(" "),n("p",[t._v("是否可抢占：若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法属于 "),n("strong",[t._v("抢占式")]),t._v(" 的算法。由时钟装置发出 "),n("strong",[t._v("时钟中断")]),t._v(" 来通知 CPU 时间片已到。")]),t._v(" "),n("p",[t._v("优缺点：")]),t._v(" "),n("ul",[n("li",[t._v("优点：公平；响应快，适用于分时操作系统。")]),t._v(" "),n("li",[t._v("缺点：由于高频率的进程切换，因此有一定开销；不区分任务的紧急程度。")])]),t._v(" "),n("p",[t._v("是否会导致饥饿：不会。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"优先级调度算法"}},[t._v("优先级调度算法")]),n("p",[t._v("算法规则：调度时选择 "),n("strong",[t._v("优先级最高")]),t._v(" 的作业/进程。")]),t._v(" "),n("p",[t._v("是否可抢占：抢占式、非抢占式都有。区别在于：非抢占式只需在进程主动放弃处理机时进行调度即可，而抢占式还需在就绪队列变化时，检查是否会发生抢占。")]),t._v(" "),n("p",[t._v("优缺点：")]),t._v(" "),n("ul",[n("li",[t._v("优点：适用于实时操作系统。可灵活地调整对各种作业进程的偏好程度。")]),t._v(" "),n("li",[t._v("缺点：如果源源不断地有高优先级进程到来，则可能导致饥饿。")])]),t._v(" "),n("p",[t._v("是否会导致饥饿：会。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"多级反馈队列调度算法"}},[t._v("多级反馈队列调度算法")]),n("p",[t._v("算法规则：")]),t._v(" "),n("ul",[n("li",[t._v("设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。")]),t._v(" "),n("li",[t._v("新进程到达时先进入第 1 级队列，按 FCFS 原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾。如果此时已经是在最下级的队列，则重新放回该队列队尾。")]),t._v(" "),n("li",[t._v("只有第 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("k")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])]),t._v(" 级队列为空时，才会为 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("k")]),n("mo",[t._v("+")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k+1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.77777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 级队头的进程分配时间片。")],1)]),t._v(" "),n("p",[t._v("是否可抢占："),n("strong",[t._v("抢占式")]),t._v(" 的算法。在 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("k")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])]),t._v(" 级队列的进程运行过程中，若更上级的队列（"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mn",[t._v("1")]),n("mo",[t._v("∼")]),n("mi",[t._v("k")]),n("mo",[t._v("−")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1 \\sim k - 1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.77777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("级）中进入了一个新进程，则由于新进程处于优先级更高的队列中，新进程抢占处理机，原来运行的进程放回 "),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("k")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])]),t._v(" 级队列队尾。")],1),t._v(" "),n("p",[t._v("优缺点：对各类型进程相对公平（CFS 的优点）：每个新到达的进程都可以很快就得到响应（RR 的优点）；短进程只用较少的时间就可完成（SPF 的优点）；不必实现估计进程的运行时间（避免用户作假）可灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、I/O 密集型进程（拓展：可以将因/O 而阻塞的进程重新放回原队列，这样/O 型进程就可以保持较高优先级）。")]),t._v(" "),n("p",[t._v("是否会导致饥饿：会。")]),t._v(" "),n("h2",{attrs:{id:"_2-3-进程的同步与互斥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-进程的同步与互斥"}},[t._v("#")]),t._v(" 2.3 进程的同步与互斥")]),t._v(" "),n("h3",{attrs:{id:"进程的同步与互斥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程的同步与互斥"}},[t._v("#")]),t._v(" 进程的同步与互斥")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程同步"}},[t._v("进程同步")]),n("p",[n("strong",[t._v("同步")]),t._v(" 亦称 "),n("strong",[t._v("直接制约关系")]),t._v("，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上 "),n("strong",[t._v("协调")]),t._v(" 它们的 "),n("strong",[t._v("工作次序")]),t._v(" 而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"进程互斥"}},[t._v("进程互斥")]),n("p",[t._v("我们把 "),n("strong",[t._v("一个时间段内只允许一个进程使用")]),t._v(" 的资源称为 "),n("strong",[t._v("临界资源")]),t._v("。许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。")]),t._v(" "),n("p",[t._v("对临界资源的访问，必须互斥地进行。")]),t._v(" "),n("p",[n("strong",[t._v("互斥")]),t._v("，亦称 "),n("strong",[t._v("间接制约关系")]),t._v("。进程互斥指 "),n("strong",[t._v("当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待")]),t._v("。当前访问临界资源的进程访问结束，释放该资源之后，另一个进程才能去访问临界资源。")]),t._v(" "),n("p",[t._v("对临界资源的互斥访问，可以在逻辑上分为如下四个部分：")]),t._v(" "),n("ul",[n("li",[t._v("进入区：负责检查是否可进入临界区，如果可进入，则应设置正在访问临界资源的标志（上锁），以阻止其他进程同时进入临界区。")]),t._v(" "),n("li",[t._v("临界区：访问临界区资源的那段 代码。")]),t._v(" "),n("li",[t._v("退出区：负责解除正在访问临界资源的标志。")]),t._v(" "),n("li",[t._v("剩余区：做其他处理。")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注意：临界区是访问临界资源的代码段。进入区和退出区是负责实现互斥的代码段。")])])]),t._v(" "),n("p",[t._v("为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：")]),t._v(" "),n("ul",[n("li",[t._v("空闲让进。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区；")]),t._v(" "),n("li",[t._v("忙则等待。当已有进程进入临界区时，其他试图进入临界区的进程必须等待；")]),t._v(" "),n("li",[t._v("有限等待。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）；")]),t._v(" "),n("li",[t._v("让权等待。当进程不能进入临界区时，应立即释放处理机，防止进程忙等待。")])]),t._v(" "),n("h3",{attrs:{id:"进程互斥的软件实现方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程互斥的软件实现方法"}},[t._v("#")]),t._v(" 进程互斥的软件实现方法")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"单标志法"}},[t._v("单标志法")]),n("p",[t._v("算法思想：两个进程在 "),n("strong",[t._v("访问完临界区后")]),t._v(" 会把使用临界区的权限转交给另一个进程。也就是说 "),n("strong",[t._v("每个进程进入临界区的权限只能被另一个进程赋予")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0 进程:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nturn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1 进程:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nturn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("主要问题：违背 “空闲让进” 原则。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"双标志先检查"}},[t._v("双标志先检查")]),n("p",[t._v("算法思想：设置一个布尔型数组 "),n("code",[t._v("flag[]")]),t._v("，数组中各个元素用来 "),n("strong",[t._v("标记各进程想进入临界区的意愿")]),t._v("，比如 "),n("code",[t._v("flag[0] = true")]),t._v(" 意味着 0 号进程 P0 现在想要进入临界区。每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，如果没有，则把自身对应的标志 "),n("code",[t._v("flag[i]")]),t._v(" 设为 "),n("code",[t._v("true")]),t._v("，之后开始访问临界区。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("bool flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0 进程:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1 进程:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("主要问题：违反 “忙则等待” 原则。")]),t._v(" "),n("p",[t._v("原因在于，“检查” 和“上锁” 两个处理不是一气呵成的。"),n("strong",[t._v("“检查” 后、“上锁” 前可能发生进程切换。")])]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"双标志后检查"}},[t._v("双标志后检查")]),n("p",[t._v("算法思想：双标志先检查法的改版。前一个算法的问题是先 “检查”后“上锁”，但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。因此，人们又想到 "),n("strong",[t._v("先 “上锁” 后 “检查”")]),t._v(" 的方法，来避免上述问题。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("bool flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0 进程:")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1 进程:")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("主要问题：违背了 “空闲让进” 和 “有限等待” 原则。两个进程都争着想进入临界区，但是谁也不让谁，最后谁都无法进入临界区。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"peterson-算法"}},[t._v("Peterson 算法")]),n("p",[t._v("算法思想：双标志后检查法中，两个进程都争着想进入临界区，但是谁也不让谁，最后谁都无法进入临界区。Gary L.Peterson 想到了一种方法，"),n("strong",[t._v("如果双方都争着想进入临界区，那可以让进程尝试 “孔融让梨”，主动让对方先使用临界区。")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("bool flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0 进程:")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nturn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 谁先谦让谁使用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1 进程:")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nturn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" turn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nflag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("Peterson 算法用软件方法解决了进程互斥问题，遵循了空闲让进、忙则等待、有限等待三个原则，但是依然 "),n("strong",[t._v("未遵循让权等待的原则")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"进程互斥的硬件实现方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程互斥的硬件实现方法"}},[t._v("#")]),t._v(" 进程互斥的硬件实现方法")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"中断屏蔽"}},[t._v("中断屏蔽")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("关中断：\n临界区：\n开中断；\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"testandset-指令"}},[t._v("TestAndSet 指令")]),n("p",[t._v("TestAndSet 指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。")]),t._v(" "),n("p",[t._v("以下是用 C 语言描述的逻辑。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布尔型共享变量 lock 表示当前临界区是否被加锁")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 表示已加锁，false 表示未加锁")]),t._v("\n\nbool "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestAndSet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tbool old "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestAndSet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ... ")]),t._v("\nlock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("主要问题：不满足 “让权等待” 原则。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"swap-指令"}},[t._v("Swap 指令")]),n("p",[t._v("Swp 指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。以下是用 C 语言描述的逻辑。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    bool temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("以下是使用 Swap 指令实现互斥的算法逻辑， "),n("code",[t._v("lock")]),t._v(" 表示当前临界区是否被加锁。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("bool old "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Swap")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区 ...")]),t._v("\nlock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区 ...")]),t._v("\n")])])]),n("p",[t._v("主要问题：不满足 “让权等待” 原则。")]),t._v(" "),n("h3",{attrs:{id:"信号量机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制"}},[t._v("#")]),t._v(" 信号量机制")]),t._v(" "),n("p",[t._v("用户进程可以通过使用操作系统提供的 "),n("strong",[t._v("一对原语")]),t._v(" 来对 "),n("strong",[t._v("信号量")]),t._v(" 进行操作，从而很方便的实现了进程互斥、进程同步。")]),t._v(" "),n("p",[n("strong",[t._v("信号量")]),t._v(" 其实就是一个 "),n("strong",[t._v("变量")]),t._v("，可以用一个信号量 "),n("strong",[t._v("来表示系统中某种资源的数量")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[t._v("原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断/开中断指令实现的。软件解决方案的主要问题是由 “进入区的各种操作无法一气呵成”，因此如果能把进入区、退出区的操作都用 “原语” 实现，使这些操作能 “一气呵成” 就能避免问题。")])]),t._v(" "),n("p",[n("strong",[t._v("一对原语")]),t._v("："),n("code",[t._v("wait(S)")]),t._v(" 原语和 "),n("code",[t._v("signal(S)")]),t._v(" 原语，可以把原语理解为我们自己写的函数，函数名分别为 wait 和 signal，括号里的信号量 "),n("code",[t._v("S")]),t._v(" 其实就是函数调用时传入的一个参数。")]),t._v(" "),n("p",[t._v("wait、signal 原语常简称为 P、V 操作（来自荷兰语 proberen 和 verhogen）。因此，做题的时候常把 "),n("code",[t._v("wait(S)")]),t._v("、"),n("code",[t._v("signal(S)")]),t._v(" 两个操作分别写为 "),n("code",[t._v("P(S)")]),t._v("、"),n("code",[t._v("V(S)")]),t._v("。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"整型信号量"}},[t._v("整型信号量")]),n("p",[t._v("使用一个整数型的变量作为信号量，"),n("strong",[t._v("表示系统中某种资源的数量")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始型整型信号量 s，表示当前系统中可用的打印机资源数")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wait 原语，相当于“进入区”")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环检查，是否当前资源已经不够了")]),t._v("\n    S"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果资源数够，则占用一个资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// signal 原语，相当于“退出区”")]),t._v("\n    S"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用完资源后，在退出区释放资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程 P0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入区，申请资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用打印机资源...\t\t\t// 临界区，访问资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出区，释放资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程 P1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入区，申请资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用打印机资源...\t\t\t// 临界区，访问资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出区，释放资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程 Pn")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入区，申请资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用打印机资源...\t\t\t// 临界区，访问资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出区，释放资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),n("p",[t._v("存在的问题：不满足 “让权等待原则，会发生“忙等”。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"记录型信号量"}},[t._v("记录型信号量")]),n("p",[t._v("整型信号量的缺陷是存在 “忙等” 问题，因此人们又提出了 “记录型信号量”，即使用记录型数据结构表示的信号量。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 记录型信号量的定义 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余资源数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("process")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待队列")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Semaphore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 某进程需要使用资源时，通过wait原语申请 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Semaphore S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("block")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果剩余资源数不够，使用 "),n("code",[t._v("block")]),t._v(" 原语使进程从运行态进入阻塞态，并把挂到信号量 "),n("code",[t._v("S")]),t._v(" 的等待队列（即阻塞队列）中。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 进程使用完资源后，通过 signal 原语释放 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Semaphore S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依然有进程在等待该类资源")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wakeup")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("释放资源后， 若还有别的进程在等待这种资源，则使用 "),n("code",[t._v("wakeup")]),t._v(" 原语唤醒等待队列中的一个进程，该进程从阻塞态变为就绪态。")]),t._v(" "),n("h3",{attrs:{id:"信号量机制实现进程互斥、同步、前驱关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制实现进程互斥、同步、前驱关系"}},[t._v("#")]),t._v(" 信号量机制实现进程互斥、同步、前驱关系")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"信号量机制实现进程互斥"}},[t._v("信号量机制实现进程互斥")]),n("p",[t._v("信号量 "),n("code",[t._v("mutex")]),t._v(" 表示 “进入临界区的名额”。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*记录型信号量的定义*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余资源数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("process")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待队列")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Semaphore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 信号量机制实现互斥 */")]),t._v("\nSemaphore mutex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用临界区前加锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区代码段")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用临界区后解锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区代码段")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"信号量机制实现进程同步"}},[t._v("信号量机制实现进程同步")]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 信号量机制实现同步 */")]),t._v("\nSemaphore S "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 1;")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 2; ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 3;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P2 的执行需要依赖一种信号量资源 S，而这种资源只能由 P1 释放，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因此保证必须 P1 后再 P2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 4;")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 5; ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 6;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"信号量机制实现前驱关系"}},[t._v("信号量机制实现前驱关系")]),n("p",[t._v("其实每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作）。")]),t._v(" "),n("h3",{attrs:{id:"进程同步与互斥经典问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程同步与互斥经典问题"}},[t._v("#")]),t._v(" 进程同步与互斥经典问题")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"生产者-消费者问题"}},[t._v("生产者-消费者问题")]),n("p",[t._v("问题描述：系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用。")]),t._v(" "),n("p",[t._v("生产者、消费者共享一个初始为空、大小为 n 的缓冲区。")]),t._v(" "),n("p",[t._v("只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待（同步关系：缓冲区满要等待消费者取走产品）。")]),t._v(" "),n("p",[t._v("只有缓冲区不空时，消费者才能从中取出产品，否则必须等待（同步关系：缓冲区空要等待生产者放入产品）。")]),t._v(" "),n("p",[t._v("缓冲区是临界资源，各进程必须互斥访问（互斥关系）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("semaphore mutex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 互斥信号量，用于实现对缓冲区的互斥访问")]),t._v("\nsemaphore empty "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步信号量，表示空闲缓冲区的数量")]),t._v("\nsemaphore full "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步信号量，表示产品的数量")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("producer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// produce a product;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// put the product into buffer;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get a product from buffer;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use the product;")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("实现互斥的 P 操作一定要在实现同步的 P 操作之后。")])]),t._v(" "),n("p",[t._v("V 操作不会导致进程阻塞，因此两个 V 操作顺序可以交换。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"吸烟者问题"}},[t._v("吸烟者问题")]),n("p",[t._v("问题描述：假设一个系统有三个抽烟者和一个供应者，抽烟者不停卷烟并抽掉，需要三种材料：烟草、纸和胶水。三个抽烟者中，第一个有烟草，第二个有纸，第三个供胶水。供应者无限提供三种材料，每次将两种材料放桌子上，拥有另一种材料的抽烟者就卷烟抽烟，并告诉供应者我完成了，供应者又放另外两种材料，让他们轮流吸烟。")]),t._v(" "),n("p",[t._v("桌子可以看成容量为 1 的缓冲区，互斥访问（mutex）。")]),t._v(" "),n("p",[t._v("有组合一，抽烟者 1 可以抽烟（同步关系 offer1 = 0）；有组合二，吸烟者 2 可以抽烟（同步关系 offer2 = 0）；有组合三，吸烟者 3 可以抽烟（同步关系 offer3 = 0）。")]),t._v(" "),n("p",[t._v("完成信号后，放下一个组合（同步关系 plate = 1）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("semaphore offer1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore offer2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore offer3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore plate  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore mutex  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("provider")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// group1 be put into the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// group2 be put into the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// group3 be put into the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoker1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// take group1 from the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoker2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// take group2 from the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoker3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// take group3 from the plate;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"读者-写者问题"}},[t._v("读者-写者问题")]),n("p",[t._v("问题描述：有读者和写者两组并发进程，共享一个文件，允许多个读者进程同时访问共享数据，只允许一个写者进程访问共享数据，读者进程和写者进程不能同时访问共享数据。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("semaphore rw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现文件的互斥访问，表示当前是否有进程在访问共享文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录当前有多少个读进程在访问文件")]),t._v("\nsemaphore mutex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现对 count 的互斥访问")]),t._v("\nsemaphore w "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现写优先")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// write;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"anchor",attrs:{id:"哲学家进餐问题"}},[t._v("哲学家进餐问题")]),n("p",[t._v("问题描述：圆桌上 5 名哲学家，每两个哲学家之间摆一根筷子，桌子中间为米饭，哲学家思考不影响他人，哲学家饥饿时才试图拿起筷子（一根一根拿，只能拿自己左右手的筷子），如果筷子在别人手里，就等待，同时拿起两根筷子才能进餐，进餐完毕，放下筷子思考。")]),t._v(" "),n("p",[t._v("5 个哲学家进程，哲学家和相邻的两个哲学家对中间的筷子的访问是互斥的。")]),t._v(" "),n("p",[t._v("如果每个哲学家拿了一根筷子，大家都吃不了饭，造成死锁，如何解决。")]),t._v(" "),n("p",[t._v("定义互斥信号量 "),n("code",[t._v("chopstick[5] = {1,1,1,1,1}")]),t._v("，哲学家编号 0、1、2、3、4，第 "),n("code",[t._v("i")]),t._v(" 哲学家左边的筷子是 "),n("code",[t._v("i")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("semaphore chopstick"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore mutex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 互斥取筷子")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chopstick"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿左")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chopstick"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿右")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eat hotpot;")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chopstick"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放左")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chopstick"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放右")]),t._v("\n        think"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如何预防死锁：")]),t._v(" "),n("ul",[n("li",[t._v("允许最多四个哲学家同时进餐；")]),t._v(" "),n("li",[t._v("令奇数号哲学家先拿左边筷子，偶数号先拿右边筷子。")])]),t._v(" "),n("h3",{attrs:{id:"管程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#管程"}},[t._v("#")]),t._v(" 管程")]),t._v(" "),n("p",[t._v("指的是管理共享变量以及对共享变量的操作过程，让它们支持并发。")]),t._v(" "),n("h2",{attrs:{id:"_2-4-死锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-死锁"}},[t._v("#")]),t._v(" 2.4 死锁")]),t._v(" "),n("h3",{attrs:{id:"死锁的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#死锁的概念"}},[t._v("#")]),t._v(" 死锁的概念")]),t._v(" "),n("p",[n("strong",[t._v("死锁")]),t._v("：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。")]),t._v(" "),n("div",{staticStyle:{color:"red"}},[n("div",{staticClass:"anchor",attrs:{id:"死锁产生的必要条件"}},[t._v("死锁产生的必要条件")])]),n("ul",[n("li",[n("strong",[t._v("互斥")]),t._v("：只有对必须互斥使用的资源的争抢才会导致死锁。")]),t._v(" "),n("li",[n("strong",[t._v("不可剥夺")]),t._v("：进程获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。")]),t._v(" "),n("li",[n("strong",[t._v("请求并保持")]),t._v("：进程已保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己己有的资源保持不放。")]),t._v(" "),n("li",[n("strong",[t._v("循环等待")]),t._v("：存在进程资源的循环等待链，链中的每一个进程已经获得的资源同时被下一个进程所请求。")])]),t._v(" "),n("p",[t._v("死锁的处理策略：预防、避免、检测和解除。")]),t._v(" "),n("h3",{attrs:{id:"预防死锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预防死锁"}},[t._v("#")]),t._v(" 预防死锁")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"破坏互斥条件"}},[t._v("破坏互斥条件")]),n("p",[t._v("如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。")]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：很多时候都无法破坏互斥条件。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"破坏不可剥夺条件"}},[t._v("破坏不可剥夺条件")]),n("ul",[n("li",[t._v("方案一：当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放从而破坏了不可剥夺条件。")]),t._v(" "),n("li",[t._v("方案二：当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺，这种方式一般需要考虑各进程的优先级。")])]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("实现起来比较复杂。")]),t._v(" "),n("li",[t._v("释放己获得的资源可能造成前一阶段工作的失效。因此这种方法一般只适用于易保存和恢复状态的资源，如CPU。")]),t._v(" "),n("li",[t._v("反复地申请和释放资源会增加系统开销，降低系统吞吐量。")]),t._v(" "),n("li",[t._v("若采用方案一，意味着只要暂时得不到某个资源，之前获得的那些资源就都需要放弃，以后再重新申请。如果一直发生这样的情况，就会导致进程饥饿。")])]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"破坏请求并保持条件"}},[t._v("破坏请求并保持条件")]),n("p",[t._v("可采用 "),n("strong",[t._v("静态分配方法")]),t._v("，即进程在运行前一次申请完它所需要的全部资源，在它的资源未满足前，不让它投入运行。一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的任何资源了。")]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，"),n("strong",[t._v("资源利用率极低")]),t._v("。另外，该策略也有可能 "),n("strong",[t._v("导致某些进程饥饿")]),t._v("。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"破坏循环等待条件"}},[t._v("破坏循环等待条件")]),n("p",[t._v("可采用 "),n("strong",[t._v("顺序资源分配法")]),t._v("。首先给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源（即编号相同的资源）一次申请完。")]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("不方便增加新的设备，因为可能需要重新分配所有的编号；")]),t._v(" "),n("li",[t._v("进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源浪费；")]),t._v(" "),n("li",[t._v("必须按规定次序申请资源，用户编程麻烦。")])]),t._v(" "),n("h3",{attrs:{id:"避免死锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#避免死锁"}},[t._v("#")]),t._v(" 避免死锁")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"安全序列"}},[t._v("安全序列")]),n("p",[n("strong",[t._v("安全序列")]),t._v("：就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。"),n("strong",[t._v("只要能找出一个安全序列，系统就是安全状态")]),t._v("。当然，安全序列可能有多个。")]),t._v(" "),n("p",[t._v("如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了不安全状态。这就意味着之后可能所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况。")]),t._v(" "),n("p",[t._v("如果系统处于 "),n("strong",[t._v("安全状态")]),t._v("，就 "),n("strong",[t._v("一定不会")]),t._v(" 发生死锁。如果系统进入 "),n("strong",[t._v("不安全状态")]),t._v("，就 "),n("strong",[t._v("可能")]),t._v(" 发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态）。")]),t._v(" "),n("p",[t._v("因此可以 "),n("strong",[t._v("在资源分配之前预先判断这次分配是否会导致系统进入不安全状态")]),t._v("，以此决定是否答应资源分配请求。这就是 "),n("strong",[t._v("“银行家算法”")]),t._v(" 的核心思想。")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"银行家算法"}},[t._v("银行家算法")]),n("p",[n("strong",[t._v("核心思想")]),t._v("：在进程提出资源申请时，先预判此次分配是否会导致系统进入不安全状态。如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待。")]),t._v(" "),n("p",[t._v("假定操作系统中的 4 个进程 P1、P2、P3、P4 和 3 类资源 R1、R2、R3（资源数量分别为 9、3、6），在 t0 时刻的资源分配情况如表 2-1：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(822),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(823),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(824),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(825),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(826),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(827),alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(828),alt:"img"}})]),t._v(" "),n("h3",{attrs:{id:"死锁的检测和解除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#死锁的检测和解除"}},[t._v("#")]),t._v(" 死锁的检测和解除")]),t._v(" "),n("div",{staticClass:"anchor",attrs:{id:"死锁的检测"}},[t._v("死锁的检测")]),n("p",[t._v("如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。相应的，这些被激活的进程执行完了之后又会归还一些资源，这样可能又会激活另外一些阻塞的进程...")]),t._v(" "),n("p",[t._v("如果按上述过程分析，最终能消除所有边，就称这个图是 "),n("strong",[t._v("可完全简化的")]),t._v("。此时一定没有发生死锁（相当于能找到一个安全序列）。")]),t._v(" "),n("p",[t._v("如果最终不能消除所有边，那么此时就是发生了死锁。最终还连着边的那些进程就是处于死锁状态的进程。")]),t._v(" "),n("p",[n("strong",[t._v("检测死锁的算法：")])]),t._v(" "),n("ul",[n("li",[t._v("第一步：在资源分配图中，找出既不阻塞又不是孤点的进程 P（即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中己有空闲资源数量。消去它所有的请求边和分配变，使之称为孤立的结点。")]),t._v(" "),n("li",[t._v("第二步：进程 P 所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。")])]),t._v(" "),n("p",[t._v("根据第一步中的方法进行一系列简化后，若能消去途中所有的边，则称该图是 "),n("strong",[t._v("可完全简化的")]),t._v("。")]),t._v(" "),n("div",{staticStyle:{color:"red"}},[n("p",[n("strong",[t._v("死锁定理：如果某时刻系统的资源分配图是不可完全简化的，那么此时系统死锁。")])])]),n("div",{staticClass:"anchor",attrs:{id:"死锁的解除"}},[t._v("死锁的解除")]),n("p",[t._v("一旦检测出死锁的发生，就应该立即解除死锁。")]),t._v(" "),n("p",[n("strong",[t._v("解除死锁的主要方法有：")])]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("资源剥夺法")]),t._v("。挂起（暂时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。")]),t._v(" "),n("li",[n("strong",[t._v("撤销进程法")]),t._v("（或称终止进程法）。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间，己经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来。")]),t._v(" "),n("li",[n("strong",[t._v("进程回退法")]),t._v("。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。")])])])}),[],!1,null,null,null);s.default=e.exports},821:function(t,s,a){t.exports=a.p+"assets/img/image-20240118123420827.1eb113d5.png"},822:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125171934215-167814328.c4fa6b2f.png"},823:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172027066-647382599.b2a69344.png"},824:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172232493-1843282166.06a52ad3.png"},825:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172314635-1423969714.21e267f2.png"},826:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172354117-21808820.aad52246.png"},827:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172427092-1250011632.d9bc252e.png"},828:function(t,s,a){t.exports=a.p+"assets/img/1358881-20191125172453218-639569059.634c946a.png"}}]);