(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{1044:function(a,v,t){"use strict";t.r(v);var s=t(14),_=Object(s.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"第1章-java程序设计概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第1章-java程序设计概述"}},[a._v("#")]),a._v(" 第1章 Java程序设计概述")]),a._v(" "),t("p",[a._v("Java 是一门面向对象编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念。")]),a._v(" "),t("h2",{attrs:{id:"_1-1-java-程序设计平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java-程序设计平台"}},[a._v("#")]),a._v(" 1.1 Java 程序设计平台")]),a._v(" "),t("p",[a._v("作为一名程序设计人员，常常希望能够有一种语言，它具有令人赏心悦目的语法和易于理解的语义（C++不是这样的）。与许多其他的优秀语言一样，Java完全满足了这些要求。")]),a._v(" "),t("p",[a._v("有些语言提供了可移植性、垃圾收集等，但是，没有提供一个大型的库。如果想要有奇特的绘图功能、网络连接功能和数据库存取功能就必须自己动手编写代码。Java具备所有这些特性，它是一种功能齐全的出色语言，是一个高质量的执行环境，还提供了一个庞大的库。")]),a._v(" "),t("p",[a._v("正是因为它集多种优势于一身，所以对广大的程序设计人员有着不可抗拒的吸引力。")]),a._v(" "),t("h2",{attrs:{id:"_1-2-java-白皮书-的关键术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java-白皮书-的关键术语"}},[a._v("#")]),a._v(" 1.2 Java ”白皮书” 的关键术语")]),a._v(" "),t("p",[a._v("Java 的设计者已经编写了颇有影响力的 “白皮书”，用来解释设计的初衷以及完成的情况，并且发布了一个简短的摘要。")]),a._v(" "),t("h3",{attrs:{id:"简单性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单性"}},[a._v("#")]),a._v(" 简单性")]),a._v(" "),t("p",[a._v("人们希望构建一个无须深奥的专业训练就可以进行编程的系统，并且要符合当今的标准惯例。因此，尽管人们发现 C++ 不太适用，但在设计 Java 的时候还是尽可能地接近 C++，以便系统更易于理解。Java 剔除了 C++ 中许多很少使用、难以理解、易混淆的特性。在目前看来，这些特性带来的麻烦远远多于其带来的好处。")]),a._v(" "),t("h3",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),t("p",[a._v("简单地讲，面向对象设计是一种程序设计技术。它将重点放在数据（即对象）和对象的接口上。Java 的面向对象特性与 C++ 旗鼓相当。Java 与 C++ 的主要不同点在于多重继承，在 Java 中，取而代之的是更简单的接口概念。与 C++ 相比，Java 提供了更丰富的运行时自省功能。")]),a._v(" "),t("h3",{attrs:{id:"分布式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式"}},[a._v("#")]),a._v(" 分布式")]),a._v(" "),t("p",[a._v("Java 有一个丰富的例程库，用于处理像 HTTP 和 FTP 之类的 TCP/IP 协议。Java 应用程序能够通过 URL 打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。")]),a._v(" "),t("h3",{attrs:{id:"健壮性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#健壮性"}},[a._v("#")]),a._v(" 健壮性")]),a._v(" "),t("p",[a._v("Java 的设计目标之一在于使得 Java 编写的程序具有多方面的可靠性。Java 投入了大量的精力进行早期的问题检测、后期动态的（运行时）检测，并消除了容易出错的情况。Java 和 C++ 最大的不同在于 Java 采用的指针模型可以消除重写内存和损坏数据的可能性。")]),a._v(" "),t("h3",{attrs:{id:"安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[a._v("#")]),a._v(" 安全性")]),a._v(" "),t("p",[a._v("Java 适用于网络/分布式环境。为了达到这个目标，在安全方面投入了很大精力。使用 Java 可以构建防病毒、防篡改的系统。")]),a._v(" "),t("h3",{attrs:{id:"体系结构中立"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#体系结构中立"}},[a._v("#")]),a._v(" 体系结构中立")]),a._v(" "),t("p",[a._v("编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有 Java 运行时系统，这些编译后的代码可以在许多处理器上运行。Java 编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。精心设计的字节码不仅可以很容易地在任何机器上解释执行，而且还可以动态地翻译成本地机器代码。")]),a._v(" "),t("h3",{attrs:{id:"可移植性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可移植性"}},[a._v("#")]),a._v(" 可移植性")]),a._v(" "),t("p",[a._v("与 C 和 C++ 不同，Java 规范中没有 “依赖具体实现” 的地方。基本数据类型的大小以及有关运算都做了明确的说明。")]),a._v(" "),t("p",[a._v("例如，Java 中的 int 永远为 32 位的整数，而在 C/C++ 中，int 可能是 16 位整数、32 位整数，也可能是编译器提供商指定的其他大小。唯一的限制只是 int 类型的大小不能低于 shot int，并且不能高于 long int。在 Java 中，数据类型具有固定的大小，这消除了代码移植时令人头痛的主要问题。二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串是用标准的 Unicode 格式存储的。")]),a._v(" "),t("p",[a._v("Java 库能很好地支持平台独立性。你可以处理文件、正则表达式、XML、日期和时间、数据库、网络连接、线程等，而不用操心底层操作系统。不仅程序是可移植的，Java API 往往也比原生 API 质量更高。")]),a._v(" "),t("h3",{attrs:{id:"解释型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释型"}},[a._v("#")]),a._v(" 解释型")]),a._v(" "),t("p",[a._v("Java 解释器可以在任何移植了解释器的机器上执行Java字节码。由于链接是一个增量式且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。")]),a._v(" "),t("h3",{attrs:{id:"高性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高性能"}},[a._v("#")]),a._v(" 高性能")]),a._v(" "),t("p",[a._v("尽管对解释后的字节码性能已经比较满意，但在有些场合下还需要更加高效的性能。字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定 CPU 的机器码。")]),a._v(" "),t("h3",{attrs:{id:"多钱程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多钱程"}},[a._v("#")]),a._v(" 多钱程")]),a._v(" "),t("p",[a._v("多线程可以带来更好的交互响应和实时行为。")]),a._v(" "),t("h3",{attrs:{id:"动态性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态性"}},[a._v("#")]),a._v(" 动态性")]),a._v(" "),t("p",[a._v("从各种角度看，Java 与 C 或 C++ 相比更加具有动态性。它能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响。在 Java 中找出运行时类型信息十分简单。")])])}),[],!1,null,null,null);v.default=_.exports}}]);