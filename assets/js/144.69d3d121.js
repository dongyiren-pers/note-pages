(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{1061:function(t,a,v){"use strict";v.r(a);var e=v(14),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"第10章-java类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第10章-java类库"}},[t._v("#")]),t._v(" 第10章 Java类库")]),t._v(" "),v("h2",{attrs:{id:"_10-1-基础类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-基础类库"}},[t._v("#")]),t._v(" 10.1 基础类库")]),t._v(" "),v("h3",{attrs:{id:"java-lang-object"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-object"}},[t._v("#")]),t._v(" java.lang.Object")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int "),v("strong",[t._v("hashCode")]),t._v("()")]),t._v(" "),v("td",[t._v("返回对象的散列码。散列码可以是任意的整数，包括正数或负数。两个相等的对象要求返回相等的散列码。")])]),t._v(" "),v("tr",[v("td",[t._v("Class "),v("strong",[t._v("getClass")]),t._v("()")]),t._v(" "),v("td",[t._v("返回包含对象信息的类对象。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("equals")]),t._v("(Object otherObject)")]),t._v(" "),v("td",[t._v("比较两个对象是否相等，如果两个对象指向同一块存储区域，方法返回 true；否则方法返回 false。在自定义的类中，应该覆盖这个方法。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toString")]),t._v("()")]),t._v(" "),v("td",[t._v("返回描述该对象值的字符串。在自定义的类中，应该覆盖这个方法。")])])])])]),v("h3",{attrs:{id:"java-lang-class"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-class"}},[t._v("#")]),t._v(" java.lang.Class")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("String "),v("strong",[t._v("getName")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个类的名字。")])]),t._v(" "),v("tr",[v("td",[t._v("Class "),v("strong",[t._v("getSuperclass")]),t._v("()")]),t._v(" "),v("td",[t._v("以 Class 对象的形式返回这个类的超类信息。")])])])])]),v("h3",{attrs:{id:"java-lang-integer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-integer"}},[t._v("#")]),t._v(" java.lang.Integer")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int "),v("strong",[t._v("intValue")]),t._v("()")]),t._v(" "),v("td",[t._v("以 int 的形式返回 Integer 对象的值。")])]),t._v(" "),v("tr",[v("td",[t._v("static String "),v("strong",[t._v("toString")]),t._v("(int i)")]),t._v(" "),v("td",[t._v("以一个新 String 对象的形式返回给定数值 i 的十进制表示。")])]),t._v(" "),v("tr",[v("td",[t._v("static String "),v("strong",[t._v("toString")]),t._v("(int i, int radix)")]),t._v(" "),v("td",[t._v("返回数值 i 的基于给定 radix 进制的表示。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("parselnt")]),t._v("(String s)"),v("br"),t._v("static int "),v("strong",[t._v("parselnt")]),t._v("(String s, int radix)")]),t._v(" "),v("td",[t._v("返回字符串 s 表示的整型数值，给定字符串表示的是十进制的整数，或是 radix 进制的整数。")])]),t._v(" "),v("tr",[v("td",[t._v("static Integer "),v("strong",[t._v("valueOf")]),t._v("(String s)"),v("br"),t._v("static Integer "),v("strong",[t._v("valueOf")]),t._v("(String s, int radix)")]),t._v(" "),v("td",[t._v("返回使用 s 表示的整型数值进行初始化后的一个新 Integer 对象，给定字符串表示的是十进制的整数，或是 radix 进制的整数。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("compare")]),t._v("(int x, int y) 7")]),t._v(" "),v("td",[t._v("如果 x < y 返回一个负整数；如果 x 和 y 相等，则返回 0；否则返回一个负整数。")])])])])]),v("h3",{attrs:{id:"java-lang-double"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-double"}},[t._v("#")]),t._v(" java.lang.Double")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static int "),v("strong",[t._v("compare")]),t._v("(double x, double y) 1.4")]),t._v(" "),v("td",[t._v("如果 x < y 返回一个负数；如果 x 和 y 相等则返回 0；否则返回一个负数。")])])])])]),v("h3",{attrs:{id:"java-lang-character"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-character"}},[t._v("#")]),t._v(" java.lang.Character")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void "),v("strong",[t._v("Character")]),t._v("(char value)")]),t._v(" "),v("td",[t._v("构造一个新分配的 Character 对象，用以表示指定的 char 值。")])]),t._v(" "),v("tr",[v("td",[t._v("char "),v("strong",[t._v("charValue")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此 Character 对象的值，此对象表示基本 char 值。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(Character anotherCharacter)")]),t._v(" "),v("td",[t._v("根据数字比较两个 Character 对象。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("equals")]),t._v("(Character anotherCharacter)")]),t._v(" "),v("td",[t._v("将此对象与指定对象比较，当且仅当参数不是 null，而是一个与此对象 包含相同 char 值的 Character 对象时， 结果才是 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isDigit")]),t._v("(char ch)")]),t._v(" "),v("td",[t._v("确定指定字符是否为数字，如果通过 Character. getType(ch) 提供的字符的常规类别类型为 DECIMAL_DIGIT_NUMBER，则字符为数字。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isLetter")]),t._v("(int codePoint)")]),t._v(" "),v("td",[t._v("确定指定字符（Unicode 代码点）是否为字母。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isLetterOrDigit")]),t._v("(int codePoint)")]),t._v(" "),v("td",[t._v("确定指定字符（Unicode 代码点）是否为字母或数字。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isLowerCase")]),t._v("(char ch)")]),t._v(" "),v("td",[t._v("确定指定字符是否为小写字母。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isUpperCase")]),t._v("(char ch)")]),t._v(" "),v("td",[t._v("确定指定字符是否为大写字母。")])]),t._v(" "),v("tr",[v("td",[t._v("char "),v("strong",[t._v("toLowerCase")]),t._v("(char ch)")]),t._v(" "),v("td",[t._v("使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为小写。")])]),t._v(" "),v("tr",[v("td",[t._v("char "),v("strong",[t._v("toUpperCase")]),t._v("(char ch)")]),t._v(" "),v("td",[t._v("使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为大写。")])])])])]),v("h3",{attrs:{id:"java-lang-string"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-string"}},[t._v("#")]),t._v(" java.lang.String")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("char "),v("strong",[t._v("charAt")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("返回给定位置的代码单元。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("codePointAt")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("返回从给定位置开始的码点。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("offsetByCodePoints")]),t._v("(int startlndex , int cpCount)")]),t._v(" "),v("td",[t._v("返回从 startlndex 代码点开始，位移 cpCount 后的码点索引。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(String other)")]),t._v(" "),v("td",[t._v("按照字典顺序，如果字符串位于 other 之前，返回一个负数；如果字符串位于 other 之后，返回一个正数；如果两个字符串相等，返回 0。")])]),t._v(" "),v("tr",[v("td",[t._v("IntStream "),v("strong",[t._v("codePoints")]),t._v("()")]),t._v(" "),v("td",[t._v("将这个字符串的码点作为一个流返回。调用 toArray 将它们放在一个数组中。")])]),t._v(" "),v("tr",[v("td",[t._v("new "),v("strong",[t._v("String")]),t._v("(int[] codePoints, int offset, int count)")]),t._v(" "),v("td",[t._v("用数组中从 offset 开始的 count 个码点构造一个字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("equals")]),t._v("(Object other)")]),t._v(" "),v("td",[t._v("如果字符串与 other 相等，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("equalslgnoreCase")]),t._v("(String other)")]),t._v(" "),v("td",[t._v("如果字符串与 other 相等（忽略大小写），返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("startsWith")]),t._v("(String prefix)")]),t._v(" "),v("td",[t._v("如果字符串以 suffix 开头， 则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("endsWith")]),t._v("(String suffix)")]),t._v(" "),v("td",[t._v("如果字符串以 suffix 结尾， 则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("indexOf")]),t._v("(String str)"),v("br"),t._v("int "),v("strong",[t._v("indexOf")]),t._v("(String str, int fromlndex)"),v("br"),t._v("int "),v("strong",[t._v("indexOf")]),t._v("(int cp)"),v("br"),t._v("int "),v("strong",[t._v("indexOf")]),t._v("(int cp, int fromlndex)")]),t._v(" "),v("td",[t._v("返回与字符串 str 或码点 cp 匹配的第一个子串的开始位置。 这个位置从索引 0 或 fromlndex 开始计算。如果在原始串中不存在 str，返回 -1。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("lastlndexOf")]),t._v("(String str)"),v("br"),t._v("int "),v("strong",[t._v("lastlndexOf")]),t._v("(String str, int fromlndex)"),v("br"),t._v("int "),v("strong",[t._v("lastindexOf")]),t._v("(int cp)"),v("br"),t._v("int "),v("strong",[t._v("lastindexOf")]),t._v("(int cp, int fromlndex)")]),t._v(" "),v("td",[t._v("返回与字符串 str 或码点 cp 匹配的最后一个子串的开始位置。这个位置从原始串尾端或fromIndex 开始计算。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("length")]),t._v("()")]),t._v(" "),v("td",[t._v("返回字符串的长度。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("codePointCount")]),t._v("(int startlndex, int endlndex)")]),t._v(" "),v("td",[t._v("返回 startlndex 和 endlndex - 1之间的代码点数量。 没有配成对的代用字符将计入代码点。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("replace")]),t._v("(CharSequence oldString, CharSequence newString)")]),t._v(" "),v("td",[t._v("返回一个新字符串 。 这个字符串用 newString 代替原始字符串中所有的 oldString。可以用 String 或 StringBuilder 对象作为 CharSequence 参数。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("substring")]),t._v("(int beginlndex)  "),v("br"),t._v("String "),v("strong",[t._v("substring")]),t._v("(int beginlndex, int endlndex)")]),t._v(" "),v("td",[t._v("返回一个新字符串。这个字符串包含原始字符串中从 beginlndex 到串尾或 endlndex - 1 的所有代码单元。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toLowerCase")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个新字符串。这个字符串将原始字符串中全部的大写字母改为小写。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toUpperCase")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个新字符串。这个字符串将原始字符串中全部的小写字母改为大写。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("trim")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个新字符串。 这个字符串将删除了原始字符串头部和尾部的空格。")])]),t._v(" "),v("tr",[v("td",[t._v("String[] "),v("strong",[t._v("split")]),t._v("(String regex, int limit)"),v("br"),t._v("String[] "),v("strong",[t._v("split")]),t._v("(String regex)")]),t._v(" "),v("td",[t._v("使用给定正则表达式的匹配项拆分此字符串。"),v("br"),t._v("limit 参数控制应用匹配的次数，因此影响结果阵列的长度。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("join")]),t._v("(CharSequence delimiter, CharSequence ... elements)")]),t._v(" "),v("td",[t._v("返回一个新字符串，使用给定的分隔符连接所有元素 。")])])])])]),v("h3",{attrs:{id:"java-lang-stringbuilder"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-stringbuilder"}},[t._v("#")]),t._v(" java.lang.StringBuilder")]),t._v(" "),v("blockquote",[v("p",[t._v("public final class StringBuilder "),v("strong",[t._v("extends")]),t._v(" AbstractStringBuilder "),v("strong",[t._v("implements")]),t._v(" java.io.Serializable, CharSequence { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("StringBuilder")]),t._v("()")]),t._v(" "),v("td",[t._v("构造的字符串构建器。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("length")]),t._v("()")]),t._v(" "),v("td",[t._v("返回构建器或缓冲器中的代码单元数量。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("append")]),t._v("(String str)")]),t._v(" "),v("td",[t._v("追加一个字符串并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("append")]),t._v("(char c)")]),t._v(" "),v("td",[t._v("追加一个代码单元并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("appendCodePoint")]),t._v("(int cp)")]),t._v(" "),v("td",[t._v("追加一个码点，并将其转换为一个或两个代码单元并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("setCharAt")]),t._v("(int i , char c)")]),t._v(" "),v("td",[t._v("将第 i 个代码单元设置为  c。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("insert")]),t._v("(int offset, String str)")]),t._v(" "),v("td",[t._v("在 offset 位置插入一个字符串并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("insert")]),t._v("(int offset, Char c)")]),t._v(" "),v("td",[t._v("在 offset 位置插入一个代码单元并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("delete")]),t._v("(int start, int end)")]),t._v(" "),v("td",[t._v("删除偏移量从 start 到 end - 1 的代码单元并返回 this。")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder "),v("strong",[t._v("deleteCharAt")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("删除此序列中指定位置的字符。此序列缩短一个字符。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toString")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个与构建器或缓冲器内容相同的字符串。")])])])])]),v("h3",{attrs:{id:"java-lang-enum-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-enum-e"}},[t._v("#")]),t._v(" java.lang.Enum<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static Enum "),v("strong",[t._v("valueOf")]),t._v("(Class enumClass , String name)")]),t._v(" "),v("td",[t._v("返回指定名字、给定类的枚举常量。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toString")]),t._v("()")]),t._v(" "),v("td",[t._v("返回枚举常量名。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("ordinal")]),t._v("()")]),t._v(" "),v("td",[t._v("返回枚举常量在 enum 声明中的位置，从 0 开始计数。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(E other)")]),t._v(" "),v("td",[t._v("如果枚举常量出现在 other 之前，返回负值；如果 this 等于 other，返回 0 ；否则，返回正值。 枚举常量的出现次序在 enum 声明中给出 。")])])])])]),v("h3",{attrs:{id:"java-lang-comparable-t"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-comparable-t"}},[t._v("#")]),t._v(" java.lang.Comparable<T>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(T other) 1.0")]),t._v(" "),v("td",[t._v("用这个对象与 other 进行比较。如果这个对象小于 other 则返回负值；如果相等则返回 0；否则返回正值。")])])])])]),v("h3",{attrs:{id:"java-lang-throwable"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-throwable"}},[t._v("#")]),t._v(" java.lang.Throwable")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("Throwable")]),t._v("()")]),t._v(" "),v("td",[t._v("构造一个新的 Throwable 对象，这个对象没有详细的描述信息。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Throwable")]),t._v("(String message)")]),t._v(" "),v("td",[t._v("构造一个新的 throwable 对象，这个对象带有特定的详细描述信息 。 习惯上，所有派生的异常类都支持一个默认的构造器和一个带有详细描述信息的构造器。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getMessage")]),t._v("()")]),t._v(" "),v("td",[t._v("获得 Throwable 对象的详细描述信息。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Throwable")]),t._v("(Throwable cause)  1.4"),v("br"),v("strong",[t._v("Throwable")]),t._v("(String message, Throwable cause) 1.4")]),t._v(" "),v("td",[t._v("使用给定的 “原因” 构造一个 Throwable 对象。")])]),t._v(" "),v("tr",[v("td",[t._v("Throwable "),v("strong",[t._v("initCause")]),t._v("(Throwable cause) 1.4")]),t._v(" "),v("td",[t._v("将这个对象设置为 “原因” 。 如果这个对象已经被设置为 “原因”，则抛出一个异常。返回 this 引用。")])]),t._v(" "),v("tr",[v("td",[t._v("Throwable "),v("strong",[t._v("getCause")]),t._v("() 1.4")]),t._v(" "),v("td",[t._v("获得设置为这个对象的“原因”的异常对象。如果没有设置 “原因”，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("StackTraceElement[] "),v("strong",[t._v("getStackTrace")]),t._v("() 1.4")]),t._v(" "),v("td",[t._v("获得构造这个对象时调用堆栈的跟踪。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("addSuppressed")]),t._v("(Throwable t) 7")]),t._v(" "),v("td",[t._v("为这个异常增加一个 “抑制” 异常。 这出现在带资源的 try 语句中，其中 t 是 close 方法抛出的一个异常。")])]),t._v(" "),v("tr",[v("td",[t._v("Throwable[] "),v("strong",[t._v("getSuppressed")]),t._v("() 7")]),t._v(" "),v("td",[t._v("得到这个异常的所有 “抑制” 异常 。 这些一般是带资源的 try 语句中 close 方法抛出的异常。")])])])])]),v("h3",{attrs:{id:"java-lang-exception"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-exception"}},[t._v("#")]),t._v(" java.lang.Exception")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("Exception")]),t._v("(Throwable cause) 1.4  "),v("br"),v("strong",[t._v("Exception")]),t._v("(String message , Throwable cause)")]),t._v(" "),v("td",[t._v("使用给定的 “原因” 构造一个异常对象。")])])])])]),v("h3",{attrs:{id:"java-lang-runtimeexception"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-runtimeexception"}},[t._v("#")]),t._v(" java.lang.RuntimeException")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("RuntimeException")]),t._v("(Throwable cause) 1.4"),v("br"),v("strong",[t._v("RuntimeException")]),t._v("(String message , Throwable cause ) 1.4")]),t._v(" "),v("td",[t._v("使用给定的 “原因” 构造一个 RuntimeException 对象。")])])])])]),v("h3",{attrs:{id:"java-lang-stacktraceelement"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-stacktraceelement"}},[t._v("#")]),t._v(" java.lang.StackTraceElement")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("String "),v("strong",[t._v("getFileName")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个元素运行时对应的源文件名。如果这个信息不存在，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("getLineNumber")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个元素运行时对应的源文件行数。如果这个信息不存在，则返回 -1 。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getClassName")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个元素运行时对应的类的完全限定名。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getMethodName")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个元素运行时对应的方法名。构造器名是 <init> ；静态初始化器名是 <clinit>。这里无法区分同名 的重载方法。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isNativeMethod")]),t._v("()")]),t._v(" "),v("td",[t._v("如果这个元素运行时在一个本地方法中，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toString")]),t._v("()")]),t._v(" "),v("td",[t._v("如果存在的话，返回一个包含类名、方法名、文件名和行数的格式化字符串 。")])])])])]),v("h3",{attrs:{id:"java-lang-classloader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-classloader"}},[t._v("#")]),t._v(" java.lang.ClassLoader")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void "),v("strong",[t._v("setDefaultAssertionStatus")]),t._v("(boolean b) 1.4")]),t._v(" "),v("td",[t._v("对于通过类加载器加载的所有类，如果没有显式地说明类或包的断言状态，就启用或禁用断言。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("setClassAssertionStatus")]),t._v("(String className , boolean b) 1.4")]),t._v(" "),v("td",[t._v("对于给定的类和它的内部类，启用或禁用断言。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("setPackageAssertionStatus")]),t._v("(String packageName, boolean b) 1.4")]),t._v(" "),v("td",[t._v("对于给定的包和其子包中的所有类，启用或禁用断言。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("clearAssertionStatus")]),t._v("() 1.4")]),t._v(" "),v("td",[t._v("移去所有类和包的显式断言状态设置，并禁用所有通过这个类加载器加载的类的断言。")])])])])]),v("h2",{attrs:{id:"_10-2-反射类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-反射类库"}},[t._v("#")]),t._v(" 10.2 反射类库")]),t._v(" "),v("h3",{attrs:{id:"java-lang-class-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-class-2"}},[t._v("#")]),t._v(" java.lang.Class")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static Class "),v("strong",[t._v("forName")]),t._v("(String className)")]),t._v(" "),v("td",[t._v("返回描述类名为 className 的 Class 对象。")])]),t._v(" "),v("tr",[v("td",[t._v("Object "),v("strong",[t._v("newlnstance")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个类的一个新实例。")])]),t._v(" "),v("tr",[v("td",[t._v("Field[] "),v("strong",[t._v("getFields")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Field 对象的数组，这些对象记录了这个类或其超类的公有域。")])]),t._v(" "),v("tr",[v("td",[t._v("Field "),v("strong",[t._v("getField")]),t._v("(String name)  1.1")]),t._v(" "),v("td",[t._v("返回给定名称的公有域。")])]),t._v(" "),v("tr",[v("td",[t._v("Filed[] "),v("strong",[t._v("getDeclaredFields")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Field 对象的数组，这些对象记录了这个类的全部域。")])]),t._v(" "),v("tr",[v("td",[t._v("Field "),v("strong",[t._v("getDeclaredField")]),t._v("(String name) 1.1")]),t._v(" "),v("td",[t._v("返回类中声明的给定名称的域。")])]),t._v(" "),v("tr",[v("td",[t._v("Method[] "),v("strong",[t._v("getMethods")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Method 对象的数组，这些对象记录了所有的公有方法，包括从超类继承来的公有方法。")])]),t._v(" "),v("tr",[v("td",[t._v("Method[] "),v("strong",[t._v("getDeclareMethods")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Method 对象的数组，这些对象记录了这个类或接口的全部方法，但不包括由超类继承了的方法。")])]),t._v(" "),v("tr",[v("td",[t._v("Constructor[] "),v("strong",[t._v("getConstructors")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Constructor 对象的数组，其中包含了 Class 对象所描述的类的所有公有构造器。")])]),t._v(" "),v("tr",[v("td",[t._v("Constructor[] "),v("strong",[t._v("getDeclaredConstructors")]),t._v("() 1.1")]),t._v(" "),v("td",[t._v("返回包含 Constructor 对象的数组，其中包含了 Class 对象所描述的类的所有构造器。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-field"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-field"}},[t._v("#")]),t._v(" java.lang.reflect.Field")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Object "),v("strong",[t._v("get")]),t._v("(Object obj)")]),t._v(" "),v("td",[t._v("返回 obj 对象中用 Field 对象表示的域值。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("set")]),t._v("(Object obj , Object newValue)")]),t._v(" "),v("td",[t._v("用一个新值设置 Obj 对象中 Field 对象表示的域。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-method"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-method"}},[t._v("#")]),t._v(" java.lang.reflect.Method")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Object "),v("strong",[t._v("invoke")]),t._v("(Object implicitParameter, Object[] explicitParamenters)")]),t._v(" "),v("td",[t._v("调用这个对象所描述的方法，传递给定参数，并返回方法的返回值。对于静态方法 ，把 null 作为隐式参数传递。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-constructor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-constructor"}},[t._v("#")]),t._v(" java.lang.reflect.Constructor")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Object "),v("strong",[t._v("newlnstance")]),t._v("(Object[] args)")]),t._v(" "),v("td",[t._v("构造一个这个构造器所属类的新实例。")])]),t._v(" "),v("tr",[v("td",[t._v("Class "),v("strong",[t._v("getDeclaringClass")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述类中定义的构造器、方法或域的 Class 对象。")])]),t._v(" "),v("tr",[v("td",[t._v("Class[] "),v("strong",[t._v("getExceptionTypes")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述方法抛出的异常类型的 Class 对象数组。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("getModifiers")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述构造器、方法或域的修饰符的整型数值。使用Modifier类中的这个方法可以分析这个返回值。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getName")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述构造器、方法或域名的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("Class[] "),v("strong",[t._v("getParameterTypes")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述参数类型的 Class 对象数组。")])]),t._v(" "),v("tr",[v("td",[t._v("Class "),v("strong",[t._v("getReturnType")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于描述返回类型的 Class 对象。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-modifier"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-modifier"}},[t._v("#")]),t._v(" java.lang.reflect.Modifier")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static String "),v("strong",[t._v("toString")]),t._v("(int modifiers)")]),t._v(" "),v("td",[t._v("返回对应 modifiers 中位设置的修饰符的字符串表示。")])]),t._v(" "),v("tr",[v("td",[t._v("static boolean "),v("strong",[t._v("isAbstract")]),t._v("(int mod i fiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isFinal")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("islnterface")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isNative")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isPrivate")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isProtected")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isPublic")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isStatic")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isStrict")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isSynchronized")]),t._v("(int modifiers)"),v("br"),t._v("static boolean "),v("strong",[t._v("isVolatile")]),t._v("(int modifiers)")]),t._v(" "),v("td",[t._v("这些方法将检测方法名中对应的修饰符在 modifiers 值中的位。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-accessibleobject"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-accessibleobject"}},[t._v("#")]),t._v(" java.lang.reflect.AccessibleObject")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void "),v("strong",[t._v("setAccessible")]),t._v("(boolean flag)")]),t._v(" "),v("td",[t._v("为反射对象设置可访问标志。flag 为 true 表明屏蔽 Java 的访问检查，使得对象的私有属性也可以被查询和设置。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isAccessible")]),t._v("()")]),t._v(" "),v("td",[t._v("返回反射对象的可访问标志的值。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("setAccessible")]),t._v("(AccessibleObject[] array , boolean flag)")]),t._v(" "),v("td",[t._v("是一种设置对象数组可访问标志的快捷方法。")])])])])]),v("h3",{attrs:{id:"java-lang-reflect-array"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-array"}},[t._v("#")]),t._v(" java.lang.reflect.Array")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static Object "),v("strong",[t._v("get")]),t._v("(Object array, int index)"),v("br"),t._v("static xxx "),v("strong",[t._v("getXxx")]),t._v("(Object array,int index)")]),t._v(" "),v("td",[t._v("xxx 是 boolean、byte、char、double、float、int、long、short 之中的一种基本类型。"),v("br"),t._v("返回存储在给定位置上的给定数组的内容。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("set")]),t._v("(Object array, int index, Object newValue)"),v("br"),t._v("static "),v("strong",[t._v("setXxx")]),t._v("(Object array, int index, xxx newValue)")]),t._v(" "),v("td",[t._v("xxx 是 boolean、byte、char、double、float、int、long、short 之中的一种基本类型。"),v("br"),t._v("将一个新值存储到给定位置上的给定数组中。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("getLength")]),t._v("(Object array)")]),t._v(" "),v("td",[t._v("返回数组的长度。")])]),t._v(" "),v("tr",[v("td",[t._v("static Object "),v("strong",[t._v("newlnstance")]),t._v("(Class componentType, int length)"),v("br"),t._v("static Object "),v("strong",[t._v("newlnstance")]),t._v("(Class componentType, int[] length)")]),t._v(" "),v("td",[t._v("返回一个具有给定类型、 给定维数的新数组。")])])])])]),v("h2",{attrs:{id:"_10-3-工具类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-工具类库"}},[t._v("#")]),t._v(" 10.3 工具类库")]),t._v(" "),v("h3",{attrs:{id:"java-util-objects"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-objects"}},[t._v("#")]),t._v(" java.util.Objects")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static boolean "),v("strong",[t._v("equals")]),t._v("(Object a, Object b) 7")]),t._v(" "),v("td",[t._v("如果 a 和 b 都为 null ，返回 true ；如果只有其中之一为 null，则返回 false ；否则返回 a.equals(b)。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("hash")]),t._v("(Object... objects) 7")]),t._v(" "),v("td",[t._v("返回一个散列码，由提供的所有对象的散列码组合而得到。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("hashCode")]),t._v("(Object a) 7")]),t._v(" "),v("td",[t._v("如果 a 为 null 返回 0，否则返回 a.hashCode()。")])])])])]),v("h3",{attrs:{id:"java-util-arrays"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-arrays"}},[t._v("#")]),t._v(" java.util.Arrays")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static String "),v("strong",[t._v("toString")]),t._v("(type[] a)  5.0")]),t._v(" "),v("td",[t._v("返回包含 a 中数据元素的字符串，这些数据元素被放在括号内，并用逗号分隔。")])]),t._v(" "),v("tr",[v("td",[t._v("static type "),v("strong",[t._v("copyOf")]),t._v("(type[] a, int length)  6"),v("br"),t._v("static type "),v("strong",[t._v("copyOfRange")]),t._v("(type[] a, int start, int end) 6")]),t._v(" "),v("td",[t._v("返回与 a 类型相同的一个数组 ， 其长度为 length 或者 end-start，数组元素为 a 的值。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("sort")]),t._v("(type[] a)")]),t._v(" "),v("td",[t._v("将指定数组按升序进行排序。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T> void "),v("strong",[t._v("sort")]),t._v("(T[] a, Comparator<? super T> c)")]),t._v(" "),v("td",[t._v("根据指定比较器产生的顺序对指定的对象数组进行排序。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("binarySearch")]),t._v("(type[] a, type v) "),v("br"),t._v("static int "),v("strong",[t._v("binarySearch")]),t._v("(type[] a , int start, int end, type v) 6")]),t._v(" "),v("td",[t._v("采用二分搜索算法查找值。如果查找成功，则返回相应的下标值；否则，返回一个负数值 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("r")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("r")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")])])])])]),t._v("。"),v("br"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mo",[t._v("−")]),v("mi",[t._v("r")]),v("mo",[t._v("−")]),v("mn",[t._v("1")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-r-1")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),v("span",{staticClass:"mord"},[t._v("−")]),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),v("span",{staticClass:"mbin"},[t._v("−")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),v("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 是为保持有序应插入的位置。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("fill")]),t._v("(type[] a, type v)")]),t._v(" "),v("td",[t._v("将数组的所有数据元素值设置为 v。")])]),t._v(" "),v("tr",[v("td",[t._v("static boolean "),v("strong",[t._v("equals")]),t._v("(type[] a, type[] b) 5.0")]),t._v(" "),v("td",[t._v("如果两个数组长度相同，且在对应的位置上数据元素均相同，将返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("sort")]),t._v("(Object[] a)")]),t._v(" "),v("td",[t._v("使用 Merge Sort 算法对数组 a 中的元素进行排序。要求数组中的元素必须属于实现了 Comparable 接口的类，并且元素之间必须是可比较的。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("hashCode")]),t._v("(type[] a) 5.0")]),t._v(" "),v("td",[t._v("计算数组 a 的散列码。组成这个数组的元素类型可以是 object, int, long, short, char, byte, boolean, float 或 double。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> List<E> "),v("strong",[t._v("asList")]),t._v("(E... array)")]),t._v(" "),v("td",[t._v("返回一个数组元素的列表视图。这个数组是可修改的，但其大小不可变。")])])])]),t._v(" "),v("p",[t._v("a 是类型为 int、 long 、 short、 char 、 byte 、 boolean 、 float 或 double 的数组。")])]),v("h3",{attrs:{id:"java-util-collections"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-collections"}},[t._v("#")]),t._v(" java.util.Collections")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static <T extends Comparable<? super T>> void "),v("strong",[t._v("sort")]),t._v("(List<T> elements)")]),t._v(" "),v("td",[t._v("使用稳定的排序算法，对列表中的元素进行排序。这个算法的时间复杂度是 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("O")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mi",[t._v("log")]),v("mo",[t._v("⁡")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n\\log{n})")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),v("span",{staticClass:"mop"},[t._v("lo"),v("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathdefault"},[t._v("n")])]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，其中 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("n")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 为列表的长度。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("shuffle")]),t._v("(List<?> elements)"),v("br"),t._v("static void "),v("strong",[t._v("shuffle")]),t._v("(List<?> elements, Random r)")]),t._v(" "),v("td",[t._v("随机地打乱列表中的元素。这个算法的时间复杂度是 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("O")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("a")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(a(n))")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("a")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("n")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 是列表的长度，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("a")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("a(n)")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("a")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" 是访问元素的平均时间。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static <T extends Comparable<? super T>> int "),v("strong",[t._v("binarySearch")]),t._v("(List<T> elements, T key)"),v("br"),t._v("static <T> int "),v("strong",[t._v("binarySearch")]),t._v("(List<T> elements, T key, Comparator<? super T> c)")]),t._v(" "),v("td",[t._v("从有序列表中搜索一个键，如果元素扩展了 AbstractSequentialList 类，则采用线性查找，否则将采用二分查找。这个方法的时间复杂度为 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("O")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("a")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")]),v("mi",[t._v("log")]),v("mo",[t._v("⁡")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(a(n)\\log {n})")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("a")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),v("span",{staticClass:"mop"},[t._v("lo"),v("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathdefault"},[t._v("n")])]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("n")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 是列表的长度，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("a")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("a(n)")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("a")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" 是访问一个元素的平均时间。"),v("br"),t._v("这个方法将返回这个键在列表中的索引，如果在列表中不存在这个键将返回负值 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("i")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("i")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.65952em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("i")])])])])]),t._v("。在这种情况下，应该将这个键插入到列表索引 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mo",[t._v("−")]),v("mi",[t._v("i")]),v("mo",[t._v("−")]),v("mn",[t._v("1")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-i-1")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.74285em","vertical-align":"-0.08333em"}}),v("span",{staticClass:"mord"},[t._v("−")]),v("span",{staticClass:"mord mathdefault"},[t._v("i")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),v("span",{staticClass:"mbin"},[t._v("−")]),v("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),v("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 的位置上，以保持列表的有序性。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static <T extends Comparable<? super T>> T "),v("strong",[t._v("min")]),t._v("(Collection<T> elements)"),v("br"),t._v("static <T extends Comparable<? super T>> T "),v("strong",[t._v("max")]),t._v("(Collection<T> elements)"),v("br"),t._v("static <T> "),v("strong",[t._v("min")]),t._v("(Collection<T> elements, Comparator<? super T> c)"),v("br"),t._v("static <T> "),v("strong",[t._v("max")]),t._v("(Collection<T> elements, Comparator<? super T> c)")]),t._v(" "),v("td",[t._v("返回集合中最小的或最大的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T> void "),v("strong",[t._v("copy")]),t._v("(List<? super T> to, List<T> from)")]),t._v(" "),v("td",[t._v("将原列表中的所有元素复制到目标列表的相应位置上。"),v("br"),t._v("目标列表的长度至少与原列表一样。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T> void "),v("strong",[t._v("fill")]),t._v("(List<? super T> l, T value)")]),t._v(" "),v("td",[t._v("将列表中所有位置设置为相同的值。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T> boolean "),v("strong",[t._v("addAll")]),t._v("(Collection<? super T> c, T... values) 5.0")]),t._v(" "),v("td",[t._v("将所有的值添加到集合中。如果集合改变了，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T> boolean "),v("strong",[t._v("replaceAll")]),t._v("(List<T> l, T oldValue, T newValue) 1.4")]),t._v(" "),v("td",[t._v("用 newValue 取代列表中所有值为 oldValue 的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("indexOfSubList")]),t._v("(List<?> l, List<?> s) 1.4"),v("br"),t._v("static int "),v("strong",[t._v("lastIndexOfSubList")]),t._v("(List<?> l, List<?> s) 1.4")]),t._v(" "),v("td",[t._v("返回 l 中第一个或最后一个等于 s 子列表的索引。如果 l 中不存在等于 s 的子列表，则返回 -1。例如，l 为 [s, t, a, r]，s 为 [t, a, r]，两个方法都将返回索引 1。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("swap")]),t._v("(List<?> l, int i, int j) 1.4")]),t._v(" "),v("td",[t._v("交换给定偏移量的两个元素。")])]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("reverse")]),t._v("(List<?> l)")]),t._v(" "),v("td",[t._v("逆置列表中元素的顺序。这个方法的时间复杂度为 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("O")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("n")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 为列表的长度。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static void "),v("strong",[t._v("rotate")]),t._v("(List<?> l, int d) 1.4")]),t._v(" "),v("td",[t._v("旋转列表中的元素，将索引 i 的条目移动到位置 (i + d) % l.size()。这个方法的时间复杂度为  "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("O")]),v("mo",{attrs:{stretchy:"false"}},[t._v("(")]),v("mi",[t._v("n")]),v("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathdefault"},[t._v("n")]),v("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，"),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",[t._v("n")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(" 为列表的长度。")],1)]),t._v(" "),v("tr",[v("td",[t._v("static int "),v("strong",[t._v("frequency")]),t._v("(Collection<?> c, Object o) 5.0")]),t._v(" "),v("td",[t._v("返回 c 中与对象 o相同的元素个数。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("disjoint")]),t._v("(Collection<?> cl, Collection<?> c2) 5.0")]),t._v(" "),v("td",[t._v("如果两个集合没有共同的元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> Collection "),v("strong",[t._v("unmodifiableCollection")]),t._v("(Collection<E> c)"),v("br"),t._v("static <E> List "),v("strong",[t._v("unmodifiableList")]),t._v("(List<E> C)"),v("br"),t._v("static <E> Set "),v("strong",[t._v("unmodifiableSet")]),t._v("(Set<E>)"),v("br"),t._v("static <E> SortedSet "),v("strong",[t._v("unmodifiableSortedSet")]),t._v("(SortedSet<E> c)"),v("br"),t._v("static <E> SortedSet "),v("strong",[t._v("unmodifiableNavigableSet")]),t._v("(NavigableSet<E> c）8"),v("br"),t._v("static <K, V> Map "),v("strong",[t._v("unmodifiableMap")]),t._v("(Map<K, V>c)"),v("br"),t._v("static <K, V> SortedMap "),v("strong",[t._v("unmodifiableSortedMap")]),t._v("(SortedMap<K, V> c)"),v("br"),t._v("static <K, V>SortedMap "),v("strong",[t._v("unmodifiableNavigableMap")]),t._v("(NavigableMap<K,V> c) 8")]),t._v(" "),v("td",[t._v("构造一个集合视图。视图的更改器方法抛出一个UnsuportedOperatonExcepion。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> Collection<E> "),v("strong",[t._v("synchronizedCollection")]),t._v("(Collection<E> c)"),v("br"),t._v("static <E> List "),v("strong",[t._v("synchronizedList")]),t._v("(List<E> c)"),v("br"),t._v("static <E> Set "),v("strong",[t._v("synchronizedSet")]),t._v("(Set<E> c)"),v("br"),t._v("static <E> SortedSet "),v("strong",[t._v("synchronizedSortedSet")]),t._v("( SortedSet<E> c)"),v("br"),t._v("static <E> NavigableSet "),v("strong",[t._v("synchronizedNavigableSet")]),t._v("(NavigableSet<E> c) 8"),v("br"),t._v("static <K, V> Map<K，V> "),v("strong",[t._v("synchronizedMap")]),t._v("(Map<K, V> c)"),v("br"),t._v("static <K, V> SortedMap<K, V> "),v("strong",[t._v("synchronizedSortedMap")]),t._v("(SortedMap<K, V> c)"),v("br"),t._v("static <K, V> NavigableMap<K,V> "),v("strong",[t._v("synchronizedNavigableMap")]),t._v("(NavigableMap<K,V> c) 8")]),t._v(" "),v("td",[t._v("构造一个集合视图。视图的方法同步。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> Collection "),v("strong",[t._v("checkedCollection")]),t._v("(Collection<E> c,Class<E> elementType)"),v("br"),t._v("static <E> List "),v("strong",[t._v("checkedList")]),t._v("(List<E> c，Class<E> elementType)"),v("br"),t._v("static <E> Set "),v("strong",[t._v("checkedSet")]),t._v("(Set<E> c，Class<E> elementType)"),v("br"),t._v("static <E> SortedSet "),v("strong",[t._v("checkedSortedSet")]),t._v("(SortedSet<E> c，Class<E> elementType)"),v("br"),t._v("static <E> NavigableSet "),v("strong",[t._v("checkedNavigableSet")]),t._v("(NavigableSet<E> c，Class<E> elementType) 8"),v("br"),t._v("static <K, V> Map "),v("strong",[t._v("checkedMap")]),t._v("(Map<K，V> c, Class<K> keyType, Class<V> valueType)"),v("br"),t._v("static <K, V> SortedMap "),v("strong",[t._v("checkedSortedMap")]),t._v("(SortedMap<K，V>c, Class<K> keyType, Class<V> valueType)"),v("br"),t._v("static <K, V> NavigableMap "),v("strong",[t._v("checkedNavigableMap")]),t._v("(NavigableMap<K，V>c，Class<K> keyType, Class<V> valueType) 8"),v("br"),t._v("static <E> Queue<E> "),v("strong",[t._v("checkedQueue")]),t._v("(Queue<E>queue, Class<E> elementType) 8")]),t._v(" "),v("td",[t._v("构造一个集合视图。如果插入一个错误类型的元素，视图的方法抛出一个 ClasCastExcepion。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> List<E> "),v("strong",[t._v("nCopies")]),t._v("(int n, E value)"),v("br"),t._v("static <E> Set<E> "),v("strong",[t._v("singleton")]),t._v("(E value)"),v("br"),t._v("static <E> List<E> "),v("strong",[t._v("singletonList")]),t._v("(E value)"),v("br"),t._v("static <K, V> Map<K, V> "),v("strong",[t._v("singletonMap")]),t._v("(K key, V value)")]),t._v(" "),v("td",[t._v("构造一个对象视图，可以是一个包含 n 个相同元素的不可修改列表，也可以是一个单元素集、列表或映射。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E> List<E> "),v("strong",[t._v("emptyList")]),t._v("()"),v("br"),t._v("static <T> Set<T> "),v("strong",[t._v("emptySet")]),t._v("()"),v("br"),t._v("static <E> SortedSet<E> "),v("strong",[t._v("emptySortedSet")]),t._v("()"),v("br"),t._v("static NavigableSet<E> "),v("strong",[t._v("emptyNavigableSet")]),t._v("()"),v("br"),t._v("static <K,V> Map<K, v> "),v("strong",[t._v("emptyMap")]),t._v("()"),v("br"),t._v("static <K, V>SortedMap<K, V> "),v("strong",[t._v("emptySortedMap")]),t._v("()"),v("br"),t._v("static <K, V> NavigableMap<K, v> "),v("strong",[t._v("emptyNavigableMap")]),t._v("()"),v("br"),t._v("static <T> Enumeration<T> "),v("strong",[t._v("emptyEnumeration")]),t._v("()"),v("br"),t._v("static <T>Iterator<T> "),v("strong",[t._v("emptyIterator")]),t._v("( )"),v("br"),t._v("static <T> ListIterator<T> "),v("strong",[t._v("emptyListIterator")]),t._v("()")]),t._v(" "),v("td",[t._v("生成一个空集合、映射或迭代器。")])])])])]),v("h3",{attrs:{id:"java-util-comparator-t"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-comparator-t"}},[t._v("#")]),t._v(" java.util.Comparator<T>")]),t._v(" "),v("blockquote",[v("p",[t._v("@FunctionalInterface")]),t._v(" "),v("p",[t._v("public interface Comparator<T> { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int "),v("strong",[t._v("compare")]),t._v("(T o1, T o2);")]),t._v(" "),v("td",[t._v("比较两个参数的大小。第一个参数小于、等于或大于第二个参数时，返回负整数、零或正整数。")])]),t._v(" "),v("tr",[v("td",[t._v("default Comparator<T> "),v("strong",[t._v("reversed")]),t._v("() 8")]),t._v(" "),v("td",[t._v("生成一个比较器，将逆置比较器提供的顺序。")])]),t._v(" "),v("tr",[v("td",[t._v("static <T extends Comparable<? super T>> Comparator<T> "),v("strong",[t._v("reverseOrder")]),t._v("() 8")]),t._v(" "),v("td",[t._v("生成一个比较器，将逆置 Comparable 接口提供的顺序。")])])])])]),v("h3",{attrs:{id:"java-util-stringjoiner"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-stringjoiner"}},[t._v("#")]),t._v(" java.util.StringJoiner")]),t._v(" "),v("blockquote",[v("p",[t._v("public final class StringJoiner { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("StringJoiner")]),t._v("(CharSequence delimiter)")]),t._v(" "),v("td",[t._v("构造一个 StringJoiner，其中不包含字符、前缀或后缀，以及所提供分隔符的副本。如果没有向 StringJoiner 添加字符，并且调用了访问其值的方法，则结果中不会返回前缀或后缀（或其属性），除非首先调用了 setEmptyValue。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("StringJoiner")]),t._v("(CharSequence delimiter, CharSequence prefix, CharSequence suffix)")]),t._v(" "),v("td",[t._v("使用提供的前缀、分隔符和后缀的副本构造一个没有字符的 StringJoiner。如果没有向 StringJoiner 添加字符，并且调用了访问其字符串值的方法，则它将在结果中返回前缀+后缀（或其属性），除非首先调用了 setEmptyValue。")])]),t._v(" "),v("tr",[v("td",[t._v("StringJoiner "),v("strong",[t._v("setEmptyValue")]),t._v("(CharSequence emptyValue)")]),t._v(" "),v("td",[t._v("设置确定此 StringJoiner 的字符串表示形式时要使用的字符序列，并且尚未添加任何元素，即当它为空时。为此，制作了 emptyValue 参数的副本。请注意，一旦调用了 add 方法，StringJoiner 就不再被认为是空的，即使添加的元素对应于空字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("toString")]),t._v("()")]),t._v(" "),v("td",[t._v("返回当前值，包括前缀、迄今为止添加的值（由分隔符分隔）和后缀，除非未添加任何元素，否则将返回前缀+后缀或空值字符。")])]),t._v(" "),v("tr",[v("td",[t._v("StringJoiner "),v("strong",[t._v("add")]),t._v("(CharSequence newElement)")]),t._v(" "),v("td",[t._v('添加给定 CharSequence 值的副本作为 StringJoiner 值的下一个元素。如果 newElement 为 null，则添加 "null"。')])]),t._v(" "),v("tr",[v("td",[t._v("StringJoiner "),v("strong",[t._v("merge")]),t._v("(StringJoiner other)")]),t._v(" "),v("td",[t._v("添加不带前缀和后缀的给定 StringJoiner 的内容作为下一个元素（如果该元素非空）。如果给定的StringJoiner 为空，则调用无效。"),v("br"),t._v("如果另一个 StringJoiner 使用不同的分隔符，则来自另一个 StringJoiner 的元素将与该分隔符连接，结果将作为单个元素附加到此 StringJoine。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("length")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此 StringJoiner 的字符串表示形式的长度。请注意，如果没有调用 add 方法，则将返回字符串表示的长度（前缀+后缀或空值）。该值应等于 toString().length()。")])])])])]),v("h2",{attrs:{id:"_10-4-集合类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-集合类库"}},[t._v("#")]),t._v(" 10.4 集合类库")]),t._v(" "),v("h3",{attrs:{id:"java-util-collection-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-collection-e"}},[t._v("#")]),t._v(" java.util.Collection<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Iterator<E> "),v("strong",[t._v("iterator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个用于访问集合中每个元素的迭代器。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("size")]),t._v("()")]),t._v(" "),v("td",[t._v("返回当前存储在集合中的元素个数。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isEmpty")]),t._v("()")]),t._v(" "),v("td",[t._v("如果集合中没有元素，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("contains")]),t._v("(Object obj)")]),t._v(" "),v("td",[t._v("如果集合中包含了一个与 obj 相等的对象，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("containsAll")]),t._v("(Collection<?> other)")]),t._v(" "),v("td",[t._v("如果这个集合包含 other 集合中的所有元素，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("add")]),t._v("(Object element)")]),t._v(" "),v("td",[t._v("将一个元素添加到集合中。如果由于这个调用改变了集合，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("addAll")]),t._v("(Collection<? extends E> other)")]),t._v(" "),v("td",[t._v("将 other 集合中的所有元素添加到这个集合。如果由于这个调用改变了集合，返回true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("remove")]),t._v("(Object obj)")]),t._v(" "),v("td",[t._v("从这个集合中删除等于 obj 的对象。如果有匹配的对象被删除，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("removeAll")]),t._v("(Collection<?> other)")]),t._v(" "),v("td",[t._v("从这个集合中删除 other 集合中存在的所有元素。如果由于这个调用改变了集合，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("default boolean "),v("strong",[t._v("removeIf")]),t._v("(Predicate<? super E> filter) 8")]),t._v(" "),v("td",[t._v("从这个集合删除 filter 返回 true 的所有元素。如果由于这个调用改变了集合，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("clear")]),t._v("()")]),t._v(" "),v("td",[t._v("从这个集合中删除所有的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("retainAll")]),t._v("(Collection<?> other)")]),t._v(" "),v("td",[t._v("从这个集合中删除所有与 other 集合中的元素不同的元素。如果由于这个调用改变了集合，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("Object[] "),v("strong",[t._v("toArray")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这个集合的对象数组。")])]),t._v(" "),v("tr",[v("td",[t._v("<T> T[] "),v("strong",[t._v("toArray")]),t._v("(T[] arrayToFill)")]),t._v(" "),v("td",[t._v("返回这个集合的对象数组。如果 arrayToFill 足够大，就将集合中的元素填入这个数组中。剩余空间填补null；否则，分配一个新数组，其成员类型与 arrayToFill 的成员类型相同，其长度等于集合的大小，并填充集合元素。")])])])])]),v("h3",{attrs:{id:"java-util-iterator-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-iterator-e"}},[t._v("#")]),t._v(" java.util.Iterator<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("hasNext")]),t._v("()")]),t._v(" "),v("td",[t._v("如果存在可访问的元素，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("next")]),t._v("()")]),t._v(" "),v("td",[t._v("返回将要访问的下一个对象。如果已经到达了集合的尾部，将抛出一个 NoSuchElementException。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("remove")]),t._v("()")]),t._v(" "),v("td",[t._v("删除上次访问的对象。这个方法必须紧跟在访问一个元素之后执行。如果上次访问之后，集合已经发生了变化，这个方法将抛出一个 IllegalStateException。")])])])])]),v("h3",{attrs:{id:"java-util-list-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-list-e"}},[t._v("#")]),t._v(" java.util.List<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface List<E> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-collection-e"}},[t._v("Collection<E>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ListIterator<E> "),v("strong",[t._v("listIterator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个列表迭代器，用来访问列表中的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("ListIterator<E> "),v("strong",[t._v("listIterator")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("返回一个列表迭代器，用来访问列表中的元素。第一次调用 next 返回给定索引的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("size")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此列表中的元素数。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isEmpty")]),t._v("()")]),t._v(" "),v("td",[t._v("如果此列表不包含元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("add")]),t._v("(E e)")]),t._v(" "),v("td",[t._v("将指定的元素追加到此列表的末尾。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("add")]),t._v("(int index, E element)")]),t._v(" "),v("td",[t._v("在此列表中的指定位置插入指定元素。将当前位于该位置的元素（如果有）和任何后续元素向右移动。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("addAll")]),t._v("(Collection<? extends E> c)")]),t._v(" "),v("td",[t._v("将指定集合中的所有元素按指定集合的 Iterator 返回的顺序附加到此列表的末尾。如果在操作过程中修改了指定的集合，则此操作的行为未定义。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("addAll")]),t._v("(int index, Collection<? extends E> c)")]),t._v(" "),v("td",[t._v("从指定位置开始，将指定集合中的所有元素插入此列表。将当前位于该位置的元素（如果有）和任何后续元素向右移动（增加其索引）。新元素将按指定集合的迭代器返回的顺序出现在列表中。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("remove")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("删除给定位置的元素并返回这个元素。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("get")]),t._v("(int index)")]),t._v(" "),v("td",[t._v("获取给定位置的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("set")]),t._v("(int index, E element)")]),t._v(" "),v("td",[t._v("使用指定的元素替换此列表中指定位置的元素。返回先前位于指定位置的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("contains")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("如果此列表包含指定的元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("indexOf")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("返回与指定元素相等的元素在列表中第一次出现的位置，如果没有这样的元素将返回 -1。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("lastIndexOf")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("返回与指定元素相等的元素在列表中最后一次出现的位置，如果没有这样的元素将返回 -1。")])]),t._v(" "),v("tr",[v("td",[t._v("List <E> "),v("strong",[t._v("subList")]),t._v("(int firstIncluded, int firstExcluded)")]),t._v(" "),v("td",[t._v("返回给定位置范围内的所有元素的列表视图。")])]),t._v(" "),v("tr",[v("td",[t._v("default void "),v("strong",[t._v("sort")]),t._v("(Comparator<? super T> comparator) 8")]),t._v(" "),v("td",[t._v("使用给定比较器对列表排序。")])]),t._v(" "),v("tr",[v("td",[t._v("default void "),v("strong",[t._v("replaceAll")]),t._v("(UnaryOperator<E> op) 8")]),t._v(" "),v("td",[t._v("对这个列表的所有元素应用这个操作。")])])])])]),v("h3",{attrs:{id:"java-util-listlterator-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-listlterator-e"}},[t._v("#")]),t._v(" java.util.Listlterator<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void "),v("strong",[t._v("add")]),t._v("(E newElement)")]),t._v(" "),v("td",[t._v("在当前位置前添加一个元素。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("set")]),t._v("(E newElement)")]),t._v(" "),v("td",[t._v("用新元素取代 next 或 previous 上次访问的元素。如果在 next 或 previous 上次调用之后列表结构被修改了，将抛出一个 IllegalStateException 异常。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("hasPrevious")]),t._v("()")]),t._v(" "),v("td",[t._v("当反向迭代列表时，还有可供访问的元素，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("previous")]),t._v("()")]),t._v(" "),v("td",[t._v("返回前一个对象。如果已经到达了列表的头部，就抛出一个 NoSuchElementException 异常。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("nextIndex")]),t._v("()")]),t._v(" "),v("td",[t._v("返回下一次调用 next 方法时将返回的元素索引。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("previousIndex")]),t._v("()")]),t._v(" "),v("td",[t._v("返回下一次调用 previous 方法时将返回的元素索引。")])])])])]),v("h3",{attrs:{id:"java-util-arraylist-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-arraylist-e"}},[t._v("#")]),t._v(" java.util.ArrayList<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public class ArrayList<E> "),v("strong",[t._v("extends")]),t._v(" AbstractList<E> "),v("strong",[t._v("implements")]),t._v(" "),v("a",{attrs:{href:"#java-util-list-e"}},[t._v("List<E>")]),t._v(", RandomAccess, Cloneable, java.io.Serializable { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("ArrayList")]),t._v("<E>()")]),t._v(" "),v("td",[t._v("构造初始容量为 10 的空列表。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ArrayList")]),t._v("<E>(int initialCapacity)")]),t._v(" "),v("td",[t._v("构造具有指定初始容量的空列表。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("ensureCapacity")]),t._v("(int capacity)")]),t._v(" "),v("td",[t._v("确保数组列表在不重新分配存储空间的情况下就能够保存给定数量的元素。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("trimToSize")]),t._v("()")]),t._v(" "),v("td",[t._v("将数组列表的存储容量削减到当前尺寸。")])])])])]),v("h3",{attrs:{id:"java-util-linkedlist-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-linkedlist-e"}},[t._v("#")]),t._v(" java.util.LinkedList<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public class LinkedList<E> "),v("strong",[t._v("extends")]),t._v(" AbstractSequentialList<E> "),v("strong",[t._v("implements")]),t._v(" "),v("a",{attrs:{href:"#java-util-list-e"}},[t._v("List<E>")]),t._v(", "),v("a",{attrs:{href:"#java-util-deque-e"}},[t._v("Deque<E>")]),t._v(", Cloneable, java.io.Serializable { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("LinkedList")]),t._v("()")]),t._v(" "),v("td",[t._v("构造一个空链表。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LinkedList")]),t._v("(Collection<? extends E> elements)")]),t._v(" "),v("td",[t._v("构造一个链表，并将集合中所有的元素添加到这个链表中。")])])])])]),v("h3",{attrs:{id:"java-util-queue-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-queue-e"}},[t._v("#")]),t._v(" java.util.Queue<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("add")]),t._v("(E el ement)"),v("br"),t._v("boolean "),v("strong",[t._v("offer")]),t._v("(E element)")]),t._v(" "),v("td",[t._v("如果队列没有满，将给定的元素添加到这个双端队列的尾部并返回 true。如果队列满了，第一个方法将抛出一个 IllegalStateException，而第二个方法返回 false。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("remove")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("poll")]),t._v("()")]),t._v(" "),v("td",[t._v("假如队列不空，删除并返回这个队列头部的元素。如果队列是空的，第一个方法抛出 NoSuchElementException，而第二个方法返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("element")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("peek")]),t._v("()")]),t._v(" "),v("td",[t._v("如果队列不空，返回这个队列头部的元素，但不删除。如果队列空，第一个方法将抛出一个 NoSuchElementException，而第二个方法返回 null。")])])])])]),v("h3",{attrs:{id:"java-util-deque-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-deque-e"}},[t._v("#")]),t._v(" java.util.Deque<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void "),v("strong",[t._v("addFirst")]),t._v("(E element)"),v("br"),t._v("void "),v("strong",[t._v("addLast")]),t._v("(E element)")]),t._v(" "),v("td",[t._v("将给定的对象添加到双端队列的头部或尾部。如果队列满了，抛出一个 IllegalStateException。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("offerFirst")]),t._v("(E element)"),v("br"),t._v("boolean "),v("strong",[t._v("offerLast")]),t._v("(E element)")]),t._v(" "),v("td",[t._v("将给定的对象添加到双端队列的头部或尾部。如果队列满了，返回 false。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("removeFirst")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("removeLast")]),t._v("()")]),t._v(" "),v("td",[t._v("如果队列非空，删除并返回队列头部或尾部的元素。如果队列为空，抛出一个 NoSuchElementException。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("pollFirst")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("pollLast")]),t._v("()")]),t._v(" "),v("td",[t._v("如果队列非空，删除并返回队列头部或尾部的元素。如果队列为空，返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("getFirst")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("getLast")]),t._v("()")]),t._v(" "),v("td",[t._v("如果队列非空，返回队列头部的元素，但不删除。如果队列空，抛出一个  NoSuchElementException。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("peekFirst")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("peekLast")]),t._v("()")]),t._v(" "),v("td",[t._v("如果队列非空，返回队列头部的元素，但不删除。如果队列空，返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("add")]),t._v("(E e)")]),t._v(" "),v("td",[t._v("此方法等效于 addLast。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("offer")]),t._v("(E e)")]),t._v(" "),v("td",[t._v("此方法等效于 offerLast。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("remove")]),t._v("()")]),t._v(" "),v("td",[t._v("此方法等效于removeFirst。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("poll")]),t._v("()")]),t._v(" "),v("td",[t._v("此方法等效于pollFirst。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("element")]),t._v("()")]),t._v(" "),v("td",[t._v("此方法等效于getFirst。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("peek")]),t._v("()")]),t._v(" "),v("td",[t._v("此方法等效于peekFirst。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("push")]),t._v("(E e)  "),v("el-tag",{attrs:{effect:"plain",size:"mini"}},[t._v("栈方法")])],1),t._v(" "),v("td",[t._v("向 deque 表示的堆（stack）中压入一个元素。即将给定的元素插入此 deque  的头部。"),v("br"),t._v("此方法等效于addFirst。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("pop")]),t._v("() "),v("el-tag",{attrs:{effect:"plain",size:"mini"}},[t._v("栈方法")])],1),t._v(" "),v("td",[t._v("从 deque 表示的堆（stack）中弹出一个元素。即删除并返回此 deque 的第一个元素。"),v("br"),t._v("此方法等效于removeFirst。")])])])])]),v("h3",{attrs:{id:"java-util-arraydeque-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-arraydeque-e"}},[t._v("#")]),t._v(" java.util.ArrayDeque<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("ArrayDeque")]),t._v("()"),v("br"),v("strong",[t._v("ArrayDeque")]),t._v("(int initialCapacity)")]),t._v(" "),v("td",[t._v("用初始容量 16 或给定的初始容量构造一个无限双端队列。")])])])])]),v("h3",{attrs:{id:"java-util-priorityqueue-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-priorityqueue-e"}},[t._v("#")]),t._v(" java.util.PriorityQueue<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("PriorityQueue")]),t._v("()"),v("br"),v("strong",[t._v("PriorityQueue")]),t._v("(int initialCapacity)")]),t._v(" "),v("td",[t._v("构造一个用于存放 Comparable 对象的优先级队列。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("PriorityQueue")]),t._v("(int initialCapacity, Comparator<? super E> c)")]),t._v(" "),v("td",[t._v("构造一个指定初始容量的优先级队列，且其元素根据指定的比较器排序。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("PriorityQueue")]),t._v("(Comparator<? super E> comparator)")]),t._v(" "),v("td",[t._v("构造一个初始容量默认的优先级队列，且其元素根据指定的比较器排序。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("remove")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("从队列中删除指定元素的单个实例。更正式地说，如果该队列包含一个或多个这样的元素 e，使得 o.equals(e)，则删除元素 e。当且仅当队列包含指定元素时（或等效地，如果此队列因调用而更改），返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("contains")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("如果此队列包含指定的元素，则返回 true。更正式地说，当且仅当该队列包含至少一个元素 e，使得o.equals(e) 时，返回 true。")])])])])]),v("h3",{attrs:{id:"java-util-map-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-map-k-v"}},[t._v("#")]),t._v(" java.util.Map<K, V>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface Map<K,V> { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("V "),v("strong",[t._v("get")]),t._v("(Object key)")]),t._v(" "),v("td",[t._v("获取与键对应的值；返回与键对应的对象，如果在映射中没有这个对象则返回 null。键可以为 null。")])]),t._v(" "),v("tr",[v("td",[t._v("default V "),v("strong",[t._v("getOrDefault")]),t._v("(Object key, V defaultValue)")]),t._v(" "),v("td",[t._v("获得与键关联的值；返回与键关联的对象，或者如果未在映射中找到这个键，则返回 defaultValue。")])]),t._v(" "),v("tr",[v("td",[t._v("V "),v("strong",[t._v("put")]),t._v("(K key, V value)")]),t._v(" "),v("td",[t._v("将键与对应的值关系插入到映射中。如果这个键已经存在，新的对象将取代与这个键对应的旧对象。这个方法将返回键对应的旧值。如果这个键以前没有出现过则返回 null。键可以为 null，但值不能为 null。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("putAll")]),t._v("(Map<? extends K, ? extends V> entries)")]),t._v(" "),v("td",[t._v("将给定映射中的所有条目添加到这个映射中。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("containsKey")]),t._v("(Object key)")]),t._v(" "),v("td",[t._v("如果在映射中已经有这个键，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("containsValue")]),t._v("(Object value)")]),t._v(" "),v("td",[t._v("如果映射中已经有这个值，返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("Set<Map. Entry<K, V>> "),v("strong",[t._v("entrySet")]),t._v("()")]),t._v(" "),v("td",[t._v("返回 Map.Entry 对象（映射中的键/值对）的一个集视图。可以从这个集中删除元素，它们将从映射中删除，但是不能增加任何元素。")])]),t._v(" "),v("tr",[v("td",[t._v("Set<K> "),v("strong",[t._v("keySet")]),t._v("()")]),t._v(" "),v("td",[t._v("返回映射中所有键的一个集视图。可以从这个集中删除元素，键和相关联的值将从映射中删除，但是不能增加任何元素。")])]),t._v(" "),v("tr",[v("td",[t._v("Collection<V> "),v("strong",[t._v("values")]),t._v("()")]),t._v(" "),v("td",[t._v("返回映射中所有值的一个集合视图。可以从这个集合中删除元素，所删除的值及相应的键将从映射中删除，不过不能增加任何元素。")])]),t._v(" "),v("tr",[v("td",[t._v("default void "),v("strong",[t._v("forEach")]),t._v("(BiConsumer<? super K, ? super V> action) 8")]),t._v(" "),v("td",[t._v("对这个映射中的所有键/值对应用这个动作。")])]),t._v(" "),v("tr",[v("td",[t._v("default V "),v("strong",[t._v("merge")]),t._v("(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) 8")]),t._v(" "),v("td",[t._v("如果 key 与一个非 null 值 v 关联，将函数应用到 v 和 value，将 key 与结果关联，或者如果结果为 null，则删除这个键。否则，将 key 与 value 关联，返回 get(key)。")])]),t._v(" "),v("tr",[v("td",[t._v("default V "),v("strong",[t._v("compute")]),t._v("(K key, BiFunction<? super K, ? super V, ? extends V>remappingFunction) 8")]),t._v(" "),v("td",[t._v("将函数应用到 key 和  get(key)。将 key 与结果关联，或者如果结果为 null，则删除这个键。返回 get(key)。")])]),t._v(" "),v("tr",[v("td",[t._v("default V "),v("strong",[t._v("computeIfPresent")]),t._v("(K key, BiFunction<? super K, ? super V, ? extends  V> remappingFunction) 8")]),t._v(" "),v("td",[t._v("如果 key 与一个非 null 值 v 关联，将函数应用到 key 和 v，将 key 与结果关联，或者如果结果为 null，则删除这个键。返回 get(key)。")])]),t._v(" "),v("tr",[v("td",[t._v("default V "),v("strong",[t._v("computeIfAbsent")]),t._v("(K key, Function<? super K, ? extends V> mappingFunction) 8")]),t._v(" "),v("td",[t._v("将函数应用到 key，除非 key 与一个非 null 值关联。将 key 与结果关联，或者如果结果为 null，则删除这个键。返回 get(key)。")])]),t._v(" "),v("tr",[v("td",[t._v("default void "),v("strong",[t._v("replaceAll")]),t._v("(BiFunction<? super K, ? super V, ? extends V> function) 8")]),t._v(" "),v("td",[t._v("在所有映射项上应用函数。将键与非 null 结果关联，对于 null 结果，则将相应的键删除。")])])])])]),v("h3",{attrs:{id:"java-util-map-entry-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-map-entry-k-v"}},[t._v("#")]),t._v(" java.util.Map.Entry<K, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("K "),v("strong",[t._v("getKey")]),t._v("()"),v("br"),t._v("V "),v("strong",[t._v("getValue")]),t._v("()")]),t._v(" "),v("td",[t._v("返回这一条目的键或值。")])]),t._v(" "),v("tr",[v("td",[t._v("V "),v("strong",[t._v("setValue")]),t._v("(V newValue)")]),t._v(" "),v("td",[t._v("将相关映射中的值改为新值，并返回原来的值。")])])])])]),v("h3",{attrs:{id:"java-util-hashmap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-hashmap-k-v"}},[t._v("#")]),t._v(" java.util.HashMap<K, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("HashMap")]),t._v("()"),v("br"),v("strong",[t._v("HashMap")]),t._v("(int initialCapacity)"),v("br"),v("strong",[t._v("HashMap")]),t._v("(int initialCapacity, float loadFactor)")]),t._v(" "),v("td",[t._v("用给定的容量和装填因子构造一个空散列映射。装填因子是一个 0.0~1.0 之间的数值。这个数值决定散列表填充的百分比。一旦到了这个比例，就要将其再散列到更大的表中。默认的装填因子是 0.75。")])])])])]),v("h3",{attrs:{id:"java-util-linkedhashmap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-linkedhashmap-k-v"}},[t._v("#")]),t._v(" java.util.LinkedHashMap<K, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("LinkedHashMap")]),t._v("()"),v("br"),v("strong",[t._v("LinkedHashMap")]),t._v("(int initialCapacity)"),v("br"),v("strong",[t._v("LinkedHashMap")]),t._v("(int initialCapacity, float loadFactor)"),v("br"),v("strong",[t._v("LinkedHashMap")]),t._v("(int initialCapacity, float loadFactor, boolean accessOrder)")]),t._v(" "),v("td",[t._v("构造一个给定的容量、填充因子和顺序的空链接散列映射表。accessOrder 参数为 true 时表示访问顺序，为 false 时表示插人顺序。")])]),t._v(" "),v("tr",[v("td",[t._v("protected boolean "),v("strong",[t._v("removeEldestEntry")]),t._v("(Map.Entry<K, V> eldest)")]),t._v(" "),v("td",[t._v("如果想删除 eldest 元素，并同时返回 true，就应该覆盖这个方法。eldest 参数是预期要删除的条目。这个方法将在条目添加到映射中之后调用。其默认的实现将返回 false。即在默认情况下，旧元素没有被删除。然而，可以重新定义这个方法，以便有选择地返回 true。例如，如果最旧的条目符合一个条件，或者映射超过了一定大小，则返回 true。")])])])])]),v("h3",{attrs:{id:"java-util-weakhashmap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-weakhashmap-k-v"}},[t._v("#")]),t._v(" java.util.WeakHashMap<K, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("WeakHashMap")]),t._v("()"),v("br"),v("strong",[t._v("WeakHashMap")]),t._v("(int initialCapacity)"),v("br"),v("strong",[t._v("WeakHashMap")]),t._v("(int initialCapacity, float loadFactor)")]),t._v(" "),v("td",[t._v("用给定的容量和填充因子构造一个空的弱散列映射表。")])])])])]),v("h3",{attrs:{id:"java-util-identityhashmap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-identityhashmap-k-v"}},[t._v("#")]),t._v(" java.util.IdentityHashMap<K, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("IdentityHashMap")]),t._v("()"),v("br"),v("strong",[t._v("IdentityHashMap")]),t._v("(int expectedMaxSize)")]),t._v(" "),v("td",[t._v("构造一个空的标识散列映射集，其容量是大于 1.5 * expectedMaxSize 的 2 的最小次幂（expectedMaxSize 的默认值是 21）。")])])])])]),v("h3",{attrs:{id:"java-util-sortedmap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-sortedmap-k-v"}},[t._v("#")]),t._v(" java.util.SortedMap<K, V>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface SortedMap<K,V> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-map-k-v"}},[t._v("Map<K,V>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Comparator<? super K> "),v("strong",[t._v("comparator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回对键进行排序的比较器。如果键是用 Comparable 接口的 compareTo 方法进行比较的，返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("K "),v("strong",[t._v("firstKey")]),t._v("()"),v("br"),t._v("K "),v("strong",[t._v("lastKey")]),t._v("()")]),t._v(" "),v("td",[t._v("返回映射中最小键和最大键。")])]),t._v(" "),v("tr",[v("td",[t._v("SortedMap <K, V> "),v("strong",[t._v("subMap")]),t._v("(K firstIncluded, K firstExclud)"),v("br"),t._v("SortedMap <K, V> "),v("strong",[t._v("headMap")]),t._v("(K firstExcluded)"),v("br"),t._v("SortedMap <K, V> "),v("strong",[t._v("tailMap")]),t._v("(K firstIncluded)")]),t._v(" "),v("td",[t._v("返回在给定范围内的键条目的映射视图。")])])])])]),v("h3",{attrs:{id:"java-util-navigablemap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-navigablemap-k-v"}},[t._v("#")]),t._v(" java.util.NavigableMap<K, V>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface NavigableMap<K,V> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-sortedmap-k-v"}},[t._v("SortedMap<K,V>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Map.Entry<K,V> "),v("strong",[t._v("lowerEntry")]),t._v("(K key)"),v("br"),t._v("Map.Entry<K,V> "),v("strong",[t._v("higherEntry")]),t._v("(K key)")]),t._v(" "),v("td",[t._v("返回与严格小于给定键的最大键或严格大于给定键的最小键关联的键值映射，如果没有这样的键，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("K "),v("strong",[t._v("lowerKey")]),t._v("(K key)"),v("br"),t._v("K "),v("strong",[t._v("higherKey")]),t._v("(K key)")]),t._v(" "),v("td",[t._v("返回严格小于给定键的最大键或严格大于给定键的最小键，如果没有这样的键，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("Map.Entry<K,V> "),v("strong",[t._v("floorEntry")]),t._v("(K key)"),v("br"),t._v("Map.Entry<K,V> "),v("strong",[t._v("ceilingEntry")]),t._v("(K key)")]),t._v(" "),v("td",[t._v("返回与小于等于给定键的最大键或大于等于给定键的最小键关联的键值映射，如果没有这样的键，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("K "),v("strong",[t._v("floorKey")]),t._v("(K key)"),v("br"),t._v("K "),v("strong",[t._v("ceilingKey")]),t._v("(K key)")]),t._v(" "),v("td",[t._v("返回小于等于给定键的最大键或大于等于给定键的最小键，如果没有这样的键，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("Map.Entry<K,V> "),v("strong",[t._v("firstEntry")]),t._v("()"),v("br"),t._v("Map.Entry<K,V> "),v("strong",[t._v("lastEntry")]),t._v("()")]),t._v(" "),v("td",[t._v("返回与此映射中最小键或最大键关联的键值映射，如果映射为空，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("Map.Entry<K,V> "),v("strong",[t._v("pollFirstEntry")]),t._v("()"),v("br"),t._v("Map.Entry<K,V> "),v("strong",[t._v("pollLastEntry")]),t._v("()")]),t._v(" "),v("td",[t._v("移除并返回与此映射中最小键或最大键关联的键值映射，如果映射为空，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("NavigableMap <K, V> "),v("strong",[t._v("subMap")]),t._v("(K from, boolean fromIncluded, K to, boolean toIncluded)"),v("br"),t._v("NavigableMap <K, V> "),v("strong",[t._v("headMap")]),t._v("(K from, boolean fromIncluded)"),v("br"),t._v("NavigableMap <K, V>  "),v("strong",[t._v("tailMap")]),t._v("(K to, boolean toIncluded)")]),t._v(" "),v("td",[t._v("返回在给定范围内的键条目的映射视图。boolean 标志决定视图是否包含边界。")])])])])]),v("h3",{attrs:{id:"java-util-treemap-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-treemap-k-v"}},[t._v("#")]),t._v(" java.util.TreeMap<K,V>")]),t._v(" "),v("blockquote",[v("p",[t._v("public class TreeMap<K,V> "),v("strong",[t._v("extends")]),t._v(" AbstractMap<K,V> "),v("strong",[t._v("implements")]),t._v(" "),v("a",{attrs:{href:"#java-util-navigablemap-k-v"}},[t._v("NavigableMap<K,V>")]),t._v(", Cloneable, java.io.Serializable { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("TreeMap")]),t._v("()")]),t._v(" "),v("td",[t._v("为实现了 Comparable 接口的键构造一个空的树映射。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("TreeMap")]),t._v("(Comparator<? super K> c)")]),t._v(" "),v("td",[t._v("构造一个树映射，并使用一个指定的比较器对键进行排序。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("TreeMap")]),t._v("(Map<? extends K, ? extends V> entries)")]),t._v(" "),v("td",[t._v("构造一个树映射，并将某个映射中的所有条目添加到树映射中。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("TreeMap")]),t._v("(SortedMap<? extends K, ? extends V> entries)")]),t._v(" "),v("td",[t._v("构造一个树映射，将某个有序映射中的所有条目添加到树映射中，并使用与给定的有序映射相同的比较器。")])])])])]),v("h3",{attrs:{id:"java-util-enummap-k-extends-enum-k-v"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-enummap-k-extends-enum-k-v"}},[t._v("#")]),t._v(" java.util.EnumMap<K extends Enum<K>, V>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("EnumMap")]),t._v("(Class<K> keyType)")]),t._v(" "),v("td",[t._v("构造一个键为给定类型的空映射。")])])])])]),v("h3",{attrs:{id:"java-util-set-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-set-e"}},[t._v("#")]),t._v(" java.util.Set<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface Set<E> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-collection-e"}},[t._v("Collection<E>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int "),v("strong",[t._v("size")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此集合中的元素数。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isEmpty")]),t._v("()")]),t._v(" "),v("td",[t._v("如果此集合不包含元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("contains")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("如果此集合包含指定的元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("Iterator<E> "),v("strong",[t._v("iterator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此集合中元素的迭代器。元素不按特定顺序返回（除非该集合是提供保证的某个类的实例）。")])]),t._v(" "),v("tr",[v("td",[t._v("Object[] "),v("strong",[t._v("toArray")]),t._v("()")]),t._v(" "),v("td",[t._v("返回包含此集合中所有元素的数组。如果该集合对迭代器返回元素的顺序做出任何保证，则该方法必须以相同的顺序返回元素。"),v("br"),t._v("返回的数组将是“安全的”，因为该集合不维护对它的引用。（换句话说，即使此集合由数组支持，此方法也必须分配新数组）。因此，调用者可以自由修改返回的数组。")])]),t._v(" "),v("tr",[v("td",[t._v("<T> T[] "),v("strong",[t._v("toArray")]),t._v("(T[] a)")]),t._v(" "),v("td",[t._v("返回包含此集合中所有元素的数组。返回数组的运行时类型是指定数组的运行时类型。如果集合适合指定的数组，则返回其中。否则，将使用指定数组的运行时类型和该集的大小分配新数组。"),v("br"),t._v("如果此集合适合具有空闲空间的指定数组（即，数组中的元素多于此集合），则紧随该集合末尾的数组中元素将设置为 null。"),v("br"),t._v("如果该集合对迭代器返回元素的顺序做出任何保证，则该方法必须以相同的顺序返回元素。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("add")]),t._v("(E e)")]),t._v(" "),v("td",[t._v("如果指定元素尚未存在，则将其添加到此集合中。如果该集合已经包含该元素，则调用将保持该集合不变，并返回false。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("remove")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("从该集合中删除指定的元素（如果存在）。如果此集合包含元素，则返回 true（或者等效地，如果此集合因调用而更改）。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("containsAll")]),t._v("(Collection<?> c)")]),t._v(" "),v("td",[t._v("如果此集合包含指定集合的所有元素，则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("addAll")]),t._v("(Collection<? extends E> c)")]),t._v(" "),v("td",[t._v("如果指定集合中的所有元素尚未存在，则将它们添加到此集合中。如果指定的集合也是一个集合，此操作将有效地修改该集合，使其值为两个集合的并集。如果在操作进行过程中修改了指定的集合，则此操作的行为未定义。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("retainAll")]),t._v("(Collection<?> c)")]),t._v(" "),v("td",[t._v("仅保留此集合中包含在指定集合中的元素。换句话说，从该集合中删除指定集合中不包含的所有元素。如果指定的集合也是一个集合，则此操作将有效修改该集合，使其值为两个集合的交集。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("removeAll")]),t._v("(Collection<?> c)")]),t._v(" "),v("td",[t._v("从该集合中删除指定集合中包含的所有元素。如果指定的集合也是一个集合，则此操作有效地修改该集合，使其值为两个集合的非对称集合差。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("clear")]),t._v("()")]),t._v(" "),v("td",[t._v("从此集合中删除所有元素。此调用返回后，集合将为空。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("equals")]),t._v("(Object o)")]),t._v(" "),v("td",[t._v("将指定对象与此集合进行相等性比较。如果指定的对象也是一个集合，两个集合具有相同的大小，并且指定集合的每个成员都包含在该集合中（或者等效地，该集合的所有成员都包含在此指定集合中），则返回 true。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("hashCode")]),t._v("()")]),t._v(" "),v("td",[t._v("返回此集合的 hashCode。集合的 hashCode 定义为集合中元素的 hashCode 之和，其中空元素的 hashCode 定义为零。")])])])])]),v("h3",{attrs:{id:"java-util-hashset-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-hashset-e"}},[t._v("#")]),t._v(" java.util.HashSet<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("HashSet")]),t._v("()")]),t._v(" "),v("td",[t._v("构造一个空散列表。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HashSet")]),t._v("(Collection<? extends E> elements)")]),t._v(" "),v("td",[t._v("构造一个散列集，并将集合中的所有元素添加到这个散列集中。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HashSet")]),t._v("(int initialCapacity)")]),t._v(" "),v("td",[t._v("构造一个空的具有指定容量（桶数）的散列集。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HashSet")]),t._v("(int initialCapacity, float loadFactor)")]),t._v(" "),v("td",[t._v("构造一个具有指定容量和装填因子的空散列集。装填因子是一个 0.0 ~ 1.0 之间的数值，确定散列表填充的百分比，当大于这个百分比时，散列表进行再散列。")])])])])]),v("h3",{attrs:{id:"java-util-linkedhashset-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-linkedhashset-e"}},[t._v("#")]),t._v(" java.util.LinkedHashSet<E>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("LinkedHashSet")]),t._v("()"),v("br"),v("strong",[t._v("LinkedHashSet")]),t._v("(int initialCapacity)"),v("br"),v("strong",[t._v("LinkedHashSet")]),t._v("(int initialCapacity, float loadFactor)")]),t._v(" "),v("td",[t._v("构造一个给定的容量和填充因子的空链接散列集。")])])])])]),v("h3",{attrs:{id:"java-util-sortedset-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-sortedset-e"}},[t._v("#")]),t._v(" java.util.SortedSet<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface SortedSet<E> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-set-e"}},[t._v("Set<E>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Comparator<? super E> "),v("strong",[t._v("comparator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回用于对元素进行排序的比较器。如果元素用 Comparable 接口的 compareTo 方法进行比较则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("first")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("last")]),t._v("()")]),t._v(" "),v("td",[t._v("返回有序集中的最小元素或最大元素。")])]),t._v(" "),v("tr",[v("td",[t._v("SortedSet<E> "),v("strong",[t._v("subSet")]),t._v("(E firstIncluded，E firstExcluded)"),v("br"),t._v("SortedSet<E> "),v("strong",[t._v("headSet")]),t._v("(E firstExcluded)"),v("br"),t._v("SortedSet<E> "),v("strong",[t._v("tailSet")]),t._v("(E firstIncluded)")]),t._v(" "),v("td",[t._v("返回给定范围内的元素视图。")])])])])]),v("h3",{attrs:{id:"java-util-navigableset-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-navigableset-e"}},[t._v("#")]),t._v(" java.util.NavigableSet<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public interface NavigableSet<E> "),v("strong",[t._v("extends")]),t._v(" "),v("a",{attrs:{href:"#java-util-sortedset-e"}},[t._v("SortedSet<E>")]),t._v(" { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("E "),v("strong",[t._v("lower")]),t._v("(E value)"),v("br"),t._v("E "),v("strong",[t._v("higher")]),t._v("(E value)")]),t._v(" "),v("td",[t._v("返回小于 value 的最大元素或大于 value 的最小元素，如果没有这样的元素则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("floor")]),t._v("(E value)"),v("br"),t._v("E "),v("strong",[t._v("ceiling")]),t._v("(E value)")]),t._v(" "),v("td",[t._v("返回小于等于 value 的最大元素或大于等于 value 的最小元素，如果没有这样的元素则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("E "),v("strong",[t._v("pollFirst")]),t._v("()"),v("br"),t._v("E "),v("strong",[t._v("pollLast")]),t._v("()")]),t._v(" "),v("td",[t._v("删除并返回这个集中的最大元素或最小元素，这个集为空时返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("Iterator<E> "),v("strong",[t._v("descendingIterator")]),t._v("()")]),t._v(" "),v("td",[t._v("返回一个按照递减顺序遍历集中元素的迭代器。")])]),t._v(" "),v("tr",[v("td",[t._v("NavigableSet<E> "),v("strong",[t._v("subSet")]),t._v("(E from, boolean fromIncluded, E to, boolean toIncluded)"),v("br"),t._v("NavigableSet<E> "),v("strong",[t._v("headSet")]),t._v("(E to, boolean toIncluded)"),v("br"),t._v("NavigableSet<E> "),v("strong",[t._v("tailSet")]),t._v("(E from, boolean fromIncluded)")]),t._v(" "),v("td",[t._v("返回给定范围内的元素视图。boolean 标志决定视图是否包含边界。")])])])])]),v("h3",{attrs:{id:"java-util-treeset-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-treeset-e"}},[t._v("#")]),t._v(" java.util.TreeSet<E>")]),t._v(" "),v("blockquote",[v("p",[t._v("public class TreeSet<E> "),v("strong",[t._v("extends")]),t._v(" AbstractSet<E>  "),v("strong",[t._v("implements")]),t._v(" "),v("a",{attrs:{href:"#java-util-navigableset-e"}},[t._v("NavigableSet<E>")]),t._v(", Cloneable, java.io.Serializable { ... }")])]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("TreeSet")]),t._v("()"),v("br"),v("strong",[t._v("TreeSet")]),t._v("(Comparator<? super E> comparator)")]),t._v(" "),v("td",[t._v("构造一个空树集。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("TreeSet")]),t._v("(Collection<? extends E> elements)"),v("br"),v("strong",[t._v("TreeSet")]),t._v("(SortedSet<E> s)")]),t._v(" "),v("td",[t._v("构造一个树集，并增加一个集合或有序集中的所有元素。")])]),t._v(" "),v("tr",[v("td",[t._v("Iterator<E> "),v("strong",[t._v("iterator")]),t._v("()")]),t._v(" "),v("td",[t._v("按升序返回此集合中元素的迭代器。")])]),t._v(" "),v("tr",[v("td",[t._v("Iterator<E> "),v("strong",[t._v("descendingIterator")]),t._v("()")]),t._v(" "),v("td",[t._v("按降序返回此集合中元素的迭代器。")])])])])]),v("h3",{attrs:{id:"java-util-enumset-e-extends-enum-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-enumset-e-extends-enum-e"}},[t._v("#")]),t._v(" java.util.EnumSet<E extends Enum<E>>")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static <E extends Enum<E>> EnumSet<E> "),v("strong",[t._v("allOf")]),t._v("(Class<E> enumType)")]),t._v(" "),v("td",[t._v("返回一个包含给定枚举类型的所有值的集。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E extends Enum<E>> EnumSet<E> "),v("strong",[t._v("noneOf")]),t._v("(Class<E> enumType)")]),t._v(" "),v("td",[t._v("返回一个空集，并有足够的空间保存给定的枚举类型所有的值。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E extends Enum<E>> EnumSet<E> "),v("strong",[t._v("range")]),t._v("(E from, E to)")]),t._v(" "),v("td",[t._v("返回一个包含 from ~ to 之间的所有值（包括两个边界元素）的集。")])]),t._v(" "),v("tr",[v("td",[t._v("static <E extends Enum<E>> EnumSet<E> of(E value)"),v("br"),t._v("static <E extends Enum<E>> EnumSet<E> of(E value, E... values)")]),t._v(" "),v("td",[t._v("返回包括给定值的集。")])])])])]),v("h2",{attrs:{id:"_10-5-数学类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-数学类库"}},[t._v("#")]),t._v(" 10.5 数学类库")]),t._v(" "),v("h3",{attrs:{id:"java-math-biglnteger"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-math-biglnteger"}},[t._v("#")]),t._v(" java.math.Biglnteger")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Biginteger "),v("strong",[t._v("add")]),t._v("(Biginteger other) "),v("br"),t._v("Biginteger "),v("strong",[t._v("subtract")]),t._v("(Biginteger other)"),v("br"),t._v("Biglnteger "),v("strong",[t._v("multiply")]),t._v("(Biglnteger other)"),v("br"),t._v("Biglnteger "),v("strong",[t._v("divide")]),t._v("(Biglnteger other)"),v("br"),t._v("Biglnteger "),v("strong",[t._v("mod")]),t._v("(Biglnteger other)")]),t._v(" "),v("td",[t._v("返回这个大整数和另一个大整数 other 的和、差、积 、商以及余数。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(Biginteger other)")]),t._v(" "),v("td",[t._v("如果这个大整数与另一个大整数 other 相等，返回 0；如果这个大整数小于另一个大整数 other，返回负数 ； 否则 ，返回正数。")])]),t._v(" "),v("tr",[v("td",[t._v("static Biglnteger "),v("strong",[t._v("valueOf")]),t._v("(long x)")]),t._v(" "),v("td",[t._v("返回值等于 x 的大整数。")])])])])]),v("h3",{attrs:{id:"java-math-bigdecimal-1-1-api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-math-bigdecimal-1-1-api"}},[t._v("#")]),t._v(" java.math.BigDecimal 1.1 API")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("BigDecimal "),v("strong",[t._v("add")]),t._v("(BigDecimal other)"),v("br"),t._v("BigDecimal "),v("strong",[t._v("subtract")]),t._v("(BigDecimal other)"),v("br"),t._v("BigDecimal "),v("strong",[t._v("multiply")]),t._v("(BigDecimal other)"),v("br"),t._v("BigDecimal "),v("strong",[t._v("divide")]),t._v("(BigDecimal other, RoundingMode mode)")]),t._v(" "),v("td",[t._v("返回这个大实数与另一个大实数 other 的和、差、积、商。"),v("br"),t._v("要计算商（divide），必须给出舍入方式（rounding mode）。RoundingMode.HALF_UP 是四舍五入。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("compareTo")]),t._v("(BigDecimal other)")]),t._v(" "),v("td",[t._v("如果这个大实数与另一个大实数相等，返回0；如果这个大实数小于另一个大实数，返回负数；否则，返回正数。")])]),t._v(" "),v("tr",[v("td",[t._v("static BigDecimal "),v("strong",[t._v("valueOf")]),t._v("(long x)"),v("br"),t._v("static BigDecimal "),v("strong",[t._v("valueOf")]),t._v("(long x , int scale)")]),t._v(" "),v("td",[t._v("返回值为 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",{attrs:{mathvariant:"normal"}},[t._v("x")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rm x")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathrm"},[t._v("x")])])])])])]),t._v(" 或 "),v("eq",[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[v("semantics",[v("mrow",[v("mi",{attrs:{mathvariant:"normal"}},[t._v("x")]),v("mi",{attrs:{mathvariant:"normal"}},[t._v("/")]),v("mn",[t._v("1")]),v("msup",[v("mn",[t._v("0")]),v("mrow",[v("mi",{attrs:{mathvariant:"normal"}},[t._v("s")]),v("mi",{attrs:{mathvariant:"normal"}},[t._v("c")]),v("mi",{attrs:{mathvariant:"normal"}},[t._v("a")]),v("mi",{attrs:{mathvariant:"normal"}},[t._v("l")]),v("mi",{attrs:{mathvariant:"normal"}},[t._v("e")])],1)],1)],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rm{x/10^{scale}}")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"base"},[v("span",{staticClass:"strut",staticStyle:{height:"1.099108em","vertical-align":"-0.25em"}}),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathrm"},[t._v("x")]),v("span",{staticClass:"mord mathrm"},[t._v("/")]),v("span",{staticClass:"mord mathrm"},[t._v("1")]),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathrm"},[t._v("0")]),v("span",{staticClass:"msupsub"},[v("span",{staticClass:"vlist-t"},[v("span",{staticClass:"vlist-r"},[v("span",{staticClass:"vlist",staticStyle:{height:"0.849108em"}},[v("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[v("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),v("span",{staticClass:"sizing reset-size6 size3 mtight"},[v("span",{staticClass:"mord mtight"},[v("span",{staticClass:"mord mathrm mtight"},[t._v("s")]),v("span",{staticClass:"mord mathrm mtight"},[t._v("c")]),v("span",{staticClass:"mord mathrm mtight"},[t._v("a")]),v("span",{staticClass:"mord mathrm mtight"},[t._v("l")]),v("span",{staticClass:"mord mathrm mtight"},[t._v("e")])])])])])])])])])])])])])])]),t._v(" 的一个大实数。")],1)])])])]),v("h2",{attrs:{id:"_10-6-日志类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-6-日志类库"}},[t._v("#")]),t._v(" 10.6 日志类库")]),t._v(" "),v("h3",{attrs:{id:"java-util-logging-logger"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-logger"}},[t._v("#")]),t._v(" java.util.logging.Logger")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static Logger "),v("strong",[t._v("getlogger")]),t._v("(String loggerName)"),v("br"),t._v("static Logger "),v("strong",[t._v("getlogger")]),t._v("(String loggerName , String bundleName)")]),t._v(" "),v("td",[t._v("获得给定名字的日志记录器。如果这个日志记录器不存在，创建一个日志记录器。"),v("br"),t._v("loggerName 是具有层次结构的日志记录器名。例如，com.mycompany.myapp。"),v("br"),t._v("bundleName 是用来查看本地消息的资源包名。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("severe")]),t._v("(String message)"),v("br"),t._v("void "),v("strong",[t._v("warning")]),t._v("(String message)"),v("br"),t._v("void "),v("strong",[t._v("info")]),t._v("(String message)"),v("br"),t._v("void "),v("strong",[t._v("config")]),t._v("(String  message)"),v("br"),t._v("void "),v("strong",[t._v("fine")]),t._v("(String  message)"),v("br"),t._v("void "),v("strong",[t._v("finer")]),t._v("(String  message)"),v("br"),t._v("void "),v("strong",[t._v("finest")]),t._v("(String message)")]),t._v(" "),v("td",[t._v("记录一个由方法名和给定消息指示级别的日志。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("entering")]),t._v("(String className , String methodName)"),v("br"),t._v("void "),v("strong",[t._v("entering")]),t._v("(String className , String methodName, Object param)"),v("br"),t._v("void "),v("strong",[t._v("entering")]),t._v("(String className , String methodName, Object[] param)")]),t._v(" "),v("td",[t._v("记录一个描述进入方法的日志记录。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("exiting")]),t._v("(String className , String methodName)"),v("br"),t._v("void "),v("strong",[t._v("exiting")]),t._v("(String className , String methodName, Object result)")]),t._v(" "),v("td",[t._v("记录一个描述退出方法的日志记录。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("throwing")]),t._v("(String className, String methodName, Throwable t)")]),t._v(" "),v("td",[t._v("记录一个描述抛出给定异常对象的日志记录。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("log")]),t._v("( Level level, String message)"),v("br"),t._v("void "),v("strong",[t._v("log")]),t._v("(Leve l level, String message, Object obj)"),v("br"),t._v("void "),v("strong",[t._v("log")]),t._v("(Level level, String message, Object[] objs)"),v("br"),t._v("void "),v("strong",[t._v("log")]),t._v("(Level level, String message, Throwable t)")]),t._v(" "),v("td",[t._v("记录一个给定级别和消息的日志记录，其中可以包括对象或者可抛出对象。要想包括对象，消息中必须包含格式化占位符 {0}、{1} 等。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("logp")]),t._v("(Leve level, String className, String methodName , String message)"),v("br"),t._v("void "),v("strong",[t._v("logp")]),t._v("(Level level, String className, String methodName, String message, Object obj)"),v("br"),t._v("void "),v("strong",[t._v("logp")]),t._v("(Level level, String className, String methodName, String message , Object[] objs)"),v("br"),t._v("void "),v("strong",[t._v("logp")]),t._v("(Level level, String className, String methodName, String message, Throwable t)")]),t._v(" "),v("td",[t._v("记录一个给定级别、准确的调用者信息和消息的日志记录，其中可以包括对象或可抛出对象。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("logrb")]),t._v("(Level level , String className, String methodName , String bundleName, String message)"),v("br"),t._v("void "),v("strong",[t._v("logrb")]),t._v("(Level level , String className , String methodName, String bundleName, String message, Object obj)"),v("br"),t._v("void "),v("strong",[t._v("logrb")]),t._v("(Level level, String className , String methodName, String bundleName, String message, Object[] objs)"),v("br"),t._v("void "),v("strong",[t._v("logrb")]),t._v("(Level level, String className , String methodName, String bundleName, String message, Throwable t)")]),t._v(" "),v("td",[t._v("记录一个给定级别、准确的调用者信息、资源包名和消息的日志记录，其中可以包括对象或可抛出对象。")])]),t._v(" "),v("tr",[v("td",[t._v("Level "),v("strong",[t._v("getlevel")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setLevel")]),t._v("(Level l)")]),t._v(" "),v("td",[t._v("获得和设置这个日志记录器的级别。")])]),t._v(" "),v("tr",[v("td",[t._v("Logger "),v("strong",[t._v("getParent")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setParent")]),t._v("(Logger l)")]),t._v(" "),v("td",[t._v("获得和设置这个日志记录器的父日志记录器。")])]),t._v(" "),v("tr",[v("td",[t._v("Handler[] "),v("strong",[t._v("getHandlers")]),t._v("()")]),t._v(" "),v("td",[t._v("获得这个日志记录器的所有处理器。")])]),t._v(" "),v("tr",[v("td",[t._v("void "),v("strong",[t._v("addHandler")]),t._v("(Handler h)"),v("br"),t._v("void "),v("strong",[t._v("removeHandler")]),t._v("(Handler h)")]),t._v(" "),v("td",[t._v("增加或删除这个日志记录器中的一个处理器。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("getUseParentHandlers")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setUseParentHandlers")]),t._v("(boolean b)")]),t._v(" "),v("td",[t._v("获得和设置 useParentHandlers 属性。如果这个属性是 true，则日志记录器会将全部的日志记录转发给它的父处理器。")])]),t._v(" "),v("tr",[v("td",[t._v("Filter "),v("strong",[t._v("getFilter")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setFilter")]),t._v("(Filter f)")]),t._v(" "),v("td",[t._v("获得和设置这个日志记录器的过滤器。")])])])])]),v("h3",{attrs:{id:"java-util-logging-handler"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-handler"}},[t._v("#")]),t._v(" java.util.logging.Handler")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("abstract void "),v("strong",[t._v("publish")]),t._v("(LogRecord record)")]),t._v(" "),v("td",[t._v("将日志记录发送到希望的目的地。")])]),t._v(" "),v("tr",[v("td",[t._v("abstract void "),v("strong",[t._v("flush")]),t._v("()")]),t._v(" "),v("td",[t._v("刷新所有已缓冲的数据。")])]),t._v(" "),v("tr",[v("td",[t._v("abstract void "),v("strong",[t._v("close")]),t._v("()")]),t._v(" "),v("td",[t._v("刷新所有已缓冲的数据，并释放所有相关资源。")])]),t._v(" "),v("tr",[v("td",[t._v("Filter "),v("strong",[t._v("getFilter")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setFilter")]),t._v("(Filter f)")]),t._v(" "),v("td",[t._v("获得和设置这个处理器的过滤器。")])]),t._v(" "),v("tr",[v("td",[t._v("Formatter "),v("strong",[t._v("getFormatter")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setFormatter")]),t._v("(Formatter f)")]),t._v(" "),v("td",[t._v("获得和设置这个处理器的格式化器。")])]),t._v(" "),v("tr",[v("td",[t._v("Level "),v("strong",[t._v("getlevel")]),t._v("()"),v("br"),t._v("void "),v("strong",[t._v("setlevel")]),t._v("(Level l)")]),t._v(" "),v("td",[t._v("获得和设置这个处理器的级别。")])])])])]),v("h3",{attrs:{id:"java-util-logging-consolehandler"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-consolehandler"}},[t._v("#")]),t._v(" java.util.logging.ConsoleHandler")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("ConsoleHandler")]),t._v("()")]),t._v(" "),v("td",[t._v("构造一个新的控制台处理器。")])])])])]),v("h3",{attrs:{id:"java-util-logging-filehandler"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-filehandler"}},[t._v("#")]),t._v(" java.util.logging.FileHandler")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("FileHandler")]),t._v("(String pattern)"),v("br"),v("strong",[t._v("FileHandler")]),t._v("(String pattern, boolean append)"),v("br"),v("strong",[t._v("FileHandler")]),t._v("(String pattern, int limit , int count)"),v("br"),v("strong",[t._v("FileHandler")]),t._v("(String pattern, int limit , int count, boolean append)")]),t._v(" "),v("td",[t._v("构造一个文件处理器。"),v("br"),t._v("pattern：构造日志文件名的模式。"),v("br"),t._v("limit：在打开一个新日志文件之前，日志文件可以包含的近似最大字节数。"),v("br"),t._v("count：循环序列的文件数量。"),v("br"),t._v("append：新构造的文件处理器对象应该追加在一个已存在的日志文件尾部，则为true")])])])])]),v("h3",{attrs:{id:"java-util-logging-logrecord"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-logrecord"}},[t._v("#")]),t._v(" java.util.logging.LogRecord")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Level "),v("strong",[t._v("getLevel")]),t._v("()")]),t._v(" "),v("td",[t._v("获得这个日志记录的记录级别。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getLoggerName")]),t._v("()")]),t._v(" "),v("td",[t._v("获得正在记录这个日志记录的日志记录器的名字。")])]),t._v(" "),v("tr",[v("td",[t._v("ResourceBundle "),v("strong",[t._v("getResourceBundle")]),t._v("()"),v("br"),t._v("String "),v("strong",[t._v("getresourceBundleName")]),t._v("()")]),t._v(" "),v("td",[t._v("获得用于本地化消息的资源包或资源包的名字。如果没有获得，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getMessage")]),t._v("()")]),t._v(" "),v("td",[t._v("获得本地化和格式化之前的原始消息。")])]),t._v(" "),v("tr",[v("td",[t._v("Object[] "),v("strong",[t._v("getParameters")]),t._v("()")]),t._v(" "),v("td",[t._v("获得参数对象。如果没有获得，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("Throwable "),v("strong",[t._v("getThrown")]),t._v("()")]),t._v(" "),v("td",[t._v("获得被抛出的对象。如果不存在，则返回 null。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getSourceClassName")]),t._v("()"),v("br"),t._v("String "),v("strong",[t._v("getSourceMethodName")]),t._v("()")]),t._v(" "),v("td",[t._v("获得记录这个日志记录的代码区域。这个信息有可能是由日志记录代码提供的，也有可能是自动从运行时堆栈推测出来的。如果日志记录代码提供的值有误，或者运行时代码由于被优化而无法推测出确切的位置，这两个方法的返回值就有可能不准确。")])]),t._v(" "),v("tr",[v("td",[t._v("long "),v("strong",[t._v("getMillis")]),t._v("()")]),t._v(" "),v("td",[t._v("获得创建时间。以毫秒为单位（从1970年开始）。")])]),t._v(" "),v("tr",[v("td",[t._v("long "),v("strong",[t._v("getSequenceNumber")]),t._v("( )")]),t._v(" "),v("td",[t._v("获得这个日志记录的唯一序列序号。")])]),t._v(" "),v("tr",[v("td",[t._v("int "),v("strong",[t._v("getThreadID")]),t._v("()")]),t._v(" "),v("td",[t._v("获得创建这个日志记录的线程的唯一 ID。这些 ID 是由 LogRecord 类分配的，并且与其他线程的 ID 无关。")])])])])]),v("h3",{attrs:{id:"java-util-logging-filter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-filter"}},[t._v("#")]),t._v(" java.util.logging.Filter")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean "),v("strong",[t._v("isLoggable")]),t._v("(LogRecord record)")]),t._v(" "),v("td",[t._v("如果给定日志记录需要记录，则返回 true。")])])])])]),v("h3",{attrs:{id:"java-util-logging-formatter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-util-logging-formatter"}},[t._v("#")]),t._v(" java.util.logging.Formatter")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("abstract String "),v("strong",[t._v("format")]),t._v("(LogRecord record)")]),t._v(" "),v("td",[t._v("返回对日志记录格式化后得到的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("getHead")]),t._v("(Handler h)"),v("br"),t._v("String "),v("strong",[t._v("getTail")]),t._v("(Handler h)")]),t._v(" "),v("td",[t._v("返回出现在包含日志记录的文档的开头和结尾的字符串。"),v("br"),t._v("超类 Formatter 定义了这些方法，它们只返回空字符串。如果必要的话，可以对它们进行覆盖。")])]),t._v(" "),v("tr",[v("td",[t._v("String "),v("strong",[t._v("formatMessage")]),t._v("(LogRecord record)")]),t._v(" "),v("td",[t._v("返回经过本地化和格式化的消息内容。")])])])])]),v("h2",{attrs:{id:"_10-7-文本类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-7-文本类库"}},[t._v("#")]),t._v(" 10.7 文本类库")]),t._v(" "),v("h3",{attrs:{id:"java-text-numberformat"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-text-numberformat"}},[t._v("#")]),t._v(" java.text.NumberFormat")]),t._v(" "),v("div",{staticClass:"table-column-50-50-container"},[v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Number "),v("strong",[t._v("parse")]),t._v("(String s) 1.1")]),t._v(" "),v("td",[t._v("返回数字值，给定的 String 表示了一个数值。")])])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);