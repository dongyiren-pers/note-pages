(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{1049:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第2章-java程序设计基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第2章-java程序设计基础"}},[t._v("#")]),t._v(" 第2章 Java程序设计基础")]),t._v(" "),n("h2",{attrs:{id:"_2-1-简单示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简单示例"}},[t._v("#")]),t._v(" 2.1 简单示例")]),t._v(" "),n("p",[t._v("下面看一个最简单的 Java 应用程序，它只发送一条消息到控制台窗口中：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FirstSample")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"We will not use 'Hello, World!'\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这个程序虽然很简单，但所有的 Java 应用程序都具有这种结构，还是值得花一些时间来研究。")]),t._v(" "),n("ul",[n("li",[t._v("首先，Java 区分大小写。如果出现了大小写拼写错误，程序将无法运行。")]),t._v(" "),n("li",[t._v("关键字 public 称为访问修饰符（access modifier），这些修饰符用于控制程序的其他部分对这段代码的访问级别 。")]),t._v(" "),n("li",[t._v("关键字 class 后面紧跟类名 。 Java 中定义类名的规则很宽松。 名字必须以字母开头，后面可以跟字母和数字的任意组合。 长度基本上没有限制 。 但是不能使用 Java 保留字作为类名。")]),t._v(" "),n("li",[t._v("标准的命名规范：类名是以大写字母开头的名词。 如果名字由多个单词组成，每个单词的第一个字母都应该大写（这种命名方式称为骆驼命名法。 以其自身为例：CamelCase ） 。")]),t._v(" "),n("li",[t._v("源代码的文件名必须与公共类的名字相同，并用 java 作为扩展名。因此，存储这段源代码的文件名必须为 FirstSample.java。")])]),t._v(" "),n("p",[t._v("如果已经正确地命名了这个文件，并且源代码中没有任何录入错误，在编译这段源代码之后就会得到一个包含这个类字节码的文件。 Java 编译器将字节码文件自动地命名为 FirstSample. class ， 并与源文件存储在同一个目录下 。 最后，使用下面这行命令运行这个程序：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("java FirstSample\n")])])]),n("p",[t._v("程序执行之后，控制台上将会显示 We will not use 'Hello, World!'。")]),t._v(" "),n("p",[t._v("当使用 java ClassName 运行已编译的程序时， Java 虚拟机将从指定类中的 main 方法开始执行（这里的 “方法” 就是 Java 中所说的 “函数”），因此为了代码能够执行，在类的源文件中必须包含一个 main 方法。 当然，也可以将用户自定义的方法添加到类中，并且在 main 方法中调用它们 。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：作为一名 C++ 程序员，一定知道类的概念。Java 的类与 C++ 的类很相似，但还是有些差异会使人感到困惑。例如，Java中的所有函数都属于某个类的方法（标准术语将其称为方法，而不是成员函数）。因此，Java 中的 main 方法必须有一个外壳类。读者有可能对 C++ 中的静态成员函数十分熟悉。这些成员函数定义在类的内部，并且不对对象进行操作。Java 中的 main 方法必须是静态的。最后，与 C/C++ 一样，关键字 void 表示这个方法没有返回值，不同的是 main 方法没有为操作系统返回 “退出代码”。如果 main 方法正常退出， Java 应用程序的退出代码为 0，表示成功地运行了程序。如果希望在终止程序时返回其他的代码，需要调用 System.exit 方法。")])]),t._v(" "),n("p",[t._v("接下来，研究一下这段代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"We will not use 'Hello, World!'\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在上面这个 main 方法体中只包含了一条语句，其功能是：将一个文本行输出到控制台上。 在这里，使用了 System.out 对象并调用了它的 println 方法。 注意，点号"),n("code",[t._v(".")]),t._v("用于调用方法。 Java 使用的通用语法是")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameters"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("在这个示例中，调用了 println 方法并传递给它一个字符串参数。 这个方法将传递给它的字符串参数显示在控制台上 。 然后，终止这个输出行，使得每次调用 println 都会在新的一行上显示输出 。 需要注意一点， Java 与 C/C++  一样，都采用双引号分隔字符串 。")]),t._v(" "),n("p",[t._v("与其他程序设计语言中的函数一样，在 Java 的方法中，可以没有参数， 也可以有一个或多个参数（有的程序员把参数叫做实参） 。 对于一个方法，即使没有参数也需要使用空括号。例如，不带参数的 println 方法只打印一个空行。 使用下面的语句来调用：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("注释")]),t._v("：System.out 还有一个 print 方法，它在输出之后不换行。例如 "),n("code",[t._v('System.out.print("Hello")')]),t._v(' 打印 "Hello" 之后不换行，后面的输出紧跟在字母 "o" 之后。')])]),t._v(" "),n("h2",{attrs:{id:"_2-2-注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-注释"}},[t._v("#")]),t._v(" 2.2 注释")]),t._v(" "),n("p",[t._v("与大多数程序设计语言一样， Java 中的注释也不会出现在可执行程序中 。 因此，可以在源程序中根据需要添加任意多的注释，而不必担心可执行代码会膨胀。 在 Java 中，有 2 种标记注释的方式。 最常用的方式是使用 "),n("code",[t._v("//")]),t._v("，其注释内容从 "),n("code",[t._v("//")]),t._v(" 开始到本行结尾。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"We will not use 'Hello, World!'\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is this too cute?")]),t._v("\n")])])]),n("p",[t._v("当需要长篇的注释时，既可以在每行的注释前面标记 "),n("code",[t._v("//")]),t._v("，也可以使用 "),n("code",[t._v("/*")]),t._v(" 和 "),n("code",[t._v("*/")]),t._v(" 将一段比较长的注释括起来。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注意")]),t._v("： 在 Java 中，"),n("code",[t._v("/* */")]),t._v(" 注释不能嵌套。 也就是说，不能简单地把代码用 "),n("code",[t._v("/*")]),t._v(" 和 "),n("code",[t._v("*/")]),t._v(" 括起来作为注释，因为这段代码本身可能也包含一个 "),n("code",[t._v("*/")]),t._v("。")])]),t._v(" "),n("h2",{attrs:{id:"_2-3-数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-数据类型"}},[t._v("#")]),t._v(" 2.3 数据类型")]),t._v(" "),n("p",[t._v("Java 是一种强类型语言。 这就意味着必须为每一个变量声明一种类型 。")]),t._v(" "),n("p",[t._v("在 Java 中， 一共有 8 种基本类型，其中有 4 种整型、 2 种浮点类型、 1 种用于表示 Unicode 编码的字符单元的字符类型 char （请参见论述 char类型的章节）和 1 种用于表示真值的 boolean 类型。")]),t._v(" "),n("h3",{attrs:{id:"整型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[t._v("#")]),t._v(" 整型")]),t._v(" "),n("p",[t._v("整型用于表示没有小数部分的数值，它允许是负数。 Java 提供了 4 种整型， 具体内容如下表所示 。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型名称")]),t._v(" "),n("th",[t._v("关键字")]),t._v(" "),n("th",[t._v("存储需求")]),t._v(" "),n("th",[t._v("取值范围")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("整　型")]),t._v(" "),n("td",[t._v("int")]),t._v(" "),n("td",[t._v("4 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("−")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("31")])],1),n("mo",[t._v("∼")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("31")])],1),n("mo",[t._v("−")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-2^{31} \\sim 2^{31}-1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("3")]),n("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("3")]),n("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),n("br"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("=")]),n("mo",[t._v("−")]),n("mn",[t._v("2147483648")]),n("mo",[t._v("∼")]),n("mn",[t._v("2147483647")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("=-2147483648 \\sim 2147483647")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")])])])])])],1)]),t._v(" "),n("tr",[n("td",[t._v("短整型")]),t._v(" "),n("td",[t._v("short")]),t._v(" "),n("td",[t._v("2 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("−")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("15")])],1),n("mo",[t._v("∼")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("15")])],1),n("mo",[t._v("−")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-2^{15} \\sim 2^{15}-1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("1")]),n("span",{staticClass:"mord mtight"},[t._v("5")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("1")]),n("span",{staticClass:"mord mtight"},[t._v("5")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),n("br"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("=")]),n("mo",[t._v("−")]),n("mn",[t._v("32768")]),n("mo",[t._v("∼")]),n("mn",[t._v("32767")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("=-32768 \\sim 32767")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("7")])])])])])],1)]),t._v(" "),n("tr",[n("td",[t._v("长整型")]),t._v(" "),n("td",[t._v("long")]),t._v(" "),n("td",[t._v("8 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("−")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("63")])],1),n("mo",[t._v("∼")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("63")])],1),n("mo",[t._v("−")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-2^{63} \\sim 2^{63}-1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("6")]),n("span",{staticClass:"mord mtight"},[t._v("3")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("6")]),n("span",{staticClass:"mord mtight"},[t._v("3")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),n("br"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("=")]),n("mo",[t._v("−")]),n("mn",[t._v("9223372036854775808")]),n("mi",[t._v("L")]),n("mo",[t._v("∼")]),n("mn",[t._v("9223372036854775807")]),n("mi",[t._v("L")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("=-9223372036854775808L \\sim 9223372036854775807L")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[t._v("9")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord mathdefault"},[t._v("L")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("9")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord mathdefault"},[t._v("L")])])])])])],1)]),t._v(" "),n("tr",[n("td",[t._v("字节型")]),t._v(" "),n("td",[t._v("byte")]),t._v(" "),n("td",[t._v("1 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("−")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("7")])],1),n("mo",[t._v("∼")]),n("msup",[n("mn",[t._v("2")]),n("mn",[t._v("7")])],1),n("mo",[t._v("−")]),n("mn",[t._v("1")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-2^{7} \\sim 2^{7}-1")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("7")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("7")])])])])])])])])]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")])])])])]),n("br"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("=")]),n("mo",[t._v("−")]),n("mn",[t._v("128")]),n("mo",[t._v("∼")]),n("mn",[t._v("127")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("=-128 \\sim 127")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("−")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("∼")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("7")])])])])])],1)])])]),t._v(" "),n("p",[t._v("在 Java 中，整型的范围与运行 Java 代码的机器无关。这就解决了软件从一个平台移植到另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：与此相反，C 和 C++ 程序需要针对不同的处理器选择最为高效的整型，这样就有可能造成一个在 32 位处理器上运行很好的 C 程序在 16 位系统上运行却发生整数溢出。")])]),t._v(" "),n("p",[t._v("长整型数值有一个后缀 L 或 l（如4000000000L）。十六进制数值有一个前缀 0x 或 0X（如 0xCAFE）。八进制有一个前缀 0，例如，010对应八进制中的 8 。")]),t._v(" "),n("p",[t._v("从 Java 7 开始，加上前缀 0b 或 0B 就可以写二进制数。例如，0b1001 就是 9。另外，同样是从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000（或 0b1111_0100_0010_0100_0000）表示一百万。这些下划线只是为了让人更易读。Java 编译器会去除这些下划线。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++注释")]),t._v("：Java 没有任何无符号（unsigned）形式的 int、long、short 或 byte 类型。")])]),t._v(" "),n("h3",{attrs:{id:"浮点类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型"}},[t._v("#")]),t._v(" 浮点类型")]),t._v(" "),n("p",[t._v("浮点类型用于表示有小数部分的数值。在 Java 中有两种浮点类型，具体内容如下表所示。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型名称")]),t._v(" "),n("th",[t._v("关键字")]),t._v(" "),n("th",[t._v("存储需求")]),t._v(" "),n("th",[t._v("取值范围")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("单精度浮点型")]),t._v(" "),n("td",[t._v("float")]),t._v(" "),n("td",[t._v("4 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("±")]),n("mn",[t._v("3.40282347")]),n("mi",[t._v("E")]),n("mo",[t._v("+")]),n("mn",[t._v("38")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("±3.402 823 47E+38")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("±")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v(".")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("E")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("8")])])])])]),t._v(" "),n("br"),t._v("（有效位数为 6 ~ 7 位）")],1)]),t._v(" "),n("tr",[n("td",[t._v("双精度浮点型")]),t._v(" "),n("td",[t._v("double")]),t._v(" "),n("td",[t._v("8 字节")]),t._v(" "),n("td",[n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mo",[t._v("±")]),n("mn",[t._v("1.79769313486231570")]),n("mi",[t._v("E")]),n("mo",[t._v("+")]),n("mn",[t._v("308")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("±1.797 693 134 862 315 70E+308")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[t._v("±")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v(".")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("9")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("9")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("4")]),n("span",{staticClass:"mord"},[t._v("8")]),n("span",{staticClass:"mord"},[t._v("6")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mord"},[t._v("7")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("E")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("3")]),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v("8")])])])])]),n("br"),t._v("（有效位数为 15 位）")],1)])])]),t._v(" "),n("p",[t._v("double 表示这种类型的数值精度是 float 类型的两倍（称之为双精度数值）。 绝大部分应用程序都采用 double 类型。 在很多情况下， float 类型的精度很难满足需求。 实际上，只有很少的情况适合使用 float 类型，例如，需要单精度数据的库，或者需要存储大量数据。")]),t._v(" "),n("p",[t._v("float 类型的数值有一个后缀 F 或 f（例如，2.14F）。没有后缀 F 的浮点数值默认为 double 类型。当然，可以在浮点数值后面添加后缀 D 或 d（例如，2.14D）。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注释")]),t._v("：浮点数值可以使用十六进制表示。例如，"),n("eq",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mn",[t._v("0.125")]),n("mo",[t._v("=")]),n("msup",[n("mn",[t._v("2")]),n("mrow",[n("mo",[t._v("−")]),n("mn",[t._v("3")])],1)],1)],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0.125=2^{-3}")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[t._v("0")]),n("span",{staticClass:"mord"},[t._v(".")]),n("span",{staticClass:"mord"},[t._v("1")]),n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"mord"},[t._v("5")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[n("span",{staticClass:"mord mtight"},[t._v("−")]),n("span",{staticClass:"mord mtight"},[t._v("3")])])])])])])])])])])])])]),t._v(" 可以表示为 0x1.0p-3。其中，使用 p 表示指数，而不是 e。尾数采用十六进制，指数采用十进制。指数的基数是 2，而不是 10。")],1)]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("警告")]),t._v("：浮点数值不适用于无法接受舍入误差的金融计算中。例如，"),n("code",[t._v("System.out.println(2.0 - 1.1)")]),t._v(" 将打印出 0.8999999999999999，而不是 0.9。这种舍入误差主要是因为浮点数值采用二进制系统表示，而在二进制系统中无法精确地表示分数 1/10。这就好像十进制无法精确地表示分数 1/3 一样。 如果在数值计算中不九许有任何舍入误差，就应该使用 BigDecimal 类，本幸稍后将介绍这个类 。")])]),t._v(" "),n("h3",{attrs:{id:"char-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#char-类型"}},[t._v("#")]),t._v(" char 类型")]),t._v(" "),n("p",[t._v('char 类型的字面量值要用单引号括起来。 例如：\'A\' 是编码值为 65 所对应的字符常量。与 "A" 不同，"A" 是包含一个字符 A 的字符串。 char 类型的值可以表示为十六进制值，其范围从 \\u0000 到 \\Uffff。 例如： \\u2122 表示注册符号 ™， \\u03C0 表示希腊字母 π。')]),t._v(" "),n("p",[t._v("除了转义序列 \\u 之外，还有一些用于表示特殊字符的转义序列，请参看下表。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("转义序列")]),t._v(" "),n("th",[t._v("名称")]),t._v(" "),n("th",[t._v("Unicode 值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("\\b")]),t._v(" "),n("td",[t._v("退格")]),t._v(" "),n("td",[t._v("\\u0008")])]),t._v(" "),n("tr",[n("td",[t._v("\\t")]),t._v(" "),n("td",[t._v("制表")]),t._v(" "),n("td",[t._v("\\u0009")])]),t._v(" "),n("tr",[n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("换行")]),t._v(" "),n("td",[t._v("\\u000a")])]),t._v(" "),n("tr",[n("td",[t._v("\\r")]),t._v(" "),n("td",[t._v("回车")]),t._v(" "),n("td",[t._v("\\u000d")])]),t._v(" "),n("tr",[n("td",[t._v('\\"')]),t._v(" "),n("td",[t._v("双引号")]),t._v(" "),n("td",[t._v("\\u0022")])]),t._v(" "),n("tr",[n("td",[t._v("\\'")]),t._v(" "),n("td",[t._v("单引号")]),t._v(" "),n("td",[t._v("\\u0027")])]),t._v(" "),n("tr",[n("td",[t._v("\\\\")]),t._v(" "),n("td",[t._v("反斜杠")]),t._v(" "),n("td",[t._v("\\u005c")])])])]),t._v(" "),n("p",[t._v("这些转义序列都可以出现在加引号的字符字面量或字符串中 。 例如，'\\u2122' 或 \"Hello\\n\"。转义序列 \\u 还可以出现在加引号的字符常量或字符串之外（而其他所有转义序列不可以）。例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\\u005B\\u005D args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("就完全符合语法规则， \\u005B 和 \\u005D 是 "),n("code",[t._v("[")]),t._v(" 和 "),n("code",[t._v("]")]),t._v(" 的编码。")]),t._v(" "),n("h3",{attrs:{id:"boolean-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" boolean 类型")]),t._v(" "),n("p",[t._v("boolean（布尔）类型有两个值 ： false 和 true，用来判定逻辑条件。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：在 C++ 中，数值甚至指针可以代替 boolean 值。 值 0 相当于布尔值 false， 非 0 值相当于布尔值 true。 在 Java 中则不是这样。 整型值和布尔值之间不能进行相互转换。")])]),t._v(" "),n("h2",{attrs:{id:"_2-4-变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-变量"}},[t._v("#")]),t._v(" 2.4 变量")]),t._v(" "),n("p",[t._v("在 Java 中，每个变量都有一个类型（type）。 在声明变量时，变量的类型位于变量名之前。 这里列举一些声明变量的示例：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vacationDays"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" earthPopulation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" done"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),n("p",[t._v("变量名必须是一个以字母开头并由字母或数字构成的序列。需要注意，与大多数程序设计语言相比，Java 中 “字母” 和 “数字” 的范围更大。字母包括 'A'~ 'Z'、'a' ~ 'z'、'_' 、'$' 或在某种语言中表示字母的任何 Unicode 字符。 同样，数字包括 '0' ~ '9' 和在某种语言中表示数字的任何 Unicode 字符。")]),t._v(" "),n("p",[t._v("变量名大小写敏感，长度基本上没有限制 。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("提示")]),t._v("：如果想要知道哪些 Unicode 字符属于 Java 中的 “字母”，可以使用 Character 类的 isJavaldentifierStart 和 isJavaldentifierPart 方法来检查 。")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("提示")]),t._v("：尽管 $ 是一个合法的 Java 字符，但不要在你自己的代码中使用这个字符。它只用在 Java 编译器或其他工具生成的名字中 。")])]),t._v(" "),n("p",[t._v("另外，不能使用 Java 保留字作为变量名。")]),t._v(" "),n("p",[t._v("可以在一行中声明多个变量：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// both are integers")]),t._v("\n")])])]),n("p",[t._v("如前所述，变量名对大小写敏感，例如，hireday 和 hireDay 是两个不同的变量名 。在对两个不同的变量进行命名时，最好不要只存在大小写上的差异。 不过，在有些时候，确实很难给变量取一个好的名字。于是，许多程序员将变量名命名为类型名，例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),t._v(" box"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Box" is the type and "box" is the variable name')]),t._v("\n")])])]),n("p",[t._v('还有一些程序员更加喜欢在变量名前加上前缀 "a"：')]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),t._v(" aBox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"变量初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量初始化"}},[t._v("#")]),t._v(" 变量初始化")]),t._v(" "),n("p",[t._v("声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的变量。 例如， Java 编译器认为下面的语句序列是错误的：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vacationDays"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vacationDays"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR--variable not initialized")]),t._v("\n")])])]),n("p",[t._v("要想对一个已经声明过的变量进行赋值，就需要将变量名放在等号（＝） 左侧，相应取值的 Java 表达式放在等号的右侧。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vacationDays"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvacationDays "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("可以将变量的声明和初始化放在同一行中。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vacationDays "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("： C 和  C++  区分变量的声明与定义。 例如：")]),t._v(" "),n("p",[t._v("int i = 10;")]),t._v(" "),n("p",[t._v("是一个定义，而")]),t._v(" "),n("p",[t._v("extern int i;")]),t._v(" "),n("p",[t._v("是一个声明。在 Java 中，不区分变量的声明与定义。")])]),t._v(" "),n("h3",{attrs:{id:"常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),n("p",[t._v("在 Java 中，利用关键字 final 指示常量。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constants")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" CM_PER_INCH "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.54")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" paperWidth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" paperHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paper size in centimeters:"')]),t._v("\n              "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" paperWidth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" CM_PER_INCH "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"by "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" paperHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" CM_PER_INCH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。")]),t._v(" "),n("p",[t._v("经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。 可以使用关键字 static final 设置一个类常量。 下面是使用类常量的示例：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constants2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" CM_PER_INCH "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.54")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" paperWidth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" paperHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paper size in centimeters:"')]),t._v("\n              "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" paperWidth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" CM_PER_INCH "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"by "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" paperHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" CM_PER_INCH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("需要注意，类常量的定义位于 main 方法的外部。 因此，在同一个类的其他方法中也可以使用这个常量。 而且，如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。 在这个示例中， Constants2.CM_PER_INCH 就是这样一个常量。")]),t._v(" "),n("h2",{attrs:{id:"_2-5-运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-运算符"}},[t._v("#")]),t._v(" 2.5 运算符")]),t._v(" "),n("p",[t._v("在 Java 中，使用算术运算符 "),n("code",[t._v("+")]),t._v("、"),n("code",[t._v("-")]),t._v("、"),n("code",[t._v("*")]),t._v("、"),n("code",[t._v("/")]),t._v(" 表示加 、减、乘 、除运算。当参与 "),n("code",[t._v("/")]),t._v(" 运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法。 整数的求余操作（有时称为取模）用 "),n("code",[t._v("%")]),t._v(" 表示。例如，15 / 2 等于 7，15 % 2 等于 1，15.0 / 2 等于 7.5 。")]),t._v(" "),n("p",[t._v("需要注意，整数被 0 除将会产生一个异常，而浮点数被 0 除将会得到无穷大或 NaN 结果。")]),t._v(" "),n("h3",{attrs:{id:"数学函数与常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数学函数与常量"}},[t._v("#")]),t._v(" 数学函数与常量")]),t._v(" "),n("p",[t._v("在 Math 类中，包含了各种各样的数学函数。 在编写不同类别的程序时，可能需要的函数也不同。")]),t._v(" "),n("p",[t._v("要想计算一个数值的平方根，可以使用 sqrt 方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sqrt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints 2.0")]),t._v("\n")])])]),n("p",[t._v("在 Java 中，没有幕运算，因此需要借助于 Math 类的 pow 方法 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("将 y 的值设置为 x 的 a 次幕。 pow 方法有两个 double 类型的参数，其返回结果也为 double 类型 。")]),t._v(" "),n("p",[t._v("Math 类封装了许多简单的数学运算，提供了基本的数学操作，如指数、对数、平方根和三角函数等。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("函数")]),t._v(" "),n("th",[t._v("功能")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("abs")]),t._v(" "),n("td",[t._v("返回参数的绝对值。")])]),t._v(" "),n("tr",[n("td",[t._v("ceil")]),t._v(" "),n("td",[t._v("返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。")])]),t._v(" "),n("tr",[n("td",[t._v("floor")]),t._v(" "),n("td",[t._v("返回小于等于（<=）给定参数的最大整数 。")])]),t._v(" "),n("tr",[n("td",[t._v("rint")]),t._v(" "),n("td",[t._v("返回与参数最接近的整数。返回类型为double。")])]),t._v(" "),n("tr",[n("td",[t._v("round")]),t._v(" "),n("td",[t._v("四舍五入，算法为 Math.floor(x + 0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为 12，Math.round(-11.5) 的结果为-11。")])]),t._v(" "),n("tr",[n("td",[t._v("min")]),t._v(" "),n("td",[t._v("返回两个参数中的最小值。")])]),t._v(" "),n("tr",[n("td",[t._v("max")]),t._v(" "),n("td",[t._v("返回两个参数中的最大值。")])]),t._v(" "),n("tr",[n("td",[t._v("exp")]),t._v(" "),n("td",[t._v("返回自然数底数e的参数次方。")])]),t._v(" "),n("tr",[n("td",[t._v("log")]),t._v(" "),n("td",[t._v("返回参数的自然数底数的对数值。")])]),t._v(" "),n("tr",[n("td",[t._v("pow")]),t._v(" "),n("td",[t._v("返回第一个参数的第二个参数次方。")])]),t._v(" "),n("tr",[n("td",[t._v("sqrt")]),t._v(" "),n("td",[t._v("求参数的算术平方根。")])]),t._v(" "),n("tr",[n("td",[t._v("sin")]),t._v(" "),n("td",[t._v("求指定double类型参数的正弦值。")])]),t._v(" "),n("tr",[n("td",[t._v("cos")]),t._v(" "),n("td",[t._v("求指定double类型参数的余弦值。")])]),t._v(" "),n("tr",[n("td",[t._v("tan")]),t._v(" "),n("td",[t._v("求指定double类型参数的正切值。")])]),t._v(" "),n("tr",[n("td",[t._v("asin")]),t._v(" "),n("td",[t._v("求指定double类型参数的反正弦值。")])]),t._v(" "),n("tr",[n("td",[t._v("acos")]),t._v(" "),n("td",[t._v("求指定double类型参数的反余弦值。")])]),t._v(" "),n("tr",[n("td",[t._v("atan")]),t._v(" "),n("td",[t._v("求指定double类型参数的反正切值。")])]),t._v(" "),n("tr",[n("td",[t._v("atan2")]),t._v(" "),n("td",[t._v("将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。")])])])]),t._v(" "),n("h3",{attrs:{id:"数值类型之间的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数值类型之间的转换"}},[t._v("#")]),t._v(" 数值类型之间的转换")]),t._v(" "),n("p",[t._v("经常需要将一种数值类型转换为另一种数值类型。下图给出了数值类型之间的合法转换。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(717),alt:"img"}})]),t._v(" "),n("p",[t._v("图中有 6 个实心箭头，表示无信息丢失的转换；有 3 个虚箭头，表示可能有精度损失的转换。")]),t._v(" "),n("p",[t._v("例如， 123 456 789 是一个大整数，它所包含的位数比 float 类型所能够表达的位数多。 当将这个整型数值转换为 float 类型时，将会得到同样大小的结果，但却失去了一定的精度。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456789")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f is 1.23456792E8")]),t._v("\n")])])]),n("p",[t._v("当使用上面两个数值进行二元操作时（例如 n + f，n 是整数，f 是浮点数），先要将两个 操作数转换为同一种类型，然后再进行计算。")]),t._v(" "),n("ul",[n("li",[t._v("如果两个操作数中有一个是 double 类型，另一个操作数就会转换为 double 类型。")]),t._v(" "),n("li",[t._v("否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。")]),t._v(" "),n("li",[t._v("否则，如果其中一个操作数是 long 类型，另一个操作数将会转换为 long 类型。")]),t._v(" "),n("li",[t._v("否则，两个操作数都将被转换为 int 类型。")])]),t._v(" "),n("h3",{attrs:{id:"强制类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),n("p",[t._v("在上一小节中看到，在必要的时候， int 类型的值将会自动地转换为 double 类型。 但另一方面，有时也需要将 double 转换成 int。 在 Java 中，允许进行这种数值之间的类型转换。 当然 ，有可能会丢失一些信息。 在这种情况下，需要通过强制类型转换（cast）实现这个操作。 强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.997")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("这样，变量 nx 的值为 9。 强制类型转换通过截断小数部分将浮点值转换为整型 。")]),t._v(" "),n("p",[t._v("如果想对浮点数进行舍入运算，以使得到最接近的整数（在很多情况下，这种操作更有用）， 那就需要使用 Math .round 方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.997")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("现在，变量 nx 的值为 10。")]),t._v(" "),n("p",[t._v("当调用 round 的时候，仍然需要使用强制类型转换。因为 round 方法返回的结果为 long 类型，由于存在信息丢失的可能性，只有使用显式的强制类型转换才能够将 long 类型转换成 int 类型。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("警告")]),t._v("：如果试图将一个数值从一种类型强制转换为另 一种类型，又超出了目标类型的表示范围，结果会截断成一个完全不同的值。 例如，(byte) 300 的实际值为 44。")])]),t._v(" "),n("h3",{attrs:{id:"结合赋值和运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结合赋值和运算符"}},[t._v("#")]),t._v(" 结合赋值和运算符")]),t._v(" "),n("p",[t._v("可以在赋值中使用二元运算符，这是一种简写形式。 例如，")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("等价于：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"自增与自减运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自增与自减运算符"}},[t._v("#")]),t._v(" 自增与自减运算符")]),t._v(" "),n("p",[t._v("当然 ，我们知道加 1 、减 1 是数值变量最常见的操作。 在 Java 中，借鉴了 C 和 C++ 的做法，也提供了自增、自减运算符："),n("code",[t._v("n++")]),t._v(" 将变量 n 的当前值加 1，"),n("code",[t._v("n--")]),t._v(" 则将 n 的值减1。 例如，以下代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nn"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("将 n 的值改为 13 。 由于这些运算符会改变变量的值，所以它们的操作数不能是数值。 例如 ，"),n("code",[t._v("4++")]),t._v(" 就不是一个合法的语句 。")]),t._v(" "),n("p",[t._v("实际上，这些运算符有两种形式；上面介绍的是运算符放在操作数后面的 “后缀” 形式。还有一种 “前缀” 形式："),n("code",[t._v("++n")]),t._v("。 后缀和前缀形式都会使变量值加 1 或减 1。 但在表达式中，二者就有区别了。 前缀形式会先完成加 1 ；而后缀形式会使用变量原来的值。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now a is 16, m is 8")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now b is 14, n is 8")]),t._v("\n")])])]),n("p",[t._v("建议不要在表达式中使用 "),n("code",[t._v("++")]),t._v("，因为这样的代码很容易让人困惑，而且会带来烦人的bug。")]),t._v(" "),n("h3",{attrs:{id:"关系和-boolean-运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关系和-boolean-运算符"}},[t._v("#")]),t._v(" 关系和 boolean 运算符")]),t._v(" "),n("p",[t._v("Java 包含丰富 关系运算符 要检测相等性，可以使用两个等号 "),n("code",[t._v("==")]),t._v(" 例如，")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])])]),n("p",[t._v("的值为 false。")]),t._v(" "),n("p",[t._v("另外可以使用 "),n("code",[t._v("!=")]),t._v(" 检测不相等。 例如，")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])])]),n("p",[t._v("的值为 true。")]),t._v(" "),n("p",[t._v("最后，还有经常使用的 "),n("code",[t._v("<")]),t._v("（小于）、"),n("code",[t._v(">")]),t._v("（大于）、"),n("code",[t._v("<=")]),t._v("（小于等于）和 "),n("code",[t._v(">=")]),t._v("（大于等于）运算符 。")]),t._v(" "),n("p",[t._v("Java 沿用了 C++ 的做法，使用 "),n("code",[t._v("&&")]),t._v(" 表示逻辑 “与” 运算符，使用 "),n("code",[t._v("||")]),t._v(" 表示逻辑 “或” 运算符。从 "),n("code",[t._v("!=")]),t._v(" 运算符可以想到，感叹号 "),n("code",[t._v("!")]),t._v(" 就是逻辑非运算符。")]),t._v(" "),n("p",[n("code",[t._v("&&")]),t._v(" 和 "),n("code",[t._v("||")]),t._v(" 运算符是按照 “短路” 方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。可以利用这一点来避免错误。 例如，在下面的表达式中：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no division by 0")]),t._v("\n")])])]),n("p",[t._v("如果 x 等于 0，那么第二部分就不会计算，除以 0 的错误就不会出现。")]),t._v(" "),n("p",[t._v("Java 支持三元操作符 "),n("code",[t._v("?:")]),t._v(" 。 如果条件（condition）为 true ，下面的表达式")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("condition "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" expression1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression2\n")])])]),n("p",[t._v("就为第一个表达式的值，否则计算为第二个表达式的值。")]),t._v(" "),n("h3",{attrs:{id:"位运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),n("p",[t._v("处理整型类型时，可以直接对组成整型数值的各个位完成操作。位运算符包括：")]),t._v(" "),n("p",[n("code",[t._v("&")]),t._v(' ("and")、'),n("code",[t._v("|")]),t._v(' ("or")、'),n("code",[t._v("^")]),t._v(' ("xor")、'),n("code",[t._v("~")]),t._v(' ("not")')]),t._v(" "),n("p",[t._v("另外，还有 "),n("code",[t._v("<<")]),t._v(" 和 "),n("code",[t._v(">>")]),t._v(" 运算符将位模式左移或右移。")]),t._v(" "),n("p",[t._v("最后，"),n("code",[t._v(">>>")]),t._v(" 运算符会用 0 填充高位，这与 "),n("code",[t._v(">>")]),t._v(" 不同，它会用符号位填充高位。 不存在 "),n("code",[t._v("<<<")]),t._v(" 运算符。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注意")]),t._v("： 移位运算符的右操作数要完成模 32 的运算（除非左操作数是 long 类型，在这种情况下需要对右操作数模 64 ） 。 例如，1 << 35 的值等同于 1 << 3 或 8。")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：在 C/C++ 中，不能保证 "),n("code",[t._v(">>")]),t._v(" 是完成算术移位（扩展符号位）还是逻辑移位（填充 0）。实现者可以选择其中更高效的任何一种做法。 这意味着 C/C++ "),n("code",[t._v(">>")]),t._v(" 运算符对于负数生成的结果可能会依赖于具体的实现。 Java 则消除了这种不确定性。")])]),t._v(" "),n("h3",{attrs:{id:"括号与运算符级别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#括号与运算符级别"}},[t._v("#")]),t._v(" 括号与运算符级别")]),t._v(" "),n("p",[t._v("下表给出了运算符的优先级。 如果不使用圆括号，就按照给出的运算符优先级次序进行计算。 同一个级别的运算符按照从左到右的次序进行计算（除了表中给出的右结合运算符外）。例如，由于 "),n("code",[t._v("&&")]),t._v(" 的优先级比 "),n("code",[t._v("||")]),t._v(" 的优先级高，所以表达式")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c\n")])])]),n("p",[t._v("等价于")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c\n")])])]),n("p",[t._v("又因为 "),n("code",[t._v("+=")]),t._v(" 是右结合运算符，所以表达式")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" c\n")])])]),n("p",[t._v("等价于")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("运算符优先级：")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("运算符")]),t._v(" "),n("th",[t._v("结合性")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("[]")]),t._v(" "),n("code",[t._v(".")]),t._v(" "),n("code",[t._v("()（方法调用）")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("!")]),t._v(" "),n("code",[t._v("~")]),t._v(" "),n("code",[t._v("++")]),t._v(" "),n("code",[t._v("--")]),t._v(" "),n("code",[t._v("+（一元运算）")]),t._v(" "),n("code",[t._v("-（一元运算）")]),t._v(" "),n("code",[t._v("()（强制类型转换）")]),t._v(" "),n("code",[t._v("new")])]),t._v(" "),n("td",[t._v("从右向左")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("*")]),t._v(" "),n("code",[t._v("/")]),t._v(" "),n("code",[t._v("%")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("<<")]),t._v(" "),n("code",[t._v(">>")]),t._v(" "),n("code",[t._v(">>>")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("<")]),t._v(" "),n("code",[t._v("<=")]),t._v(" "),n("code",[t._v(">")]),t._v(" "),n("code",[t._v("=>")]),t._v(" "),n("code",[t._v("instanceof")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("==")]),t._v(" "),n("code",[t._v("!=")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("&")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("^")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("|")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("&&")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("||")])]),t._v(" "),n("td",[t._v("从左向右")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("?:")])]),t._v(" "),n("td",[t._v("从右向左")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("=")]),t._v(" "),n("code",[t._v("+=")]),t._v(" "),n("code",[t._v("-=")]),t._v(" "),n("code",[t._v("*=")]),t._v(" "),n("code",[t._v("/=")]),t._v(" "),n("code",[t._v("%=")]),t._v(" "),n("code",[t._v("&=")]),t._v(" "),n("code",[t._v("|=")]),t._v(" "),n("code",[t._v("^=")]),t._v(" "),n("code",[t._v("<<=")]),t._v(" "),n("code",[t._v(">>=")]),t._v(" "),n("code",[t._v(">>>=")])]),t._v(" "),n("td",[t._v("从右向左")])])])]),t._v(" "),n("h3",{attrs:{id:"枚举类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[t._v("#")]),t._v(" 枚举类型")]),t._v(" "),n("p",[t._v("有时候，变量的取值只在一个有限的集合内。针对这种情况，可以自定义枚举类型。")]),t._v(" "),n("p",[t._v("枚举类型包括有限个命名的值。例如，")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" SMALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MEDIUM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LARGE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EXTRA_LARGE "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("现在，可以声明这种类型的变量：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MEDIUM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("Size 类型的变量只能存储这个类型声明中给定的某个枚举值，或者 null 值，null 表示这个变量没有设置任何值。")]),t._v(" "),n("h2",{attrs:{id:"_2-6-字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-字符串"}},[t._v("#")]),t._v(" 2.6 字符串")]),t._v(" "),n("p",[t._v('从概念上讲，Java 字符串就是 Unicode 字符序列。例如，串 "Java\\u2122" 由 5 个Unicode 字符组成。')]),t._v(" "),n("p",[t._v("Java 没有内置的字符串类型，而是在标准 Java 类库中提供了一个预定义类 String。每个用双引号括起来的字符串都是 String 类的一个实例：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an empty string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"子串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子串"}},[t._v("#")]),t._v(" 子串")]),t._v(" "),n("p",[t._v("String 类的 substring 方法可以从一个较大的字符串提取出一个子串 。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v('得到了一个由字符 "Hel" 组成的字符串。')]),t._v(" "),n("p",[t._v("substring  方法的第二个参数是终止复制的第一个位置。这里要复制位置为 0、1 和 2 的字符，从 0 开始，直到 3 为止，但不包含 3。")]),t._v(" "),n("h3",{attrs:{id:"拼接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拼接"}},[t._v("#")]),t._v(" 拼接")]),t._v(" "),n("p",[t._v("与绝大多数的程序设计语言一样， Java 语言允许使用 "),n("code",[t._v("+")]),t._v(" 号连接（拼接）两个字符串 。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" expletive "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Expletive"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" PG13 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deleted"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expletive "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" PG13"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Expletivedeleted"')]),t._v("\n")])])]),n("p",[t._v("当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串（在后续章节中可以看到，任何一个 Java 对象都可以转换成字符串）。例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" rating "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PG"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "PG13"')]),t._v("\n")])])]),n("p",[t._v("如果需要把多个字符串放在一起，用一个定界符分隔，可以使用静态 join 方法 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" all "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" / "')]),t._v("，"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),t._v("，"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"M"')]),t._v("，"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"L"')]),t._v("，"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XL"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// all is the string "S / M / L / XL"')]),t._v("\n")])])]),n("h3",{attrs:{id:"不可变字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不可变字符串"}},[t._v("#")]),t._v(" 不可变字符串")]),t._v(" "),n("p",[t._v("String 类没有提供用于修改字符串的方法。如果希望将 greeting 的内容修改为 \"Help!\"，不能直接地将 greeting 的最后两个位置的字符修改为 'p' 和 '!' 。 这对于 C 程序员来说，将会感到无从下手。如何修改这个字符串呢？首先提取需要的字符，然后再拼接上替换的字符串：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v('上面这条语句将 greeting 当前值修改为  "Help!" 。')]),t._v(" "),n("p",[t._v("由于不能修改 Java 字符串中的字符，所以在 Java 文档中将 String 类对象称为"),n("strong",[t._v("不可变字符串")]),t._v(" 。当然，可以修改字符串变量 greeting，让它引用另外一个字符串。")]),t._v(" "),n("p",[t._v('这样做是否会降低运行效率呢？看起来好像修改一个代码单元要比创建一个新字符串更加简洁。的确，通过拼接 "Hel" 和 "p!" 来创建一个新字符串的效率确实不高。但是，不可变字符串却有一个优点：编译器可以让字符串共享。')]),t._v(" "),n("p",[t._v("为了弄清具体的工作方式，可以想象将各种字符串存放在公共的存储池中。字符串变量指向存储池中相应的位置。如果复制一个字符串变量，原始字符串与复制的字符串共享相同的字符。")]),t._v(" "),n("blockquote",[n("p",[t._v("这样会不会产生内存遗漏呢？毕竟，原始字符串放置在堆中。十分幸运的是，Java 将自动地进行垃圾回收。如果一块内存不再使用了，系统最终会将其回收。")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：C++ string 对象也自动地进行内存的分配与回收。 内存管理是通过构造器、赋佳操作和析构器显式执行的。然而，C++ 字符串是可修改的，可以修改字符串中的单个字符。")])]),t._v(" "),n("p",[t._v("总而言之，Java 的设计者认为共享带来的高效率远远胜过于提取、拼接字符串带来的低效率。查看一下程序会发现：很少需要修改字符串，而是往往需要对字符串进行比较。有一种例外情况，将来自于文件或键盘的单个字符或较短的字符串汇集成字符串。为此，Java 提供了一个独立的类，即 StringBuilder 类。")]),t._v(" "),n("h3",{attrs:{id:"检测字符串是否相等"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#检测字符串是否相等"}},[t._v("#")]),t._v(" 检测字符串是否相等")]),t._v(" "),n("p",[t._v("可以使用 equals 方法检测两个字符串是否相等。 对于表达式：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("如果字符串 s 与字符串 t 相等，则返回 true ；否则，返回 false。 需要注意， s 与 t 可以是字符串变量，也可以是字符串字面量 。例如，下列表达式是合法的：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("要想检测两个字符串是否相等，而不区分大小写，可以使用 equalslgnoreCase 方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsIgnoreCase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("千万不要使用 "),n("code",[t._v("==")]),t._v(" 运算符检测两个字符串是否相等 ！这个运算符只能够确定两个字符串是否放置在同一个位置上。当然，如果字符串放置在同一个位置上，它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// initialize greeting to a string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// probably true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hel"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// probably false")]),t._v("\n")])])]),n("p",[t._v("如果虚拟机始终将相同的字符串共享，就可以使用 "),n("code",[t._v("==")]),t._v(" 运算符检测是否相等。 但实际上只有字符串常量是共享的，而 "),n("code",[t._v("+")]),t._v(" 或 substring 等操作产生的结果并不是共享的 。 因此，千万不要使用二运算符测试字符串的相等性，以免在程序中出现糟糕的 bug。 从表面上看，这种\nbug 很像随机产生的间歇性错误 。")]),t._v(" "),n("h3",{attrs:{id:"空串与-null-串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空串与-null-串"}},[t._v("#")]),t._v(" 空串与 Null 串")]),t._v(" "),n("p",[t._v("空串 "),n("code",[t._v('""')]),t._v(" 是长度为 0 的字符串 。可以调用以下代码检查一个字符串是否为空 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("或")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("空串是一个 Java 对象，有自己的串长度（ 0 ）和内容（空）。 不过， String 变量还可以存放一个特殊的值，名为 null ，这表示目前没有任何对象与该变量关联。要检查一个字符串是否为 null，要使用以下条件：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"码点与代码单元"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#码点与代码单元"}},[t._v("#")]),t._v(" 码点与代码单元")]),t._v(" "),n("p",[t._v("Java 字符串由 char 值序列组成 。 char 数据类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。 大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。")]),t._v(" "),n("p",[t._v("length 方法将返回采用 UTF-16 编码表示的给定字符串所需要的代码单元数量。例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is 5.")]),t._v("\n")])])]),n("p",[t._v("要想得到实际的长度，即码点数量，可以调用：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cpCount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("调用 s.charAt(n) 将返回位置 n 的代码单元，n 介于 0 ~ s.length() - 1 之间。例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" first "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// first is 'H'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" last "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// last is 'o'")]),t._v("\n")])])]),n("p",[t._v("要想得到第 i 个码点，应该使用下列语句")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("offsetByCodePoints")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果想要遍历一个字符串，并且依次查看每一个码点，可以使用 codePoints 方法，它会生成一个 int 值的 ”流” 。每个 int 值对应一个码点。可以将它转换为一个数组，再完成遍历。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" codePoints "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePoints")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("反之，要把一个码点数组转换为 个字符串，可以使用构造函数。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("codePoints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" codePoints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"stringbuilder-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-类"}},[t._v("#")]),t._v(" StringBuilder 类")]),t._v(" "),n("p",[t._v("有些时候，需要由较短的字符串构建字符串，例如，来自键盘或文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串，都会构建一个新的 String 对象，既耗时，又浪费空间。使用 StringBuilder 类就可以避免这个问题的发生。")]),t._v(" "),n("p",[t._v("首先，构建一个空的字符串构建器。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("当每次需要添加一部分内容时，就调用 append 方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// appends a single character")]),t._v("\nbuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// appends a string")]),t._v("\n")])])]),n("p",[t._v("需要构建字符串时调用 toString 方法，将可以得到一个 String 对象，其中包含了构建器中的字符序列。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" completedString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("注释")]),t._v("：在 JDK5.0 中引入了 StringBuilder 类。这个类的前身是 StringBuffer，其效率稍有些低，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑，则应该用 StringBuilder 替代它。这两个类的 API 是相同的。")])]),t._v(" "),n("h2",{attrs:{id:"_2-7-输入输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-输入输出"}},[t._v("#")]),t._v(" 2.7 输入输出")]),t._v(" "),n("h3",{attrs:{id:"读取输入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取输入"}},[t._v("#")]),t._v(" 读取输入")]),t._v(" "),n("p",[t._v("前面已经看到，打印输出到 “标准输出流”（即控制台窗口）是一件非常容易的事情，只要调用 System.out.println 即可。然而，读取 “标准输入流” System.in 就没有那么简单了。要想通过控制台进行输人，首先需要构造一个 Scanner 对象，并与 “标准输入流” System.in 关联。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("现在，就可以使用 Scanner 类的各种方法实现输入操作了 。 例如， "),n("code",[t._v("nextLine")]),t._v(" 方法将输入一行。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"What is your name?"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextLine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在这里，使用 nextLine 方法是因为在输入行中有可能包含空格。 要想读取一个单词（以空白符作为分隔符），就调用  "),n("code",[t._v("next")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("要想读取一个整数，就调用 "),n("code",[t._v("nextlnt")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"How old are you? "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("与此类似，要想读取下一个浮点数，就调用 "),n("code",[t._v("nextDouble")]),t._v(" 方法。")]),t._v(" "),n("p",[t._v("最后，在程序的最开始添加上一行 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("Scanner 类定义在 java.util 包中。 当使用的类不是定义在基本 java.lang 包中时，要使用 import 指示字将相应的包加载进来 。")]),t._v(" "),n("h4",{attrs:{id:"java-util-scanner-5-0-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-util-scanner-5-0-api"}},[t._v("#")]),t._v(" "),n("strong",[t._v("java.util.Scanner 5.0 API")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("div",{staticStyle:{width:"300px"}},[t._v("方法")])]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Scanner(InputStream in)")]),t._v(" "),n("td",[t._v("用给定的输入流创建一个 Scanner 对象。")])]),t._v(" "),n("tr",[n("td",[t._v("String nextline()")]),t._v(" "),n("td",[t._v("读取输入的下行内容。")])]),t._v(" "),n("tr",[n("td",[t._v("String next()")]),t._v(" "),n("td",[t._v("读取输人的下一个单词（以空格作为分隔符）。")])]),t._v(" "),n("tr",[n("td",[t._v("int nextInt()"),n("br"),t._v("double nextDouble()")]),t._v(" "),n("td",[t._v("读取并转换下一个表示整数或浮点数的字符序列。")])]),t._v(" "),n("tr",[n("td",[t._v("boolean hasNext()")]),t._v(" "),n("td",[t._v("检测输入中是否还有其他单词。")])]),t._v(" "),n("tr",[n("td",[t._v("boolean hasNextInt()"),n("br"),t._v("boolean hasNextDouble()")]),t._v(" "),n("td",[t._v("检测是否还有表示整数或浮点数的下一个字符序列。")])])])]),t._v(" "),n("h4",{attrs:{id:"java-lang-system-1-0-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-system-1-0-api"}},[t._v("#")]),t._v(" "),n("strong",[t._v("java.lang.System 1.0 API")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("div",{staticStyle:{width:"300px"}},[t._v("方法")])]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("static Console console()")]),t._v(" "),n("td",[t._v("如果有可能进行交互操作，就通过控制台窗口为交互的用户返回一个Console对象，否则返回null。"),n("br"),t._v("对于任何一个通过控制台窗口启动的程序，都可使用Console对象。否则，其可用性将与系统有关。")])])])]),t._v(" "),n("h4",{attrs:{id:"java-io-console-6-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-io-console-6-api"}},[t._v("#")]),t._v(" "),n("strong",[t._v("java.io.Console 6 API")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("static char[] readPassword(String prompt , Object ... args) "),n("br"),t._v("static char[] readPassword(String prompt , Object ... args)")]),t._v(" "),n("td",[t._v("显示字符串 prompt 并读取用户输入，直到输入行结束。args 参数可以用来提供输入格式。")])])])]),t._v(" "),n("h3",{attrs:{id:"格式化输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出"}},[t._v("#")]),t._v(" 格式化输出")]),t._v(" "),n("p",[t._v("可以使用 System.out.print(x）将数值 x 输出到控制台上。 这条命令将以 x 对应的数据类型所允许的最大非 0 数字位数打印输出 x。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000.0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("打印 3332.3333333333335")]),t._v(" "),n("p",[t._v("在早期的 Java 版本中，格式化数值曾引起过一些争议。 庆幸的是 Java SE 5.0 沿用了 C 语言库函数中的 printf 方法。 例如，调用")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%8.2f"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("可以用 8 个字符的宽度和小数点后两个字符的精度打印 x。即打印输出一个空格和 7 个字符：3332.33")]),t._v(" "),n("p",[t._v("在 printf 中，可以使用多个参数，例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, %s. Next year, you\'ll be %d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("每一个以 "),n("code",[t._v("%")]),t._v(" 字符开始的格式说明符都用相应的参数替换。 格式说明符尾部的转换符将指示被格式化的数值类型： "),n("code",[t._v("f")]),t._v(" 表示浮点数， "),n("code",[t._v("s")]),t._v(" 表示字符串， "),n("code",[t._v("d")]),t._v(" 表示十进制整数。")]),t._v(" "),n("p",[n("strong",[t._v("用于 printf 的转换符：")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("转换符")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("举例")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("d")]),t._v(" "),n("td",[t._v("十进制整数")]),t._v(" "),n("td",[t._v("159")])]),t._v(" "),n("tr",[n("td",[t._v("x")]),t._v(" "),n("td",[t._v("十六进制整数")]),t._v(" "),n("td",[t._v("9f")])]),t._v(" "),n("tr",[n("td",[t._v("o")]),t._v(" "),n("td",[t._v("八进制整数")]),t._v(" "),n("td",[t._v("237")])]),t._v(" "),n("tr",[n("td",[t._v("f")]),t._v(" "),n("td",[t._v("定点浮点数")]),t._v(" "),n("td",[t._v("15.9")])]),t._v(" "),n("tr",[n("td",[t._v("e")]),t._v(" "),n("td",[t._v("指数浮点数")]),t._v(" "),n("td",[t._v("1.59e+01")])]),t._v(" "),n("tr",[n("td",[t._v("g")]),t._v(" "),n("td",[t._v("通用浮点数")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("a")]),t._v(" "),n("td",[t._v("十六进制浮点数")]),t._v(" "),n("td",[t._v("0x1.fccdp3")])]),t._v(" "),n("tr",[n("td",[t._v("s")]),t._v(" "),n("td",[t._v("字符串")]),t._v(" "),n("td",[t._v("Hello")])]),t._v(" "),n("tr",[n("td",[t._v("c")]),t._v(" "),n("td",[t._v("字符")]),t._v(" "),n("td",[t._v("H")])]),t._v(" "),n("tr",[n("td",[t._v("b")]),t._v(" "),n("td",[t._v("布尔")]),t._v(" "),n("td",[t._v("True")])]),t._v(" "),n("tr",[n("td",[t._v("h")]),t._v(" "),n("td",[t._v("散列码")]),t._v(" "),n("td",[t._v("42628b2")])]),t._v(" "),n("tr",[n("td",[t._v("%")]),t._v(" "),n("td",[t._v("百分号")]),t._v(" "),n("td",[t._v("%")])]),t._v(" "),n("tr",[n("td",[t._v("n")]),t._v(" "),n("td",[t._v("与平台有关的行分隔符")]),t._v(" "),n("td",[t._v("-")])])])]),t._v(" "),n("p",[t._v("另外，还可以给出控制格式化输出的各种标志。例如， 逗号标志增加了分组的分隔符。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%,.2f"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000.0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("打印 3,332.33")]),t._v(" "),n("p",[n("strong",[t._v("用于 printf 的标志：")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("div",{staticStyle:{width:"200px"}},[t._v("标志")])]),t._v(" "),n("th",[t._v("目的")]),t._v(" "),n("th",[t._v("举例")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("+=")]),t._v(" "),n("td",[t._v("打印正数和负数的符号")]),t._v(" "),n("td",[t._v("+3332.33")])]),t._v(" "),n("tr",[n("td",[t._v("空格")]),t._v(" "),n("td",[t._v("在正数之前添加空格")]),t._v(" "),n("td",[t._v(" 3332.33")])]),t._v(" "),n("tr",[n("td",[t._v("0")]),t._v(" "),n("td",[t._v("数字前面补0")]),t._v(" "),n("td",[t._v("003332.33")])]),t._v(" "),n("tr",[n("td",[t._v("_")]),t._v(" "),n("td",[t._v("左对齐")]),t._v(" "),n("td",[t._v("3332.33")])]),t._v(" "),n("tr",[n("td",[t._v("(")]),t._v(" "),n("td",[t._v("将负数括在括号内")]),t._v(" "),n("td",[t._v("(3332.33)")])]),t._v(" "),n("tr",[n("td",[t._v(",")]),t._v(" "),n("td",[t._v("添加分组分隔符")]),t._v(" "),n("td",[t._v("3,332.33")])]),t._v(" "),n("tr",[n("td",[t._v("#（对于 f 格式）")]),t._v(" "),n("td",[t._v("包含小数点")]),t._v(" "),n("td",[t._v("3,332.")])]),t._v(" "),n("tr",[n("td",[t._v("#（对于 x 或 0 格式）")]),t._v(" "),n("td",[t._v("添加前缀 0x 或 0")]),t._v(" "),n("td",[t._v("0xcafe")])]),t._v(" "),n("tr",[n("td",[t._v("$")]),t._v(" "),n("td",[t._v("给定被格式化的参数索引。例如，%1$d，%1$x 将以十进制和十六进制格式打印第1个参数")]),t._v(" "),n("td",[t._v("159 9F")])]),t._v(" "),n("tr",[n("td",[t._v("<")]),t._v(" "),n("td",[t._v("格式化前面说明的数值。例如，%d%<x 以十进制和十六进制打印同一个数值")]),t._v(" "),n("td",[t._v("159 9F")])])])]),t._v(" "),n("p",[t._v("可以使用静态的 String.format 方法创建一个格式化的字符串，而不打印输出 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, %s. Next year, you\'ll be %d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"文件输入与输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件输入与输出"}},[t._v("#")]),t._v(" 文件输入与输出")]),t._v(" "),n("p",[t._v("要想对文件进行读取，就需要一个用 File 对象构造一个 Scanner 对象，如下所示：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Paths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myfile.txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("现在，就可以利用前面介绍的任何一个 Scanner 方法对文件进行读取。")]),t._v(" "),n("p",[t._v("要想写入文件，就需要构造一个 PrintWriter 对象。 在构造器中，只需要提供文件名 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),t._v(" out "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myfile.txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果文件不存在，创建该文件。可以像输出到 System.out 一样使用 print、 println 以及 printf 命令。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("警告")]),t._v("：将字符串作为参数构造 Scanner，字符串被解释为数据，而不是文件名 。 例如，如果调用：")]),t._v(" "),n("p",[t._v('Scanner in = new Scanner("myfile.txt"); //ERROR?')]),t._v(" "),n("p",[t._v("将参数作为包含 10 个字符的数据：'m'，'y'，'f' 等。")])]),t._v(" "),n("p",[t._v('当指定一个相对文件名时，例如，"myfile.txt", "mydirectory/myfile. txt" 或 "../myfile.txt"，文件位于 Java 虚拟机启动路径的相对位置。 如果在命令行方式下用下列命令启动程序：')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("java MyProg\n")])])]),n("p",[t._v("启动路径就是命令解释器的当前路径。 然而，如果使用集成开发环境，那么启动路径将由 IDE 控制 。 可以使用下面的调用方式找到路径的位置：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dir "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user.dir"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果觉得定位文件比较烦恼，则可以考虑使用绝对路径。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("注释")]),t._v("：当 采用命令行方式启动一个程序时，可以利用 Shell 的重定向语法将任意文件关联到 System.in 和 System.out:")]),t._v(" "),n("p",[t._v("java MyProg < myfile.txt > output.txt")])]),t._v(" "),n("h4",{attrs:{id:"java-util-scanner-5-0-api-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-util-scanner-5-0-api-2"}},[t._v("#")]),t._v(" java.util.Scanner 5.0 API")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Scanner(File f)")]),t._v(" "),n("td",[t._v("构造一个从给定文件读取数据的 Scanner。")])]),t._v(" "),n("tr",[n("td",[t._v("Scanner(String data)")]),t._v(" "),n("td",[t._v("构造一个从给定字符串读取数据的 Scanner。")])])])]),t._v(" "),n("h4",{attrs:{id:"java-io-printwriter-1-1-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-io-printwriter-1-1-api"}},[t._v("#")]),t._v(" java.io.PrintWriter 1.1 API")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("PrintWriter(String fileName)")]),t._v(" "),n("td",[t._v("构造一个将数据写入文件的 PrintWriter。 文件名由参数指定。")])])])]),t._v(" "),n("h4",{attrs:{id:"java-nio-file-paths-7-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-nio-file-paths-7-api"}},[t._v("#")]),t._v(" java.nio.file.Paths 7 API")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("static Path get(String pathname)")]),t._v(" "),n("td",[t._v("根据给定的路径名构造一个 Path。")])])])]),t._v(" "),n("h2",{attrs:{id:"_2-8-控制流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-控制流程"}},[t._v("#")]),t._v(" 2.8 控制流程")]),t._v(" "),n("p",[t._v("与任何程序设计语言一样， Java 使用条件语句和循环结构确定控制流程。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("： Java 的控制流程结构与 C 和 C++ 的控制流程结构一样，只有很少的例外情况。 没有 goto 语句，但 break  语句可以带标签，可以利用它实现从内层循环跳出的目的（这种情况 C 语言采用 goto 语句实现）。 另外，还有一种变形的 for 循环，在 C 或 C++ 中没有这类循环。 它有点类似于 C＃中的 foreach 循环 。")])]),t._v(" "),n("h3",{attrs:{id:"块作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#块作用域"}},[t._v("#")]),t._v(" 块作用域")]),t._v(" "),n("p",[t._v("在深入学习控制结构之前，需要了解块（block）的概念。")]),t._v(" "),n("p",[t._v("块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。 块确定了变量的作用域。一个块可以嵌套在另一个块中 。 下面就是在 main 方法块中嵌套另一个语句块的示例。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// k is only defined up to here")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("但是，不能在嵌套的两个块中声明同名的变量。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：C++ 中可以在嵌套的块中重定义一个变量，在内层定义的变量会覆盖在外层定义的变量。这样，有可能会导致程序设计错误，因此在 Java 中不允许这样做。")])]),t._v(" "),n("h3",{attrs:{id:"条件语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[t._v("#")]),t._v(" 条件语句")]),t._v(" "),n("p",[t._v("在 Java中，一般的条件语句为")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" statement1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" statement2\n")])])]),n("h3",{attrs:{id:"while-和-do-while-循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#while-和-do-while-循环"}},[t._v("#")]),t._v(" while 和 do-while 循环")]),t._v(" "),n("p",[t._v("当条件为 true 时， while 循环执行一条语句（通常是一个语句块）。一般格式为")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" statement\n")])])]),n("p",[t._v("while 循环语句首先检测循环条件 。 因此，循环体中的代码有可能不被执行 。 如果希望循环体至少执行一次，则应该将检测条件放在最后 。 使用 do-while 循环语句可以实现这种操作方式。 它的语法格式为：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" statement "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("这种循环语句先执行语句（通常是一个语句块），再检测循环条件；然后重复语句，再检测循环条件，以此类推。")]),t._v(" "),n("h3",{attrs:{id:"for-循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[t._v("#")]),t._v(" for 循环")]),t._v(" "),n("p",[t._v("for 循环语句是支持迭代的一种通用结构，通过每次迭代之后更新的计数器或类似变量来控制迭代次数。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("for 语句的第 1 部分通常用于对计数器初始化；第 2 部分给出每次新一轮循环执行前要检测的循环条件；第 3 部分指示如何更新计数器。")]),t._v(" "),n("p",[t._v("当在 for 语句的第 1 部分中声明了一个变量之后，这个变量的作用域就为 for 循环的整个循环体。")]),t._v(" "),n("p",[t._v("特别指出，如果在 for 语句内部定义一个变量，这个变量就不能在循环体之外使用。因此，如果希望在 for 循环体之外使用循环计数器的最终值，就要确保这个变量在循环语句的前面且在外部声明。")]),t._v(" "),n("h3",{attrs:{id:"switch-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch-语句"}},[t._v("#")]),t._v(" switch 语句")]),t._v(" "),n("p",[t._v("在处理多个选项时，使用 if/else 结构显得有些笨拙 。 Java 有一个与 C/C++  完全一样的 switch 语句 。")]),t._v(" "),n("p",[t._v("switch 语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到 switch 语句的结束处为止。如果没有相匹配的 case 标签，而有 default 子句，就执行这个子句。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optional")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optional")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There can be any number of case statements")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optional")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("case 标签可以是 ：")]),t._v(" "),n("ul",[n("li",[t._v("类型为 char、byte、short 或 int 的常量表达式 。")]),t._v(" "),n("li",[t._v("枚举常量 。")]),t._v(" "),n("li",[t._v("从 Java SE 7 开始， case 标签还可以是字符串字面量 。")])]),t._v(" "),n("p",[t._v("当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表达式值确定。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" SZ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" SMALL"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no need to use Size.SMALL")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"中断控制流程语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中断控制流程语句"}},[t._v("#")]),t._v(" 中断控制流程语句")]),t._v(" "),n("h4",{attrs:{id:"break-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#break-语句"}},[t._v("#")]),t._v(" break 语句")]),t._v(" "),n("p",[t._v("尽管 Java 的设计者将 goto 作为保留字，但实际上并没有打算在语言中使用它。 通常 ，使用 goto 语句被认为是一种拙劣的程序设计风格。")]),t._v(" "),n("p",[t._v("当然，也有一些程序员认为反对 goto 的呼声似乎有些过分（例如， Donald Knuth 就曾编著过一篇名为《 Structured Programming with goto statements 》 的著名文章） 。 这篇文章说：无限制地使用 goto 语句确实是导致错误的根源 ，但在有些情况下，偶尔使用 goto 跳出循环还是有益处的。")]),t._v(" "),n("p",[t._v("Java 设计者同意这种看法，甚至在 Java 中增加了一条带标签的 break，以此来支持这种程序设计风格 。")]),t._v(" "),n("p",[t._v("首先看一下不带标签的 break 语句 。 与用于退出 switch 语句的 break 语句一样， 它也可以用于退出循环语句。 例如，")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("years "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    balance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" payment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" interest "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" interestRate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    balance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" interest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("balance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" goal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    years"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("与 C++ 不同， Java 还提供了一种带标签的 break 语句，用于跳出 多重嵌套的循环语句。")]),t._v(" "),n("p",[t._v("这里有一个示例说明了 break 语句的工作状态。 注意，标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nread_data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this loop statement is tagged with the label")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this inner loop is not labeled")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Enter a number >= 0: "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// should never happen-can't go on")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" read_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// break out of read_data loop")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this statement is executed immediately after the labeled break")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// check for bad situation")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//deal with bad situation")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// carry out normal processing")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果输入有误，通过执行带标签的 break 跳转到带标签的语句块末尾。")]),t._v(" "),n("p",[t._v("事实上，可以将标签应用到任何语句中，甚至可以应用到 if 语句或者块语句中，如下所示：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("label"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" label"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exits block")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jumps here when the break statement executes")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"continue-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#continue-语句"}},[t._v("#")]),t._v(" continue 语句")]),t._v(" "),n("p",[t._v("与 break 语句一样，continue 将中断正常的控制流程。continue 语句将控制转移到最内层循环的首部。")]),t._v(" "),n("h2",{attrs:{id:"_2-9-大数值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-大数值"}},[t._v("#")]),t._v(" 2.9 大数值")]),t._v(" "),n("p",[t._v("如果基本的整数和浮点数精度不能够满足需求，那么可以使用 java.math 包中的两个很有用的类： "),n("strong",[t._v("Biglnteger")]),t._v(" 和 "),n("strong",[t._v("BigDecimal")]),t._v("。 这两个类可以处理包含任意长度数字序列的数值。Biglnteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算 。")]),t._v(" "),n("p",[t._v("使用静态的 valueOf 方法可以将普通的数值转换为大数值：  `")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("遗憾的是，不能使用人们熟悉的算术运算符（如：＋和＊）处理大数值。 而需要使用大数值类中的 add 和 multiply 方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c = a + b")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d = c * (b + 2)")]),t._v("\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("：与 C++ 不同， Java 没有提供运算符重载功能。 程序员无法重定义 "),n("code",[t._v("+")]),t._v(" 和 "),n("code",[t._v("*")]),t._v(" 运算符，使其应用于 Biglnteger 类的 add 和 multiply 运算。 Java 语言的设计者确实为字符串的连接重载了 "),n("code",[t._v("+")]),t._v(" 运算符，但没有重载其他的运算符，也没有给 Java 程序员在自己的类中重载运算符的机会。")])]),t._v(" "),n("h2",{attrs:{id:"_2-10-数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-数组"}},[t._v("#")]),t._v(" 2.10 数组")]),t._v(" "),n("p",[t._v("数组是一种数据结构，用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。")]),t._v(" "),n("p",[t._v("在声明数组变量时，需要指出数组类型（数据元素类型紧跟"),n("code",[t._v("[]")]),t._v("）和数组变量的名字。 声明整型数组 a :")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("不过，这条语句只声明 了变量 a，并没有将 a 初始化为一个真正的数组。 使用 new 运算符创建数组。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("这条语句创建了一个可以存储100个整数的数组。数组长度不要求是常量：new int[n]会创建一个长度为 n 的数组。")]),t._v(" "),n("p",[t._v("这个数组的下标从 0 ~ 99 （不是 1 ~ 100 ） 。 一旦创建了数组，就可以给数组元素赋值。")]),t._v(" "),n("p",[t._v("创建一个数字数组时，所有元素都初始化为 0。 boolean 数组的元素会初始化为 false。 对象数组的元素则初始化为一个特殊值 null，这表示这些元素（还）未存放任何对象。")]),t._v(" "),n("p",[t._v("要想获得数组中的元素个数，可以使用 array.length。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("一旦创建了数组，就不能再改变它的大小。 如果经常需要在运行过程中扩展数组的大小，就应该使用另一种数据结构一一数组列表（array list） 。")]),t._v(" "),n("h3",{attrs:{id:"for-each-循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-each-循环"}},[t._v("#")]),t._v(" for each 循环")]),t._v(" "),n("p",[t._v("Java 有一种功能很强的循环结构，可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心 。")]),t._v(" "),n("p",[t._v("这种增强的 for 循环的语句格式为 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" collection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" statement\n")])])]),n("p",[t._v("定义一个变量用于暂存集合中的每一个元素，并执行相应的语句。collection 必须是一个数组或者是一个实现了 lterable 接口的类对象（例如 ArrayList） 。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" element "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n")])])]),n("h3",{attrs:{id:"数组初始化以及匿名数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组初始化以及匿名数组"}},[t._v("#")]),t._v(" 数组初始化以及匿名数组")]),t._v(" "),n("p",[t._v("在 Java 中，提供了一种创建数组对象并同时赋予初始值的简化书写形式。 下面是一个例子：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" smallPrimes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("还可以初始化一个匿名的数组：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这种表示法将创建一个新数组并利用括号中提供的值进行初始化，数组的大小就是初始值的个数。 使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("smallPrimes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"数组拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组拷贝"}},[t._v("#")]),t._v(" 数组拷贝")]),t._v(" "),n("p",[t._v("在 Java 中，允许将一个数组变量拷贝给另一个数组变量。 这时，两个变量将引用同一个数纽 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" luckyNumbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" smallPrimes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TuckyNumbers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("；"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now smallPrimes[5] is also 12")]),t._v("\n")])])]),n("p",[t._v("如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf 方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" copiedLuckyNumbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("luckyNumbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" luckyNumbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("第 2 个参数是新数组的长度。 这个方法通常用来增加数组的大小：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("luckyNumbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TuckyNumbers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TuckyNumbers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果数组元素是数值型，则多余的元素将被赋值为 0 ；如果数组元素是布尔型，则将赋值为 false。 如果长度小于原始数组的长度，则只拷贝最前面的数据元素 。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("C++ 注释")]),t._v("： Java 数组与 C++ 数组在堆栈上有很大不同，但基本上与分配在堆上的数组指针一样。")]),t._v(" "),n("p",[t._v("Java中的 [] 运算符被预定义为检查数组边界，且没有指针运算。")])]),t._v(" "),n("h3",{attrs:{id:"命令行参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数"}},[t._v("#")]),t._v(" 命令行参数")]),t._v(" "),n("p",[t._v("前面示例中都有一个带 String arg[]  参数的 main 方法。 这个参数表明 main 方法将接收一个字符串数组，即命令行参数。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Message")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equals "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello,"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equals "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Goodbye,"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print the other command-line arguments")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果使用下面这种形式运行这个程序：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("java Message -g cruel world\n")])])]),n("p",[t._v("args 数组将包含下列内容：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),t._v("\nargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cruel"')]),t._v("\nargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n")])])]),n("p",[t._v("这个程序将显示下列信息 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Goodbye")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cruel world"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),n("h3",{attrs:{id:"数组排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组排序"}},[t._v("#")]),t._v(" 数组排序")]),t._v(" "),n("p",[t._v("要想对数值型数组进行排序 ，可以使用 Arrays 类中的 sort 方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("这个方法使用了优化的快速排序算法。快速排序算法对于大多数数据集合来说都是效率比较高的。Arrays 类还提供了几个使用很便捷的方法，在稍后的 API 注释中将介绍它们 。")]),t._v(" "),n("h3",{attrs:{id:"多维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[t._v("#")]),t._v(" 多维数组")]),t._v(" "),n("p",[t._v("多维数组将使用多个下标访问数组元素，它适用于表示表格或更加复杂的排列形式。")]),t._v(" "),n("p",[t._v("在 Java 中， 声明一个二维数组相当简单。例如 ：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" balances"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("可以这样初始化：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("balances "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NYEARS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NRATES"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果知道数组元素，可以直接使用简化的书写形式对多维数组进行初始化。 例如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" magicSquare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("一旦数组被初始化，就可以利用两个方括号访问每个元素，例如，"),n("code",[t._v("balances[i][j]")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("提示")]),t._v("：要想快速地打印一个二维数组的数据元素列表，可以调用： "),n("code",[t._v("System.out.println(Arrays.deepToString(a));")])])]),t._v(" "),n("h3",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=e.exports},717:function(t,a,s){t.exports=s.p+"assets/img/23bec16980822217f22328de7b09c6c4.8c75fa9a.jpg"}}]);